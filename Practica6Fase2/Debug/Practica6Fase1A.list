
Practica6Fase1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a390  0800a390  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a398  0800a398  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0800a3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  2000012c  0800a4cc  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  0800a4cc  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccd6  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b7  00000000  00000000  0003ce75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00040f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001389  00000000  00000000  00042898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00043c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd66  00000000  00000000  0006e2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5002  00000000  00000000  0008e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c60  00000000  00000000  00183034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00189c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a2d0 	.word	0x0800a2d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	0800a2d0 	.word	0x0800a2d0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <ini_acelerometro>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ini_acelerometro(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	// que metemos en el buffer
	// pues los datos a escribir
	buffer[0]= 0x40;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	713b      	strb	r3, [r7, #4]
	// debe escribir en la dirección del esclabo
	// 0xD4
	// el tamaño es de 8 byrtes
	//creo que no hace falta meterle 1000 de timeaout
	// ya qyue no hay que calentarlo
	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 100);
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	2210      	movs	r2, #16
 8000afa:	21d4      	movs	r1, #212	; 0xd4
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ini_acelerometro+0x2c>)
 8000afe:	f001 fbcf 	bl	80022a0 <HAL_I2C_Mem_Write>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000180 	.word	0x20000180

08000b10 <readAccel>:
int16_t readAccel(uint8_t axis){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	int16_t res = 0 ;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];
	HAL_I2C_Mem_Read(&hi2c2, 0xD4, 0x28+2*axis, I2C_MEMADD_SIZE_8BIT, buffer,2, 100);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3314      	adds	r3, #20
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	21d4      	movs	r1, #212	; 0xd4
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <readAccel+0x70>)
 8000b3c:	f001 fcc4 	bl	80024c8 <HAL_I2C_Mem_Read>
	res = ((int16_t)(buffer[1]<<8)| buffer[0])*0.061;
 8000b40:	7b7b      	ldrb	r3, [r7, #13]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	7b3b      	ldrb	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fdb7 	bl	80006c0 <__aeabi_i2d>
 8000b52:	a309      	add	r3, pc, #36	; (adr r3, 8000b78 <readAccel+0x68>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	f7ff fb36 	bl	80001c8 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fe16 	bl	8000794 <__aeabi_d2iz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	81fb      	strh	r3, [r7, #14]
	return res;
 8000b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	5a1cac08 	.word	0x5a1cac08
 8000b7c:	3faf3b64 	.word	0x3faf3b64
 8000b80:	20000180 	.word	0x20000180

08000b84 <convert>:
int16_t convert(int16_t dato){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	return (((dato - (-1000)) * (127 - 0)) /
 8000b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b92:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000b96:	4613      	mov	r3, r2
 8000b98:	01db      	lsls	r3, r3, #7
 8000b9a:	1a9b      	subs	r3, r3, r2
			(1000 - (-1000))) + 0;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <convert+0x34>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	11d2      	asrs	r2, r2, #7
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b21b      	sxth	r3, r3
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	10624dd3 	.word	0x10624dd3

08000bbc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

	uint8_t dato[3]; // esta es la variable donde vamos a mandar el report
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bc2:	f000 fe36 	bl	8001832 <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 8000bc6:	f000 f835 	bl	8000c34 <SystemClock_Config>
/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bca:	f000 f9cf 	bl	8000f6c <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000bce:	f000 f893 	bl	8000cf8 <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8000bd2:	f000 f8c9 	bl	8000d68 <MX_I2C2_Init>
	MX_QUADSPI_Init();
 8000bd6:	f000 f905 	bl	8000de4 <MX_QUADSPI_Init>
	MX_SPI3_Init();
 8000bda:	f000 f929 	bl	8000e30 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8000bde:	f000 f965 	bl	8000eac <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000be2:	f000 f993 	bl	8000f0c <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8000be6:	f008 fd7d 	bl	80096e4 <MX_USB_DEVICE_Init>
	ini_acelerometro();
 8000bea:	f7ff ff79 	bl	8000ae0 <ini_acelerometro>
	/* USER CODE BEGIN 2 */
	HAL_Delay(5000); //retraso para esperar a que el USB se configure
 8000bee:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bf2:	f000 fe93 	bl	800191c <HAL_Delay>
	dato[0] = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	713b      	strb	r3, [r7, #4]
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
{// leemos eje x
// establecemos el valor de dato[1]
	dato[1]= convert(readAccel(0));
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff ff88 	bl	8000b10 <readAccel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffbe 	bl	8000b84 <convert>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	717b      	strb	r3, [r7, #5]
// leemos eje y
//establecemos el valor de dato[2]
		dato[2]= convert(readAccel(1)),
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ff7e 	bl	8000b10 <readAccel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffb4 	bl	8000b84 <convert>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	71bb      	strb	r3, [r7, #6]
USBD_CUSTOM_HID_SendReport_FS(dato,3);
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2103      	movs	r1, #3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 fdae 	bl	8009788 <USBD_CUSTOM_HID_SendReport_FS>
 HAL_Delay(10);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f000 fe75 	bl	800191c <HAL_Delay>
{// leemos eje x
 8000c32:	e7e2      	b.n	8000bfa <main+0x3e>

08000c34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 fb18 	bl	800a278 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5a:	f003 fa4b 	bl	80040f4 <HAL_PWREx_ControlVoltageScaling>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x34>
	Error_Handler();
 8000c64:	f000 fb34 	bl	80012d0 <Error_Handler>
}

/** Configure LSE Drive Capability
 */
HAL_PWR_EnableBkUpAccess();
 8000c68:	f003 fa26 	bl	80040b8 <HAL_PWR_EnableBkUpAccess>
__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <SystemClock_Config+0xc0>)
 8000c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <SystemClock_Config+0xc0>)
 8000c74:	f023 0318 	bic.w	r3, r3, #24
 8000c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000c7c:	2314      	movs	r3, #20
 8000c7e:	617b      	str	r3, [r7, #20]
		| RCC_OSCILLATORTYPE_MSI;
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c8c:	2360      	movs	r3, #96	; 0x60
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLM = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLN = 40;
 8000c9c:	2328      	movs	r3, #40	; 0x28
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	657b      	str	r3, [r7, #84]	; 0x54
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fb41 	bl	8004338 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x8c>
	Error_Handler();
 8000cbc:	f000 fb08 	bl	80012d0 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	607b      	str	r3, [r7, #4]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 ff09 	bl	8004af0 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xb4>
	Error_Handler();
 8000ce4:	f000 faf4 	bl	80012d0 <Error_Handler>
}

/** Enable MSI Auto calibration
 */
HAL_RCCEx_EnableMSIPLLMode();
 8000ce8:	f004 fc10 	bl	800550c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	; 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
/* USER CODE END DFSDM1_Init 0 */

/* USER CODE BEGIN DFSDM1_Init 1 */

/* USER CODE END DFSDM1_Init 1 */
hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <MX_DFSDM1_Init+0x6c>)
 8000d00:	601a      	str	r2, [r3, #0]
hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	711a      	strb	r2, [r3, #4]
hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	60da      	str	r2, [r3, #12]
hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d26:	619a      	str	r2, [r3, #24]
hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	621a      	str	r2, [r3, #32]
		DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
hdfsdm1_channel1.Init.Offset = 0;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_DFSDM1_Init+0x68>)
 8000d4e:	f000 ff1b 	bl	8001b88 <HAL_DFSDM_ChannelInit>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_DFSDM1_Init+0x64>
	Error_Handler();
 8000d58:	f000 faba 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN DFSDM1_Init 2 */

/* USER CODE END DFSDM1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000148 	.word	0x20000148
 8000d64:	40016020 	.word	0x40016020

08000d68 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
/* USER CODE END I2C2_Init 0 */

/* USER CODE BEGIN I2C2_Init 1 */

/* USER CODE END I2C2_Init 1 */
hi2c2.Instance = I2C2;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_I2C2_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
hi2c2.Init.Timing = 0x00000E14;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d74:	f640 6214 	movw	r2, #3604	; 0xe14
 8000d78:	605a      	str	r2, [r3, #4]
hi2c2.Init.OwnAddress1 = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	60da      	str	r2, [r3, #12]
hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
hi2c2.Init.OwnAddress2 = 0;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000da6:	f001 f9e0 	bl	800216a <HAL_I2C_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C2_Init+0x4c>
	Error_Handler();
 8000db0:	f000 fa8e 	bl	80012d0 <Error_Handler>
}

/** Configure Analogue filter
 */
if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000db4:	2100      	movs	r1, #0
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000db8:	f001 ff58 	bl	8002c6c <HAL_I2CEx_ConfigAnalogFilter>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C2_Init+0x5e>
	Error_Handler();
 8000dc2:	f000 fa85 	bl	80012d0 <Error_Handler>
}

/** Configure Digital filter
 */
if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_I2C2_Init+0x74>)
 8000dca:	f001 ff9a 	bl	8002d02 <HAL_I2CEx_ConfigDigitalFilter>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C2_Init+0x70>
	Error_Handler();
 8000dd4:	f000 fa7c 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN I2C2_Init 2 */

/* USER CODE END I2C2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000180 	.word	0x20000180
 8000de0:	40005800 	.word	0x40005800

08000de4 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

/* USER CODE BEGIN QUADSPI_Init 1 */

/* USER CODE END QUADSPI_Init 1 */
/* QUADSPI parameter configuration*/
hqspi.Instance = QUADSPI;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <MX_QUADSPI_Init+0x48>)
 8000dec:	601a      	str	r2, [r3, #0]
hqspi.Init.ClockPrescaler = 2;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	605a      	str	r2, [r3, #4]
hqspi.Init.FifoThreshold = 4;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	609a      	str	r2, [r3, #8]
hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	60da      	str	r2, [r3, #12]
hqspi.Init.FlashSize = 23;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000e02:	2217      	movs	r2, #23
 8000e04:	611a      	str	r2, [r3, #16]
hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_QUADSPI_Init+0x44>)
 8000e14:	f003 f9d4 	bl	80041c0 <HAL_QSPI_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_QUADSPI_Init+0x3e>
	Error_Handler();
 8000e1e:	f000 fa57 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN QUADSPI_Init 2 */

/* USER CODE END QUADSPI_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001d4 	.word	0x200001d4
 8000e2c:	a0001000 	.word	0xa0001000

08000e30 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI3_Init 1 */

/* USER CODE END SPI3_Init 1 */
/* SPI3 parameter configuration*/
hspi3.Instance = SPI3;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_SPI3_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e4e:	60da      	str	r2, [r3, #12]
hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	619a      	str	r2, [r3, #24]
hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
hspi3.Init.CRCPolynomial = 7;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e7e:	2207      	movs	r2, #7
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_SPI3_Init+0x74>)
 8000e90:	f004 fd1e 	bl	80058d0 <HAL_SPI_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_SPI3_Init+0x6e>
	Error_Handler();
 8000e9a:	f000 fa19 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN SPI3_Init 2 */

/* USER CODE END SPI3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000218 	.word	0x20000218
 8000ea8:	40003c00 	.word	0x40003c00

08000eac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
/* USER CODE END USART1_Init 0 */

/* USER CODE BEGIN USART1_Init 1 */

/* USER CODE END USART1_Init 1 */
huart1.Instance = USART1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART1_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ef0:	f004 fd91 	bl	8005a16 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART1_UART_Init+0x52>
	Error_Handler();
 8000efa:	f000 f9e9 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN USART1_Init 2 */

/* USER CODE END USART1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000027c 	.word	0x2000027c
 8000f08:	40013800 	.word	0x40013800

08000f0c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
/* USER CODE END USART3_Init 0 */

/* USER CODE BEGIN USART3_Init 1 */

/* USER CODE END USART3_Init 1 */
huart3.Instance = USART3;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_USART3_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
huart3.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
huart3.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
huart3.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f50:	f004 fd61 	bl	8005a16 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x52>
	Error_Handler();
 8000f5a:	f000 f9b9 	bl	80012d0 <Error_Handler>
}
/* USER CODE BEGIN USART3_Init 2 */

/* USER CODE END USART3_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000304 	.word	0x20000304
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	4bbd      	ldr	r3, [pc, #756]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4abc      	ldr	r2, [pc, #752]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4bba      	ldr	r3, [pc, #744]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4bb7      	ldr	r3, [pc, #732]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4ab6      	ldr	r2, [pc, #728]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4bb4      	ldr	r3, [pc, #720]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4bb1      	ldr	r3, [pc, #708]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4ab0      	ldr	r2, [pc, #704]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4bae      	ldr	r3, [pc, #696]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4bab      	ldr	r3, [pc, #684]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4aaa      	ldr	r2, [pc, #680]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4ba8      	ldr	r3, [pc, #672]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4ba5      	ldr	r3, [pc, #660]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4aa4      	ldr	r2, [pc, #656]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4ba2      	ldr	r3, [pc, #648]	; (8001278 <MX_GPIO_Init+0x30c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOE,
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001000:	489e      	ldr	r0, [pc, #632]	; (800127c <MX_GPIO_Init+0x310>)
 8001002:	f001 f877 	bl	80020f4 <HAL_GPIO_WritePin>
		M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8001006:	2200      	movs	r2, #0
 8001008:	f248 1104 	movw	r1, #33028	; 0x8104
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 f870 	bl	80020f4 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB,
 8001014:	2200      	movs	r2, #0
 8001016:	f24f 0114 	movw	r1, #61460	; 0xf014
 800101a:	4899      	ldr	r0, [pc, #612]	; (8001280 <MX_GPIO_Init+0x314>)
 800101c:	f001 f86a 	bl	80020f4 <HAL_GPIO_WritePin>
		ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
				| SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD,
 8001020:	2200      	movs	r2, #0
 8001022:	f241 0181 	movw	r1, #4225	; 0x1081
 8001026:	4897      	ldr	r0, [pc, #604]	; (8001284 <MX_GPIO_Init+0x318>)
 8001028:	f001 f864 	bl	80020f4 <HAL_GPIO_WritePin>
		USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4894      	ldr	r0, [pc, #592]	; (8001284 <MX_GPIO_Init+0x318>)
 8001034:	f001 f85e 	bl	80020f4 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800103e:	4892      	ldr	r0, [pc, #584]	; (8001288 <MX_GPIO_Init+0x31c>)
 8001040:	f001 f858 	bl	80020f4 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	488d      	ldr	r0, [pc, #564]	; (8001280 <MX_GPIO_Init+0x314>)
 800104a:	f001 f853 	bl	80020f4 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 800104e:	2201      	movs	r2, #1
 8001050:	2101      	movs	r1, #1
 8001052:	488a      	ldr	r0, [pc, #552]	; (800127c <MX_GPIO_Init+0x310>)
 8001054:	f001 f84e 	bl	80020f4 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 8001058:	f240 1315 	movw	r3, #277	; 0x115
 800105c:	617b      	str	r3, [r7, #20]
		| ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4882      	ldr	r0, [pc, #520]	; (800127c <MX_GPIO_Init+0x310>)
 8001072:	f000 fe95 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin
 8001076:	236a      	movs	r3, #106	; 0x6a
 8001078:	617b      	str	r3, [r7, #20]
		| SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	487c      	ldr	r0, [pc, #496]	; (800127c <MX_GPIO_Init+0x310>)
 800108c:	f000 fe88 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : BUTTON_EXTI13_Pin */
GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001096:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800109a:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4878      	ldr	r0, [pc, #480]	; (8001288 <MX_GPIO_Init+0x31c>)
 80010a8:	f000 fe7a 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
 ARD_A1_Pin ARD_A0_Pin */
GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 80010ac:	233f      	movs	r3, #63	; 0x3f
 80010ae:	617b      	str	r3, [r7, #20]
		| ARD_A1_Pin | ARD_A0_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b0:	230b      	movs	r3, #11
 80010b2:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4872      	ldr	r0, [pc, #456]	; (8001288 <MX_GPIO_Init+0x31c>)
 80010c0:	f000 fe6e 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 80010c4:	2303      	movs	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010d4:	2308      	movs	r3, #8
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f000 fe5d 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80010e6:	f248 1304 	movw	r3, #33028	; 0x8104
 80010ea:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f000 fe4d 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D4_Pin */
GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001106:	2308      	movs	r3, #8
 8001108:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001116:	2301      	movs	r3, #1
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fe3c 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D7_Pin */
GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001128:	2310      	movs	r3, #16
 800112a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800112c:	230b      	movs	r3, #11
 800112e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f000 fe2f 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fe1e 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D3_Pin */
GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001168:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4841      	ldr	r0, [pc, #260]	; (8001280 <MX_GPIO_Init+0x314>)
 800117a:	f000 fe11 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D6_Pin */
GPIO_InitStruct.Pin = ARD_D6_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001182:	230b      	movs	r3, #11
 8001184:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	483b      	ldr	r0, [pc, #236]	; (8001280 <MX_GPIO_Init+0x314>)
 8001192:	f000 fe05 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 8001196:	f24f 0334 	movw	r3, #61492	; 0xf034
 800119a:	617b      	str	r3, [r7, #20]
		| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4834      	ldr	r0, [pc, #208]	; (8001280 <MX_GPIO_Init+0x314>)
 80011b0:	f000 fdf6 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
 PMOD_IRQ_EXTI12_Pin */
GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 80011b4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011b8:	617b      	str	r3, [r7, #20]
		| ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011be:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	482e      	ldr	r0, [pc, #184]	; (8001284 <MX_GPIO_Init+0x318>)
 80011cc:	f000 fde8 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 80011d0:	f243 0381 	movw	r3, #12417	; 0x3081
 80011d4:	617b      	str	r3, [r7, #20]
		| PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	; (8001284 <MX_GPIO_Init+0x318>)
 80011ea:	f000 fdd9 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80011ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011f2:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4820      	ldr	r0, [pc, #128]	; (8001288 <MX_GPIO_Init+0x31c>)
 8001208:	f000 fdca 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 800120c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001210:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001216:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4819      	ldr	r0, [pc, #100]	; (8001288 <MX_GPIO_Init+0x31c>)
 8001224:	f000 fdbc 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001238:	2305      	movs	r3, #5
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <MX_GPIO_Init+0x318>)
 8001244:	f000 fdac 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin
 8001248:	2378      	movs	r3, #120	; 0x78
 800124a:	617b      	str	r3, [r7, #20]
		| PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001258:	2307      	movs	r3, #7
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <MX_GPIO_Init+0x318>)
 8001264:	f000 fd9c 	bl	8001da0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8001268:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126c:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	e00a      	b.n	800128c <MX_GPIO_Init+0x320>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	48001000 	.word	0x48001000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000c00 	.word	0x48000c00
 8001288:	48000800 	.word	0x48000800
 800128c:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001292:	2304      	movs	r3, #4
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_GPIO_Init+0x360>)
 800129e:	f000 fd7f 	bl	8001da0 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2017      	movs	r0, #23
 80012a8:	f000 fc37 	bl	8001b1a <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ac:	2017      	movs	r0, #23
 80012ae:	f000 fc50 	bl	8001b52 <HAL_NVIC_EnableIRQ>

HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	f000 fc2f 	bl	8001b1a <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012bc:	2028      	movs	r0, #40	; 0x28
 80012be:	f000 fc48 	bl	8001b52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	48000400 	.word	0x48000400

080012d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x44>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_MspInit+0x44>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_MspInit+0x44>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_MspInit+0x44>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	; 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2288      	movs	r2, #136	; 0x88
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f008 ff97 	bl	800a278 <memset>
  if(DFSDM1_Init == 0)
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d142      	bne.n	80013d8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001356:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fde8 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800136e:	f7ff ffaf 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80013a2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013bc:	2306      	movs	r3, #6
 80013be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013ca:	f000 fce9 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a02      	ldr	r2, [pc, #8]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013d6:	6013      	str	r3, [r2, #0]
  }

}
 80013d8:	bf00      	nop
 80013da:	37b0      	adds	r7, #176	; 0xb0
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000038c 	.word	0x2000038c
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48001000 	.word	0x48001000

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	; 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2288      	movs	r2, #136	; 0x88
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f008 ff33 	bl	800a278 <memset>
  if(hi2c->Instance==I2C2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_I2C_MspInit+0xb0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13b      	bne.n	8001494 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fd85 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff ff4c 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001450:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800146a:	2304      	movs	r3, #4
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001474:	4619      	mov	r1, r3
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <HAL_I2C_MspInit+0xb8>)
 8001478:	f000 fc92 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 8001482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001486:	6593      	str	r3, [r2, #88]	; 0x58
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_I2C_MspInit+0xb4>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	37b0      	adds	r7, #176	; 0xb0
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005800 	.word	0x40005800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400

080014a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_QSPI_MspInit+0x7c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d128      	bne.n	800151c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6513      	str	r3, [r2, #80]	; 0x50
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_QSPI_MspInit+0x80>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014fa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014fe:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800150c:	230a      	movs	r3, #10
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_QSPI_MspInit+0x84>)
 8001518:	f000 fc42 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	a0001000 	.word	0xa0001000
 8001528:	40021000 	.word	0x40021000
 800152c:	48001000 	.word	0x48001000

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_SPI_MspInit+0x7c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d128      	bne.n	80015a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 8001558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001582:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001594:	2306      	movs	r3, #6
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 80015a0:	f000 fbfe 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40003c00 	.word	0x40003c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000800 	.word	0x48000800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ae      	sub	sp, #184	; 0xb8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2288      	movs	r2, #136	; 0x88
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f008 fe4d 	bl	800a278 <memset>
  if(huart->Instance==USART1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a42      	ldr	r2, [pc, #264]	; (80016ec <HAL_UART_MspInit+0x134>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d13b      	bne.n	8001660 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015ec:	2300      	movs	r3, #0
 80015ee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fc9f 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001600:	f7ff fe66 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_UART_MspInit+0x138>)
 8001606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001608:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <HAL_UART_MspInit+0x138>)
 800160a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160e:	6613      	str	r3, [r2, #96]	; 0x60
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_UART_MspInit+0x138>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_UART_MspInit+0x138>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_UART_MspInit+0x138>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_UART_MspInit+0x138>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001634:	23c0      	movs	r3, #192	; 0xc0
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164c:	2307      	movs	r3, #7
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001656:	4619      	mov	r1, r3
 8001658:	4826      	ldr	r0, [pc, #152]	; (80016f4 <HAL_UART_MspInit+0x13c>)
 800165a:	f000 fba1 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800165e:	e040      	b.n	80016e2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_UART_MspInit+0x140>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d13b      	bne.n	80016e2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800166a:	2304      	movs	r3, #4
 800166c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800166e:	2300      	movs	r3, #0
 8001670:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fc5e 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001682:	f7ff fe25 	bl	80012d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_UART_MspInit+0x138>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x138>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0x138>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_UART_MspInit+0x138>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <HAL_UART_MspInit+0x138>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_UART_MspInit+0x138>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <HAL_UART_MspInit+0x144>)
 80016de:	f000 fb5f 	bl	8001da0 <HAL_GPIO_Init>
}
 80016e2:	bf00      	nop
 80016e4:	37b8      	adds	r7, #184	; 0xb8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	40004800 	.word	0x40004800
 80016fc:	48000c00 	.word	0x48000c00

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f8c6 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001758:	2020      	movs	r0, #32
 800175a:	f000 fce3 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800175e:	2040      	movs	r0, #64	; 0x40
 8001760:	f000 fce0 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001764:	2080      	movs	r0, #128	; 0x80
 8001766:	f000 fcdd 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800176a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800176e:	f000 fcd9 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800177a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800177e:	f000 fcd1 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001782:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001786:	f000 fccd 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800178a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800178e:	f000 fcc9 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001792:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001796:	f000 fcc5 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800179a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800179e:	f000 fcc1 	bl	8002124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <OTG_FS_IRQHandler+0x10>)
 80017ae:	f001 fc47 	bl	8003040 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000898 	.word	0x20000898

080017bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff ffea 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f008 fd3b 	bl	800a288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff f9d3 	bl	8000bbc <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001818:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001824:	0800a3a0 	.word	0x0800a3a0
  ldr r2, =_sbss
 8001828:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 800182c:	20000dc0 	.word	0x20000dc0

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>

08001832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f961 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f80e 	bl	8001864 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001854:	f7ff fd42 	bl	80012dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001858:	79fb      	ldrb	r3, [r7, #7]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_InitTick+0x6c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_InitTick+0x70>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f96d 	bl	8001b6e <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d809      	bhi.n	80018b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f937 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_InitTick+0x74>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e007      	b.n	80018c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e004      	b.n	80018c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e001      	b.n	80018c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000390 	.word	0x20000390

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000390 	.word	0x20000390

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0ac      	b.n	8001cf4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f8b2 	bl	8001d08 <DFSDM_GetChannelFromInstance>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_DFSDM_ChannelInit+0x174>)
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e09f      	b.n	8001cf4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fbb5 	bl	8001324 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_DFSDM_ChannelInit+0x178>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_DFSDM_ChannelInit+0x178>)
 8001bc2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001bc4:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <HAL_DFSDM_ChannelInit+0x178>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d125      	bne.n	8001c18 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001bcc:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bd6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001bd8:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4948      	ldr	r1, [pc, #288]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a46      	ldr	r2, [pc, #280]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001bf0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001bfa:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	493f      	ldr	r1, [pc, #252]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c16:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001c26:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c36:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c3c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020f 	bic.w	r2, r2, #15
 8001c54:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001c7c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 0207 	and.w	r2, r2, #7
 8001ca8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f810 	bl	8001d08 <DFSDM_GetChannelFromInstance>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4904      	ldr	r1, [pc, #16]	; (8001cfc <HAL_DFSDM_ChannelInit+0x174>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000398 	.word	0x20000398
 8001d00:	20000394 	.word	0x20000394
 8001d04:	40016000 	.word	0x40016000

08001d08 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d102      	bne.n	8001d1e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e02b      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <DFSDM_GetChannelFromInstance+0x80>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d102      	bne.n	8001d2c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e024      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <DFSDM_GetChannelFromInstance+0x84>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d102      	bne.n	8001d3a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d34:	2302      	movs	r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e01d      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <DFSDM_GetChannelFromInstance+0x88>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d102      	bne.n	8001d48 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001d42:	2304      	movs	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e016      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <DFSDM_GetChannelFromInstance+0x8c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001d50:	2305      	movs	r3, #5
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e00f      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <DFSDM_GetChannelFromInstance+0x90>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d102      	bne.n	8001d64 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e008      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <DFSDM_GetChannelFromInstance+0x94>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e001      	b.n	8001d76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d72:	2303      	movs	r3, #3
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40016000 	.word	0x40016000
 8001d88:	40016020 	.word	0x40016020
 8001d8c:	40016040 	.word	0x40016040
 8001d90:	40016080 	.word	0x40016080
 8001d94:	400160a0 	.word	0x400160a0
 8001d98:	400160c0 	.word	0x400160c0
 8001d9c:	400160e0 	.word	0x400160e0

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e17f      	b.n	80020b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8171 	beq.w	80020aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d005      	beq.n	8001de0 <HAL_GPIO_Init+0x40>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d130      	bne.n	8001e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e16:	2201      	movs	r2, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f003 0201 	and.w	r2, r3, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d118      	bne.n	8001e80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	6939      	ldr	r1, [r7, #16]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80ac 	beq.w	80020aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_GPIO_Init+0x330>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_GPIO_Init+0x330>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_GPIO_Init+0x330>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_GPIO_Init+0x334>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f94:	d025      	beq.n	8001fe2 <HAL_GPIO_Init+0x242>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_GPIO_Init+0x338>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <HAL_GPIO_Init+0x33c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x23a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <HAL_GPIO_Init+0x340>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x236>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <HAL_GPIO_Init+0x344>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x232>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_GPIO_Init+0x348>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x22e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_GPIO_Init+0x34c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x22a>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e00c      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00a      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x244>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ff4:	4937      	ldr	r1, [pc, #220]	; (80020d4 <HAL_GPIO_Init+0x334>)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002026:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_GPIO_Init+0x350>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_GPIO_Init+0x350>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_GPIO_Init+0x350>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f ae78 	bne.w	8001db0 <HAL_GPIO_Init+0x10>
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	48000400 	.word	0x48000400
 80020dc:	48000800 	.word	0x48000800
 80020e0:	48000c00 	.word	0x48000c00
 80020e4:	48001000 	.word	0x48001000
 80020e8:	48001400 	.word	0x48001400
 80020ec:	48001800 	.word	0x48001800
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002110:	e002      	b.n	8002118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f806 	bl	8002154 <HAL_GPIO_EXTI_Callback>
  }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40010400 	.word	0x40010400

08002154 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e08d      	b.n	8002298 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff f92b 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2224      	movs	r2, #36	; 0x24
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d108      	bne.n	800220c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e007      	b.n	800221c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69d9      	ldr	r1, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	460b      	mov	r3, r1
 80022b4:	813b      	strh	r3, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 80f9 	bne.w	80024ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x34>
 80022ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ed      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_I2C_Mem_Write+0x4e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0e6      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f6:	f7ff fb05 	bl	8001904 <HAL_GetTick>
 80022fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2319      	movs	r3, #25
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fac3 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d1      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2221      	movs	r2, #33	; 0x21
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002340:	88f8      	ldrh	r0, [r7, #6]
 8002342:	893a      	ldrh	r2, [r7, #8]
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4603      	mov	r3, r0
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9d3 	bl	80026fc <I2C_RequestMemoryWrite>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0a9      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90e      	bls.n	8002390 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fc3d 	bl	8002c08 <I2C_TransferConfig>
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fc2c 	bl	8002c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fabc 	bl	8002932 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e07b      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d034      	beq.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d130      	bne.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa3f 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e04d      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d90e      	bls.n	8002448 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbe1 	bl	8002c08 <I2C_TransferConfig>
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fbd0 	bl	8002c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d19e      	bne.n	80023b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 faa2 	bl	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e01a      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_I2C_Mem_Write+0x224>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 80fd 	bne.w	80026ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_I2C_Mem_Read+0x34>
 80024f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0f1      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Mem_Read+0x4e>
 8002512:	2302      	movs	r3, #2
 8002514:	e0ea      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800251e:	f7ff f9f1 	bl	8001904 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f9af 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d5      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2222      	movs	r2, #34	; 0x22
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a3a      	ldr	r2, [r7, #32]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002568:	88f8      	ldrh	r0, [r7, #6]
 800256a:	893a      	ldrh	r2, [r7, #8]
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4603      	mov	r3, r0
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f913 	bl	80027a4 <I2C_RequestMemoryRead>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0ad      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d90e      	bls.n	80025b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_I2C_Mem_Read+0x22c>)
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fb29 	bl	8002c08 <I2C_TransferConfig>
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_I2C_Mem_Read+0x22c>)
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb18 	bl	8002c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	2200      	movs	r2, #0
 80025e0:	2104      	movs	r1, #4
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f956 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07c      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d034      	beq.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d130      	bne.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f927 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04d      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	2bff      	cmp	r3, #255	; 0xff
 8002658:	d90e      	bls.n	8002678 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fac9 	bl	8002c08 <I2C_TransferConfig>
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	b2da      	uxtb	r2, r3
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fab8 	bl	8002c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d19a      	bne.n	80025d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f98a 	bl	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01a      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2220      	movs	r2, #32
 80026bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_I2C_Mem_Read+0x230>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	80002400 	.word	0x80002400
 80026f8:	fe00e800 	.word	0xfe00e800

080026fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	460b      	mov	r3, r1
 8002710:	813b      	strh	r3, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <I2C_RequestMemoryWrite+0xa4>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa6f 	bl	8002c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8ff 	bl	8002932 <I2C_WaitOnTXISFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02c      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
 800274e:	e015      	b.n	800277c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8e5 	bl	8002932 <I2C_WaitOnTXISFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e012      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2200      	movs	r2, #0
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f884 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	80002000 	.word	0x80002000

080027a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	8979      	ldrh	r1, [r7, #10]
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <I2C_RequestMemoryRead+0xa4>)
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa1c 	bl	8002c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f8ac 	bl	8002932 <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e02c      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d105      	bne.n	80027f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e015      	b.n	8002822 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f892 	bl	8002932 <I2C_WaitOnTXISFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e012      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002818:	893b      	ldrh	r3, [r7, #8]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2200      	movs	r2, #0
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f831 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	80002000 	.word	0x80002000

0800284c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d007      	beq.n	8002888 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	619a      	str	r2, [r3, #24]
  }
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e031      	b.n	800290a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d02d      	beq.n	800290a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff f829 	bl	8001904 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d122      	bne.n	800290a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d113      	bne.n	800290a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d0be      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800293e:	e033      	b.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f87f 	bl	8002a48 <I2C_IsErrorOccurred>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e031      	b.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d025      	beq.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295c:	f7fe ffd2 	bl	8001904 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	d302      	bcc.n	8002972 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11a      	bne.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d013      	beq.n	80029a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d1c4      	bne.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029cc:	e02f      	b.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f838 	bl	8002a48 <I2C_IsErrorOccurred>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e02d      	b.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe ff8f 	bl	8001904 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11a      	bne.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d013      	beq.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e007      	b.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d1c8      	bne.n	80029ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d068      	beq.n	8002b46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7c:	e049      	b.n	8002b12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d045      	beq.n	8002b12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe ff3d 	bl	8001904 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_IsErrorOccurred+0x54>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13a      	bne.n	8002b12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	d121      	bne.n	8002b04 <I2C_IsErrorOccurred+0xbc>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac6:	d01d      	beq.n	8002b04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d01a      	beq.n	8002b04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002adc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ade:	f7fe ff11 	bl	8001904 <HAL_GetTick>
 8002ae2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e00e      	b.n	8002b04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ae6:	f7fe ff0d 	bl	8001904 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b19      	cmp	r3, #25
 8002af2:	d907      	bls.n	8002b04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b02:	e006      	b.n	8002b12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d1e9      	bne.n	8002ae6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d003      	beq.n	8002b28 <I2C_IsErrorOccurred+0xe0>
 8002b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0aa      	beq.n	8002a7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01c      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fe45 	bl	800284c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <I2C_IsErrorOccurred+0x1bc>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3728      	adds	r7, #40	; 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	fe00e800 	.word	0xfe00e800

08002c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	4613      	mov	r3, r2
 8002c18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c20:	7a7b      	ldrb	r3, [r7, #9]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <I2C_TransferConfig+0x60>)
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	ea02 0103 	and.w	r1, r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	03ff63ff 	.word	0x03ff63ff

08002c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d138      	bne.n	8002cf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e032      	b.n	8002cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d139      	bne.n	8002d8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e033      	b.n	8002d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2224      	movs	r2, #36	; 0x24
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e000      	b.n	8002d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9c:	b08f      	sub	sp, #60	; 0x3c
 8002d9e:	af0a      	add	r7, sp, #40	; 0x28
 8002da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e116      	b.n	8002fda <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f006 fe14 	bl	80099f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fc09 	bl	8006602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	687e      	ldr	r6, [r7, #4]
 8002df8:	466d      	mov	r5, sp
 8002dfa:	f106 0410 	add.w	r4, r6, #16
 8002dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e0e:	1d33      	adds	r3, r6, #4
 8002e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e12:	6838      	ldr	r0, [r7, #0]
 8002e14:	f003 fb1b 	bl	800644e <USB_CoreInit>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0d7      	b.n	8002fda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fbf7 	bl	8006624 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e04a      	b.n	8002ed2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	333d      	adds	r3, #61	; 0x3d
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333c      	adds	r3, #60	; 0x3c
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	b298      	uxth	r0, r3
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3356      	adds	r3, #86	; 0x56
 8002e78:	4602      	mov	r2, r0
 8002e7a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3340      	adds	r3, #64	; 0x40
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3344      	adds	r3, #68	; 0x44
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3348      	adds	r3, #72	; 0x48
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	; 0x4c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3af      	bcc.n	8002e3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e044      	b.n	8002f6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d3b5      	bcc.n	8002ee2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	687e      	ldr	r6, [r7, #4]
 8002f7e:	466d      	mov	r5, sp
 8002f80:	f106 0410 	add.w	r4, r6, #16
 8002f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f94:	1d33      	adds	r3, r6, #4
 8002f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f98:	6838      	ldr	r0, [r7, #0]
 8002f9a:	f003 fb8f 	bl	80066bc <USB_DevInit>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e014      	b.n	8002fda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f001 f851 	bl	8004070 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb3d 	bl	8007652 <USB_DevDisconnect>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_Start+0x1c>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e01c      	b.n	8003038 <HAL_PCD_Start+0x56>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fade 	bl	80065e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f004 faf1 	bl	8007610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b08d      	sub	sp, #52	; 0x34
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f004 fbaf 	bl	80077ba <USB_GetMode>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 847e 	bne.w	8003960 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fb13 	bl	8007694 <USB_ReadInterrupts>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8474 	beq.w	800395e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fb00 	bl	8007694 <USB_ReadInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d107      	bne.n	80030ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f002 0202 	and.w	r2, r2, #2
 80030ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 faee 	bl	8007694 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d161      	bne.n	8003186 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0210 	bic.w	r2, r2, #16
 80030d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	0c5b      	lsrs	r3, r3, #17
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d124      	bne.n	8003148 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d035      	beq.n	8003176 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6a38      	ldr	r0, [r7, #32]
 800311e:	f004 f925 	bl	800736c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312e:	441a      	add	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	441a      	add	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	615a      	str	r2, [r3, #20]
 8003146:	e016      	b.n	8003176 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	0c5b      	lsrs	r3, r3, #17
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	2b06      	cmp	r3, #6
 8003152:	d110      	bne.n	8003176 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315a:	2208      	movs	r2, #8
 800315c:	4619      	mov	r1, r3
 800315e:	6a38      	ldr	r0, [r7, #32]
 8003160:	f004 f904 	bl	800736c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003170:	441a      	add	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0210 	orr.w	r2, r2, #16
 8003184:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fa82 	bl	8007694 <USB_ReadInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800319a:	f040 80a7 	bne.w	80032ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fa87 	bl	80076ba <USB_ReadDevAllOutEpInterrupt>
 80031ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031ae:	e099      	b.n	80032e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 808e 	beq.w	80032d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 faab 	bl	8007722 <USB_ReadDevOutEPInterrupt>
 80031cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fe65 	bl	8003ebc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	2308      	movs	r3, #8
 800320c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800320e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fea1 	bl	8003f58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2310      	movs	r3, #16
 8003230:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d030      	beq.n	800329e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d109      	bne.n	800325c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	78db      	ldrb	r3, [r3, #3]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f006 fd1a 	bl	8009cc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2302      	movs	r3, #2
 800329c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	2320      	movs	r3, #32
 80032b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	461a      	mov	r2, r3
 80032d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3301      	adds	r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f47f af62 	bne.w	80031b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 f9cf 	bl	8007694 <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003300:	f040 80a4 	bne.w	800344c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 f9f0 	bl	80076ee <USB_ReadDevAllInEpInterrupt>
 800330e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003314:	e096      	b.n	8003444 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 808b 	beq.w	8003438 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fa16 	bl	800775e <USB_ReadDevInEPInterrupt>
 8003332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2201      	movs	r2, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	69f9      	ldr	r1, [r7, #28]
 800335a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335e:	4013      	ands	r3, r2
 8003360:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	461a      	mov	r2, r3
 8003370:	2301      	movs	r3, #1
 8003372:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f006 fc0b 	bl	8009b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	461a      	mov	r2, r3
 8003398:	2308      	movs	r3, #8
 800339a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	461a      	mov	r2, r3
 80033b4:	2310      	movs	r3, #16
 80033b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	2340      	movs	r3, #64	; 0x40
 80033d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e0:	6a38      	ldr	r0, [r7, #32]
 80033e2:	f003 faad 	bl	8006940 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	3338      	adds	r3, #56	; 0x38
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f006 fc68 	bl	8009ce4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	2302      	movs	r3, #2
 8003424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fcba 	bl	8003dac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	3301      	adds	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	f47f af65 	bne.w	8003316 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f004 f91f 	bl	8007694 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003460:	d122      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f006 fe88 	bl	800a1a0 <HAL_PCDEx_LPM_Callback>
 8003490:	e002      	b.n	8003498 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fbec 	bl	8009c70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 f8f1 	bl	8007694 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034bc:	d112      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 fba8 	bl	8009c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f8d3 	bl	8007694 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d121      	bne.n	800353e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003508:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d111      	bne.n	8003538 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800352e:	2101      	movs	r1, #1
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f006 fe35 	bl	800a1a0 <HAL_PCDEx_LPM_Callback>
 8003536:	e002      	b.n	800353e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f006 fb73 	bl	8009c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 f8a6 	bl	8007694 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	f040 80b5 	bne.w	80036c0 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2110      	movs	r1, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f003 f9e5 	bl	8006940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	e046      	b.n	800360a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003588:	461a      	mov	r2, r3
 800358a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800358e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003602:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	3301      	adds	r3, #1
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	429a      	cmp	r2, r3
 8003612:	d3b3      	bcc.n	800357c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003622:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003626:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003640:	f043 030b 	orr.w	r3, r3, #11
 8003644:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f043 030b 	orr.w	r3, r3, #11
 800365a:	6453      	str	r3, [r2, #68]	; 0x44
 800365c:	e015      	b.n	800368a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003670:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003674:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003684:	f043 030b 	orr.w	r3, r3, #11
 8003688:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800369c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f004 f8b6 	bl	800781c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 ffe5 	bl	8007694 <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d124      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 f87b 	bl	80077d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 f9a8 	bl	8006a3a <USB_GetDevSpeed>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	f001 fb87 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 80036fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f002 fecf 	bl	80064a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f006 fa6b 	bl	8009be6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f003 ffb5 	bl	8007694 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10a      	bne.n	800374a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f006 fa48 	bl	8009bca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 0208 	and.w	r2, r2, #8
 8003748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f003 ffa0 	bl	8007694 <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d122      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	e014      	b.n	800379a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	b2db      	uxtb	r3, r3
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fadb 	bl	8003d4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	3301      	adds	r3, #1
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3e5      	bcc.n	8003770 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 ff73 	bl	8007694 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b8:	d13b      	bne.n	8003832 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e02b      	b.n	8003818 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3340      	adds	r3, #64	; 0x40
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d115      	bne.n	8003812 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da12      	bge.n	8003812 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	333f      	adds	r3, #63	; 0x3f
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa9c 	bl	8003d4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3301      	adds	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d3ce      	bcc.n	80037c0 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 ff2c 	bl	8007694 <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003846:	d155      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003848:	2301      	movs	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	e045      	b.n	80038da <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d12e      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003876:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	da2b      	bge.n	80038d4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003888:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800388c:	429a      	cmp	r2, r3
 800388e:	d121      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d0:	6053      	str	r3, [r2, #4]
            break;
 80038d2:	e007      	b.n	80038e4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3b4      	bcc.n	800384e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fecb 	bl	8007694 <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d10a      	bne.n	8003920 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f006 f9fc 	bl	8009d08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800391e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f003 feb5 	bl	8007694 <USB_ReadInterrupts>
 800392a:	4603      	mov	r3, r0
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d115      	bne.n	8003960 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f006 f9ec 	bl	8009d24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	e000      	b.n	8003960 <HAL_PCD_IRQHandler+0x920>
      return;
 800395e:	bf00      	nop
    }
  }
}
 8003960:	3734      	adds	r7, #52	; 0x34
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_SetAddress+0x1a>
 800397c:	2302      	movs	r3, #2
 800397e:	e013      	b.n	80039a8 <HAL_PCD_SetAddress+0x42>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fe13 	bl	80075c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	803b      	strh	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0f      	bge.n	80039f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3338      	adds	r3, #56	; 0x38
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00f      	b.n	8003a16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a22:	883a      	ldrh	r2, [r7, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	78ba      	ldrb	r2, [r7, #2]
 8003a2c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a40:	78bb      	ldrb	r3, [r7, #2]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d102      	bne.n	8003a4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_Open+0xaa>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_Open+0xc8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 f805 	bl	8006a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a76:	7afb      	ldrb	r3, [r7, #11]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	da0f      	bge.n	8003ab4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	3338      	adds	r3, #56	; 0x38
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	705a      	strb	r2, [r3, #1]
 8003ab2:	e00f      	b.n	8003ad4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_PCD_EP_Close+0x6e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e00e      	b.n	8003b0c <HAL_PCD_EP_Close+0x8c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 f843 	bl	8006b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	460b      	mov	r3, r1
 8003b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 f8e9 	bl	8006d40 <USB_EPStartXfer>

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	460b      	mov	r3, r1
 8003b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	7afb      	ldrb	r3, [r7, #11]
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3338      	adds	r3, #56	; 0x38
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 f8b8 	bl	8006d40 <USB_EPStartXfer>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e04e      	b.n	8003c96 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da0f      	bge.n	8003c20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	3338      	adds	r3, #56	; 0x38
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	705a      	strb	r2, [r3, #1]
 8003c1e:	e00d      	b.n	8003c3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_PCD_EP_SetStall+0x82>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e01c      	b.n	8003c96 <HAL_PCD_EP_SetStall+0xbc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68f9      	ldr	r1, [r7, #12]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fbd6 	bl	800741c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f003 fdc8 	bl	800781c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d901      	bls.n	8003cbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e042      	b.n	8003d42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	da0f      	bge.n	8003ce4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	3338      	adds	r3, #56	; 0x38
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	705a      	strb	r2, [r3, #1]
 8003ce2:	e00f      	b.n	8003d04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_PCD_EP_ClrStall+0x86>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e00e      	b.n	8003d42 <HAL_PCD_EP_ClrStall+0xa4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f003 fbe0 	bl	80074f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da0c      	bge.n	8003d78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	3338      	adds	r3, #56	; 0x38
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	3304      	adds	r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e00c      	b.n	8003d92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 fa03 	bl	80071a4 <USB_EPStopXfer>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003da2:	7afb      	ldrb	r3, [r7, #11]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	3338      	adds	r3, #56	; 0x38
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d901      	bls.n	8003de4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e067      	b.n	8003eb4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d902      	bls.n	8003e00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3303      	adds	r3, #3
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e08:	e026      	b.n	8003e58 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d902      	bls.n	8003e26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3303      	adds	r3, #3
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f003 fa5c 	bl	80072f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d809      	bhi.n	8003e82 <PCD_WriteEmptyTxFifo+0xd6>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d203      	bcs.n	8003e82 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1c3      	bne.n	8003e0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d811      	bhi.n	8003eb2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	2201      	movs	r2, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eae:	4013      	ands	r3, r2
 8003eb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	333c      	adds	r3, #60	; 0x3c
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <PCD_EP_OutXfrComplete_int+0x98>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d124      	bne.n	8003f3c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	6093      	str	r3, [r2, #8]
 8003f10:	e01a      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f005 fe13 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
 8003f3a:	e005      	b.n	8003f48 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f005 fe0c 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	4f54310a 	.word	0x4f54310a

08003f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	333c      	adds	r3, #60	; 0x3c
 8003f70:	3304      	adds	r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <PCD_EP_OutSetupPacket_int+0x64>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90e      	bls.n	8003fac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f005 fdc5 	bl	8009b3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	4f54300a 	.word	0x4f54300a

08003fc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fde:	883b      	ldrh	r3, [r7, #0]
 8003fe0:	0419      	lsls	r1, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
 8003fec:	e028      	b.n	8004040 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	e00d      	b.n	800401e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	3340      	adds	r3, #64	; 0x40
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4413      	add	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	3b01      	subs	r3, #1
 8004024:	429a      	cmp	r2, r3
 8004026:	d3ec      	bcc.n	8004002 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004028:	883b      	ldrh	r3, [r7, #0]
 800402a:	0418      	lsls	r0, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	3b01      	subs	r3, #1
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4302      	orrs	r2, r0
 8004038:	3340      	adds	r3, #64	; 0x40
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	f043 0303 	orr.w	r3, r3, #3
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000

080040d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004102:	d130      	bne.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d038      	beq.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2232      	movs	r2, #50	; 0x32
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0c9b      	lsrs	r3, r3, #18
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004138:	e002      	b.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b01      	subs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d102      	bne.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f2      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d110      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00f      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d007      	beq.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417c:	4a05      	ldr	r2, [pc, #20]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000
 8004198:	20000000 	.word	0x20000000
 800419c:	431bde83 	.word	0x431bde83

080041a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80041aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ae:	6053      	str	r3, [r2, #4]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40007000 	.word	0x40007000

080041c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7fd fb9c 	bl	8001904 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e063      	b.n	80042a0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fd f95b 	bl	80014a8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80041f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f858 	bl	80042ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	2120      	movs	r1, #32
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f850 	bl	80042c8 <QSPI_WaitFlagStateUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d131      	bne.n	8004296 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800423c:	f023 0310 	bic.w	r3, r3, #16
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6852      	ldr	r2, [r2, #4]
 8004244:	0611      	lsls	r1, r2, #24
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_QSPI_Init+0xe8>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	0411      	lsls	r1, r2, #16
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6952      	ldr	r2, [r2, #20]
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6992      	ldr	r2, [r2, #24]
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800429e:	7afb      	ldrb	r3, [r7, #11]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	ffe0f8fe 	.word	0xffe0f8fe

080042ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042d8:	e01a      	b.n	8004310 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d016      	beq.n	8004310 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fd fb0f 	bl	8001904 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2204      	movs	r2, #4
 80042fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e00e      	b.n	800432e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	429a      	cmp	r2, r3
 800432a:	d1d6      	bne.n	80042da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e3ca      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434a:	4b97      	ldr	r3, [pc, #604]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004354:	4b94      	ldr	r3, [pc, #592]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80e4 	beq.w	8004534 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_RCC_OscConfig+0x4a>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	f040 808b 	bne.w	8004490 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b01      	cmp	r3, #1
 800437e:	f040 8087 	bne.w	8004490 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004382:	4b89      	ldr	r3, [pc, #548]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCC_OscConfig+0x62>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e3a2      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_RCC_OscConfig+0x7c>
 80043aa:	4b7f      	ldr	r3, [pc, #508]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b2:	e005      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
 80043b4:	4b7c      	ldr	r3, [pc, #496]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d223      	bcs.n	800440c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fd55 	bl	8004e78 <RCC_SetFlashLatencyFromMSIRange>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e383      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d8:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a72      	ldr	r2, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043de:	f043 0308 	orr.w	r3, r3, #8
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	496d      	ldr	r1, [pc, #436]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4968      	ldr	r1, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
 800440a:	e025      	b.n	8004458 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004412:	f043 0308 	orr.w	r3, r3, #8
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4960      	ldr	r1, [pc, #384]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	495b      	ldr	r1, [pc, #364]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd15 	bl	8004e78 <RCC_SetFlashLatencyFromMSIRange>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e343      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004458:	f000 fc4a 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b52      	ldr	r3, [pc, #328]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	4950      	ldr	r1, [pc, #320]	; (80045ac <HAL_RCC_OscConfig+0x274>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	4a4e      	ldr	r2, [pc, #312]	; (80045b0 <HAL_RCC_OscConfig+0x278>)
 8004476:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004478:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCC_OscConfig+0x27c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd f9f1 	bl	8001864 <HAL_InitTick>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d052      	beq.n	8004532 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	e327      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d032      	beq.n	80044fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a4:	f7fd fa2e 	bl	8001904 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ac:	f7fd fa2a 	bl	8001904 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e310      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ca:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044d0:	f043 0308 	orr.w	r3, r3, #8
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4931      	ldr	r1, [pc, #196]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e8:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	492c      	ldr	r1, [pc, #176]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e01a      	b.n	8004534 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800450a:	f7fd f9fb 	bl	8001904 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004512:	f7fd f9f7 	bl	8001904 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e2dd      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x1da>
 8004530:	e000      	b.n	8004534 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004532:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d074      	beq.n	800462a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x21a>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d10e      	bne.n	800456a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d10b      	bne.n	800456a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d064      	beq.n	8004628 <HAL_RCC_OscConfig+0x2f0>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d160      	bne.n	8004628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e2ba      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x24a>
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e026      	b.n	80045d0 <HAL_RCC_OscConfig+0x298>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458a:	d115      	bne.n	80045b8 <HAL_RCC_OscConfig+0x280>
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 8004592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a02      	ldr	r2, [pc, #8]	; (80045a8 <HAL_RCC_OscConfig+0x270>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e014      	b.n	80045d0 <HAL_RCC_OscConfig+0x298>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	0800a348 	.word	0x0800a348
 80045b0:	20000000 	.word	0x20000000
 80045b4:	20000004 	.word	0x20000004
 80045b8:	4ba0      	ldr	r3, [pc, #640]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a9f      	ldr	r2, [pc, #636]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b9d      	ldr	r3, [pc, #628]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a9c      	ldr	r2, [pc, #624]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd f994 	bl	8001904 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fd f990 	bl	8001904 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e276      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	4b92      	ldr	r3, [pc, #584]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x2a8>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f980 	bl	8001904 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd f97c 	bl	8001904 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e262      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x2d0>
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d060      	beq.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x310>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d119      	bne.n	8004676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d116      	bne.n	8004676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004648:	4b7c      	ldr	r3, [pc, #496]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x328>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e23f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	4973      	ldr	r1, [pc, #460]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004674:	e040      	b.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d023      	beq.n	80046c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467e:	4b6f      	ldr	r3, [pc, #444]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6e      	ldr	r2, [pc, #440]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd f93b 	bl	8001904 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd f937 	bl	8001904 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e21d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	4b65      	ldr	r3, [pc, #404]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	495f      	ldr	r1, [pc, #380]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	e018      	b.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b5d      	ldr	r3, [pc, #372]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5c      	ldr	r2, [pc, #368]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd f917 	bl	8001904 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fd f913 	bl	8001904 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e1f9      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d03c      	beq.n	800477e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01c      	beq.n	8004746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470c:	4b4b      	ldr	r3, [pc, #300]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	4a4a      	ldr	r2, [pc, #296]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd f8f2 	bl	8001904 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd f8ee 	bl	8001904 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1d4      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <HAL_RCC_OscConfig+0x3ec>
 8004744:	e01b      	b.n	800477e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004746:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474c:	4a3b      	ldr	r2, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd f8d5 	bl	8001904 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475e:	f7fd f8d1 	bl	8001904 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1b7      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ef      	bne.n	800475e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80a6 	beq.w	80048d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	; 0x58
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x504>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b4:	2301      	movs	r3, #1
 80047b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_RCC_OscConfig+0x508>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d118      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCC_OscConfig+0x508>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_RCC_OscConfig+0x508>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d0:	f7fd f898 	bl	8001904 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fd f894 	bl	8001904 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e17a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x508>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d108      	bne.n	8004810 <HAL_RCC_OscConfig+0x4d8>
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800480e:	e029      	b.n	8004864 <HAL_RCC_OscConfig+0x52c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d115      	bne.n	8004844 <HAL_RCC_OscConfig+0x50c>
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCC_OscConfig+0x504>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	4a03      	ldr	r2, [pc, #12]	; (800483c <HAL_RCC_OscConfig+0x504>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004838:	e014      	b.n	8004864 <HAL_RCC_OscConfig+0x52c>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
 8004844:	4b9c      	ldr	r3, [pc, #624]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a9b      	ldr	r2, [pc, #620]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004854:	4b98      	ldr	r3, [pc, #608]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	4a97      	ldr	r2, [pc, #604]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd f84a 	bl	8001904 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd f846 	bl	8001904 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e12a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488a:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ed      	beq.n	8004874 <HAL_RCC_OscConfig+0x53c>
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fd f833 	bl	8001904 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fd f82f 	bl	8001904 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e113      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b8:	4b7f      	ldr	r3, [pc, #508]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ed      	bne.n	80048a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b7a      	ldr	r3, [pc, #488]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	4a79      	ldr	r2, [pc, #484]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80fe 	beq.w	8004ade <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	f040 80d0 	bne.w	8004a8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048ec:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0203 	and.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d130      	bne.n	8004962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	3b01      	subs	r3, #1
 800490c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d127      	bne.n	8004962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d11f      	bne.n	8004962 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800492c:	2a07      	cmp	r2, #7
 800492e:	bf14      	ite	ne
 8004930:	2201      	movne	r2, #1
 8004932:	2200      	moveq	r2, #0
 8004934:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004936:	4293      	cmp	r3, r2
 8004938:	d113      	bne.n	8004962 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	3b01      	subs	r3, #1
 8004948:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d109      	bne.n	8004962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d06e      	beq.n	8004a40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b0c      	cmp	r3, #12
 8004966:	d069      	beq.n	8004a3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004974:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0ad      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a4b      	ldr	r2, [pc, #300]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 800498a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800498e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004990:	f7fc ffb8 	bl	8001904 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc ffb4 	bl	8001904 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e09a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b6:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	4b40      	ldr	r3, [pc, #256]	; (8004abc <HAL_RCC_OscConfig+0x784>)
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049c6:	3a01      	subs	r2, #1
 80049c8:	0112      	lsls	r2, r2, #4
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d0:	0212      	lsls	r2, r2, #8
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049d8:	0852      	lsrs	r2, r2, #1
 80049da:	3a01      	subs	r2, #1
 80049dc:	0552      	lsls	r2, r2, #21
 80049de:	4311      	orrs	r1, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049e4:	0852      	lsrs	r2, r2, #1
 80049e6:	3a01      	subs	r2, #1
 80049e8:	0652      	lsls	r2, r2, #25
 80049ea:	4311      	orrs	r1, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f0:	0912      	lsrs	r2, r2, #4
 80049f2:	0452      	lsls	r2, r2, #17
 80049f4:	430a      	orrs	r2, r1
 80049f6:	4930      	ldr	r1, [pc, #192]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049fc:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a14:	f7fc ff76 	bl	8001904 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fc ff72 	bl	8001904 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e058      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a3a:	e050      	b.n	8004ade <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e04f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d148      	bne.n	8004ade <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a64:	f7fc ff4e 	bl	8001904 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fc ff4a 	bl	8001904 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e030      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x734>
 8004a8a:	e028      	b.n	8004ade <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d023      	beq.n	8004ada <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <HAL_RCC_OscConfig+0x780>)
 8004a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fc ff31 	bl	8001904 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa4:	e00c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fc ff2d 	bl	8001904 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d905      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e013      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_OscConfig+0x7b0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ec      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_OscConfig+0x7b0>)
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	4905      	ldr	r1, [pc, #20]	; (8004ae8 <HAL_RCC_OscConfig+0x7b0>)
 8004ad2:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_RCC_OscConfig+0x7b4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60cb      	str	r3, [r1, #12]
 8004ad8:	e001      	b.n	8004ade <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	feeefffc 	.word	0xfeeefffc

08004af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0e7      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d910      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 0207 	bic.w	r2, r3, #7
 8004b1a:	4970      	ldr	r1, [pc, #448]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b6e      	ldr	r3, [pc, #440]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0cf      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d010      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	4b66      	ldr	r3, [pc, #408]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d908      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4960      	ldr	r1, [pc, #384]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04c      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	4b5a      	ldr	r3, [pc, #360]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d121      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0a6      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8e:	4b54      	ldr	r3, [pc, #336]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d115      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e09a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba6:	4b4e      	ldr	r3, [pc, #312]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e08e      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb6:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e086      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4943      	ldr	r1, [pc, #268]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fc fe94 	bl	8001904 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fc fe90 	bl	8001904 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e06e      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b3a      	ldr	r3, [pc, #232]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d208      	bcs.n	8004c36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	492b      	ldr	r1, [pc, #172]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d210      	bcs.n	8004c66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c44:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 0207 	bic.w	r2, r3, #7
 8004c4c:	4923      	ldr	r1, [pc, #140]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_ClockConfig+0x1ec>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e036      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c72:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4918      	ldr	r1, [pc, #96]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca4:	f000 f824 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004cc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_RCC_ClockConfig+0x1fc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fc fdcb 	bl	8001864 <HAL_InitTick>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800a348 	.word	0x0800a348
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	20000004 	.word	0x20000004

08004cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d08:	4b3b      	ldr	r3, [pc, #236]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x34>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	d121      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d11e      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d24:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d30:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e005      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d40:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d4c:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d102      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	e004      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d134      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d003      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0xac>
 8004d94:	e005      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d98:	617b      	str	r3, [r7, #20]
      break;
 8004d9a:	e005      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9e:	617b      	str	r3, [r7, #20]
      break;
 8004da0:	e002      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	617b      	str	r3, [r7, #20]
      break;
 8004da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	3301      	adds	r3, #1
 8004db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	fb03 f202 	mul.w	r2, r3, r2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	0e5b      	lsrs	r3, r3, #25
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004de8:	69bb      	ldr	r3, [r7, #24]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3724      	adds	r7, #36	; 0x24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	0800a360 	.word	0x0800a360
 8004e00:	00f42400 	.word	0x00f42400
 8004e04:	007a1200 	.word	0x007a1200

08004e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000000 	.word	0x20000000

08004e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e24:	f7ff fff0 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4904      	ldr	r1, [pc, #16]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	0800a358 	.word	0x0800a358

08004e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e50:	f7ff ffda 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0adb      	lsrs	r3, r3, #11
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	4904      	ldr	r1, [pc, #16]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e62:	5ccb      	ldrb	r3, [r1, r3]
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	0800a358 	.word	0x0800a358

08004e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e90:	f7ff f922 	bl	80040d8 <HAL_PWREx_GetVoltageRange>
 8004e94:	6178      	str	r0, [r7, #20]
 8004e96:	e014      	b.n	8004ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eb0:	f7ff f912 	bl	80040d8 <HAL_PWREx_GetVoltageRange>
 8004eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec8:	d10b      	bne.n	8004ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b80      	cmp	r3, #128	; 0x80
 8004ece:	d919      	bls.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ed4:	d902      	bls.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e013      	b.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004edc:	2301      	movs	r3, #1
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e010      	b.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d902      	bls.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ee8:	2303      	movs	r3, #3
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e00a      	b.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b80      	cmp	r3, #128	; 0x80
 8004ef2:	d102      	bne.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e004      	b.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b70      	cmp	r3, #112	; 0x70
 8004efe:	d101      	bne.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f00:	2301      	movs	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 0207 	bic.w	r2, r3, #7
 8004f0c:	4909      	ldr	r1, [pc, #36]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d001      	beq.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40022000 	.word	0x40022000

08004f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f40:	2300      	movs	r3, #0
 8004f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f44:	2300      	movs	r3, #0
 8004f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d041      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f5c:	d02a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f62:	d824      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f68:	d008      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f6e:	d81e      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d010      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f7a:	e018      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f7c:	4b86      	ldr	r3, [pc, #536]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a85      	ldr	r2, [pc, #532]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f88:	e015      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 facb 	bl	800552c <RCCEx_PLLSAI1_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f9a:	e00c      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3320      	adds	r3, #32
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fbb6 	bl	8005714 <RCCEx_PLLSAI2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fbc:	4b76      	ldr	r3, [pc, #472]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fca:	4973      	ldr	r1, [pc, #460]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fd2:	e001      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d041      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fec:	d02a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ff2:	d824      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff8:	d008      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ffe:	d81e      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005008:	d010      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800500a:	e018      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800500c:	4b62      	ldr	r3, [pc, #392]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4a61      	ldr	r2, [pc, #388]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005018:	e015      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fa83 	bl	800552c <RCCEx_PLLSAI1_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800502a:	e00c      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3320      	adds	r3, #32
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fb6e 	bl	8005714 <RCCEx_PLLSAI2_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	74fb      	strb	r3, [r7, #19]
      break;
 8005042:	e000      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800504c:	4b52      	ldr	r3, [pc, #328]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800505a:	494f      	ldr	r1, [pc, #316]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005062:	e001      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a0 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800507a:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800508a:	2300      	movs	r3, #0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b41      	ldr	r3, [pc, #260]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	4a40      	ldr	r2, [pc, #256]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	; 0x58
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a3a      	ldr	r2, [pc, #232]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b8:	f7fc fc24 	bl	8001904 <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050be:	e009      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c0:	f7fc fc20 	bl	8001904 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d902      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	74fb      	strb	r3, [r7, #19]
        break;
 80050d2:	e005      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ef      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d15c      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e6:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01f      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	d019      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005110:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fc fbdf 	bl	8001904 <HAL_GetTick>
 8005146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005148:	e00b      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc fbdb 	bl	8001904 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d902      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	74fb      	strb	r3, [r7, #19]
            break;
 8005160:	e006      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ec      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	4904      	ldr	r1, [pc, #16]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800518e:	e009      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	74bb      	strb	r3, [r7, #18]
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a4:	7c7b      	ldrb	r3, [r7, #17]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051aa:	4b9e      	ldr	r3, [pc, #632]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	4a9d      	ldr	r2, [pc, #628]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c2:	4b98      	ldr	r3, [pc, #608]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f023 0203 	bic.w	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	4994      	ldr	r1, [pc, #592]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e4:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 020c 	bic.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	498c      	ldr	r1, [pc, #560]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005206:	4b87      	ldr	r3, [pc, #540]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	4983      	ldr	r1, [pc, #524]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005228:	4b7e      	ldr	r3, [pc, #504]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	497b      	ldr	r1, [pc, #492]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800524a:	4b76      	ldr	r3, [pc, #472]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	4972      	ldr	r1, [pc, #456]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800526c:	4b6d      	ldr	r3, [pc, #436]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527a:	496a      	ldr	r1, [pc, #424]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528e:	4b65      	ldr	r3, [pc, #404]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	4961      	ldr	r1, [pc, #388]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052b0:	4b5c      	ldr	r3, [pc, #368]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	4959      	ldr	r1, [pc, #356]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052d2:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	4950      	ldr	r1, [pc, #320]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f4:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	4948      	ldr	r1, [pc, #288]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	493f      	ldr	r1, [pc, #252]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d028      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005338:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005346:	4937      	ldr	r1, [pc, #220]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005356:	d106      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a31      	ldr	r2, [pc, #196]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
 8005364:	e011      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536e:	d10c      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f8d8 	bl	800552c <RCCEx_PLLSAI1_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d028      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005396:	4b23      	ldr	r3, [pc, #140]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	491f      	ldr	r1, [pc, #124]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b4:	d106      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c0:	60d3      	str	r3, [r2, #12]
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f8a9 	bl	800552c <RCCEx_PLLSAI1_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005402:	4908      	ldr	r1, [pc, #32]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005412:	d109      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a02      	ldr	r2, [pc, #8]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541e:	60d3      	str	r3, [r2, #12]
 8005420:	e014      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f877 	bl	800552c <RCCEx_PLLSAI1_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005466:	4928      	ldr	r1, [pc, #160]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005476:	d10d      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	2102      	movs	r1, #2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f854 	bl	800552c <RCCEx_PLLSAI1_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	74bb      	strb	r3, [r7, #18]
 8005492:	e011      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549c:	d10c      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3320      	adds	r3, #32
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f935 	bl	8005714 <RCCEx_PLLSAI2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d2:	490d      	ldr	r1, [pc, #52]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f6:	4904      	ldr	r1, [pc, #16]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000

0800550c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a04      	ldr	r2, [pc, #16]	; (8005528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000

0800552c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800553a:	4b75      	ldr	r3, [pc, #468]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005546:	4b72      	ldr	r3, [pc, #456]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0203 	and.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d10d      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
       ||
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800555e:	4b6c      	ldr	r3, [pc, #432]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
       ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d047      	beq.n	8005602 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
 8005576:	e044      	b.n	8005602 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d018      	beq.n	80055b2 <RCCEx_PLLSAI1_Config+0x86>
 8005580:	2b03      	cmp	r3, #3
 8005582:	d825      	bhi.n	80055d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005584:	2b01      	cmp	r3, #1
 8005586:	d002      	beq.n	800558e <RCCEx_PLLSAI1_Config+0x62>
 8005588:	2b02      	cmp	r3, #2
 800558a:	d009      	beq.n	80055a0 <RCCEx_PLLSAI1_Config+0x74>
 800558c:	e020      	b.n	80055d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800558e:	4b60      	ldr	r3, [pc, #384]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11d      	bne.n	80055d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559e:	e01a      	b.n	80055d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055a0:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d116      	bne.n	80055da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b0:	e013      	b.n	80055da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055b2:	4b57      	ldr	r3, [pc, #348]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10f      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055be:	4b54      	ldr	r3, [pc, #336]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ce:	e006      	b.n	80055de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	e004      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055d6:	bf00      	nop
 80055d8:	e002      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055de:	bf00      	nop
    }

    if(status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10d      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055e6:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6819      	ldr	r1, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	430b      	orrs	r3, r1
 80055fc:	4944      	ldr	r1, [pc, #272]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d17d      	bne.n	8005704 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005608:	4b41      	ldr	r3, [pc, #260]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a40      	ldr	r2, [pc, #256]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fc f976 	bl	8001904 <HAL_GetTick>
 8005618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800561a:	e009      	b.n	8005630 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800561c:	f7fc f972 	bl	8001904 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d902      	bls.n	8005630 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	73fb      	strb	r3, [r7, #15]
        break;
 800562e:	e005      	b.n	800563c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005630:	4b37      	ldr	r3, [pc, #220]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1ef      	bne.n	800561c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d160      	bne.n	8005704 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d111      	bne.n	800566c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005648:	4b31      	ldr	r3, [pc, #196]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	0211      	lsls	r1, r2, #8
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68d2      	ldr	r2, [r2, #12]
 800565e:	0912      	lsrs	r2, r2, #4
 8005660:	0452      	lsls	r2, r2, #17
 8005662:	430a      	orrs	r2, r1
 8005664:	492a      	ldr	r1, [pc, #168]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	610b      	str	r3, [r1, #16]
 800566a:	e027      	b.n	80056bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d112      	bne.n	8005698 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005672:	4b27      	ldr	r3, [pc, #156]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800567a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6892      	ldr	r2, [r2, #8]
 8005682:	0211      	lsls	r1, r2, #8
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6912      	ldr	r2, [r2, #16]
 8005688:	0852      	lsrs	r2, r2, #1
 800568a:	3a01      	subs	r2, #1
 800568c:	0552      	lsls	r2, r2, #21
 800568e:	430a      	orrs	r2, r1
 8005690:	491f      	ldr	r1, [pc, #124]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]
 8005696:	e011      	b.n	80056bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6892      	ldr	r2, [r2, #8]
 80056a8:	0211      	lsls	r1, r2, #8
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6952      	ldr	r2, [r2, #20]
 80056ae:	0852      	lsrs	r2, r2, #1
 80056b0:	3a01      	subs	r2, #1
 80056b2:	0652      	lsls	r2, r2, #25
 80056b4:	430a      	orrs	r2, r1
 80056b6:	4916      	ldr	r1, [pc, #88]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056bc:	4b14      	ldr	r3, [pc, #80]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a13      	ldr	r2, [pc, #76]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc f91c 	bl	8001904 <HAL_GetTick>
 80056cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ce:	e009      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d0:	f7fc f918 	bl	8001904 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d902      	bls.n	80056e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	73fb      	strb	r3, [r7, #15]
          break;
 80056e2:	e005      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ef      	beq.n	80056d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	4904      	ldr	r1, [pc, #16]	; (8005710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000

08005714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005722:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800572e:	4b67      	ldr	r3, [pc, #412]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0203 	and.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d10d      	bne.n	800575a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
       ||
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005746:	4b61      	ldr	r3, [pc, #388]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
       ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d047      	beq.n	80057ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
 800575e:	e044      	b.n	80057ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d018      	beq.n	800579a <RCCEx_PLLSAI2_Config+0x86>
 8005768:	2b03      	cmp	r3, #3
 800576a:	d825      	bhi.n	80057b8 <RCCEx_PLLSAI2_Config+0xa4>
 800576c:	2b01      	cmp	r3, #1
 800576e:	d002      	beq.n	8005776 <RCCEx_PLLSAI2_Config+0x62>
 8005770:	2b02      	cmp	r3, #2
 8005772:	d009      	beq.n	8005788 <RCCEx_PLLSAI2_Config+0x74>
 8005774:	e020      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005776:	4b55      	ldr	r3, [pc, #340]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11d      	bne.n	80057be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005786:	e01a      	b.n	80057be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005788:	4b50      	ldr	r3, [pc, #320]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d116      	bne.n	80057c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e013      	b.n	80057c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800579a:	4b4c      	ldr	r3, [pc, #304]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057a6:	4b49      	ldr	r3, [pc, #292]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e004      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ce:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	3b01      	subs	r3, #1
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	430b      	orrs	r3, r1
 80057e4:	4939      	ldr	r1, [pc, #228]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d167      	bne.n	80058c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057f0:	4b36      	ldr	r3, [pc, #216]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a35      	ldr	r2, [pc, #212]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fc f882 	bl	8001904 <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005802:	e009      	b.n	8005818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005804:	f7fc f87e 	bl	8001904 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
        break;
 8005816:	e005      	b.n	8005824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005818:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ef      	bne.n	8005804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d14a      	bne.n	80058c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d111      	bne.n	8005854 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005830:	4b26      	ldr	r3, [pc, #152]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	0211      	lsls	r1, r2, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	0912      	lsrs	r2, r2, #4
 8005848:	0452      	lsls	r2, r2, #17
 800584a:	430a      	orrs	r2, r1
 800584c:	491f      	ldr	r1, [pc, #124]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800584e:	4313      	orrs	r3, r2
 8005850:	614b      	str	r3, [r1, #20]
 8005852:	e011      	b.n	8005878 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005854:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800585c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
 8005864:	0211      	lsls	r1, r2, #8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6912      	ldr	r2, [r2, #16]
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	0652      	lsls	r2, r2, #25
 8005870:	430a      	orrs	r2, r1
 8005872:	4916      	ldr	r1, [pc, #88]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7fc f83e 	bl	8001904 <HAL_GetTick>
 8005888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800588a:	e009      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800588c:	f7fc f83a 	bl	8001904 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d902      	bls.n	80058a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	73fb      	strb	r3, [r7, #15]
          break;
 800589e:	e005      	b.n	80058ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ef      	beq.n	800588c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	4904      	ldr	r1, [pc, #16]	; (80058cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e095      	b.n	8005a0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f2:	d009      	beq.n	8005908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	61da      	str	r2, [r3, #28]
 80058fa:	e005      	b.n	8005908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fe04 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005948:	d902      	bls.n	8005950 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e002      	b.n	8005956 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005954:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800595e:	d007      	beq.n	8005970 <HAL_SPI_Init+0xa0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005968:	d002      	beq.n	8005970 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	ea42 0103 	orr.w	r1, r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	0c1b      	lsrs	r3, r3, #16
 80059cc:	f003 0204 	and.w	r2, r3, #4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059ec:	ea42 0103 	orr.w	r1, r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e040      	b.n	8005aaa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fb fdbd 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2224      	movs	r2, #36	; 0x24
 8005a42:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fae1 	bl	8006024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f826 	bl	8005ab4 <UART_SetConfig>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e01b      	b.n	8005aaa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb60 	bl	8006168 <UART_CheckIdleState>
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b08a      	sub	sp, #40	; 0x28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4ba4      	ldr	r3, [pc, #656]	; (8005d74 <UART_SetConfig+0x2c0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a99      	ldr	r2, [pc, #612]	; (8005d78 <UART_SetConfig+0x2c4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a90      	ldr	r2, [pc, #576]	; (8005d7c <UART_SetConfig+0x2c8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d126      	bne.n	8005b8c <UART_SetConfig+0xd8>
 8005b3e:	4b90      	ldr	r3, [pc, #576]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d81b      	bhi.n	8005b84 <UART_SetConfig+0xd0>
 8005b4c:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <UART_SetConfig+0xa0>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6a:	e116      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b72:	e112      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7a:	e10e      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e10a      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e106      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7c      	ldr	r2, [pc, #496]	; (8005d84 <UART_SetConfig+0x2d0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d138      	bne.n	8005c08 <UART_SetConfig+0x154>
 8005b96:	4b7a      	ldr	r3, [pc, #488]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f003 030c 	and.w	r3, r3, #12
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	d82d      	bhi.n	8005c00 <UART_SetConfig+0x14c>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0xf8>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005be1 	.word	0x08005be1
 8005bb0:	08005c01 	.word	0x08005c01
 8005bb4:	08005c01 	.word	0x08005c01
 8005bb8:	08005c01 	.word	0x08005c01
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005c01 	.word	0x08005c01
 8005bc4:	08005c01 	.word	0x08005c01
 8005bc8:	08005c01 	.word	0x08005c01
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005c01 	.word	0x08005c01
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	08005bf9 	.word	0x08005bf9
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e0d8      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e0d4      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e0d0      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e0cc      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e0c8      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5e      	ldr	r2, [pc, #376]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d125      	bne.n	8005c5e <UART_SetConfig+0x1aa>
 8005c12:	4b5b      	ldr	r3, [pc, #364]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d016      	beq.n	8005c4e <UART_SetConfig+0x19a>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d818      	bhi.n	8005c56 <UART_SetConfig+0x1a2>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d00a      	beq.n	8005c3e <UART_SetConfig+0x18a>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d814      	bhi.n	8005c56 <UART_SetConfig+0x1a2>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <UART_SetConfig+0x182>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d008      	beq.n	8005c46 <UART_SetConfig+0x192>
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0x1a2>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3c:	e0ad      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c44:	e0a9      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c46:	2304      	movs	r3, #4
 8005c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4c:	e0a5      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c4e:	2308      	movs	r3, #8
 8005c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c54:	e0a1      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c56:	2310      	movs	r3, #16
 8005c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5c:	e09d      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4a      	ldr	r2, [pc, #296]	; (8005d8c <UART_SetConfig+0x2d8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d125      	bne.n	8005cb4 <UART_SetConfig+0x200>
 8005c68:	4b45      	ldr	r3, [pc, #276]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c72:	2bc0      	cmp	r3, #192	; 0xc0
 8005c74:	d016      	beq.n	8005ca4 <UART_SetConfig+0x1f0>
 8005c76:	2bc0      	cmp	r3, #192	; 0xc0
 8005c78:	d818      	bhi.n	8005cac <UART_SetConfig+0x1f8>
 8005c7a:	2b80      	cmp	r3, #128	; 0x80
 8005c7c:	d00a      	beq.n	8005c94 <UART_SetConfig+0x1e0>
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d814      	bhi.n	8005cac <UART_SetConfig+0x1f8>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <UART_SetConfig+0x1d8>
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d008      	beq.n	8005c9c <UART_SetConfig+0x1e8>
 8005c8a:	e00f      	b.n	8005cac <UART_SetConfig+0x1f8>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e082      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e07e      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca2:	e07a      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e076      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb2:	e072      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a35      	ldr	r2, [pc, #212]	; (8005d90 <UART_SetConfig+0x2dc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d12a      	bne.n	8005d14 <UART_SetConfig+0x260>
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ccc:	d01a      	beq.n	8005d04 <UART_SetConfig+0x250>
 8005cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd2:	d81b      	bhi.n	8005d0c <UART_SetConfig+0x258>
 8005cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd8:	d00c      	beq.n	8005cf4 <UART_SetConfig+0x240>
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cde:	d815      	bhi.n	8005d0c <UART_SetConfig+0x258>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <UART_SetConfig+0x238>
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce8:	d008      	beq.n	8005cfc <UART_SetConfig+0x248>
 8005cea:	e00f      	b.n	8005d0c <UART_SetConfig+0x258>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e052      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e04e      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e04a      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e046      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d12:	e042      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <UART_SetConfig+0x2c4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d13a      	bne.n	8005d94 <UART_SetConfig+0x2e0>
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2c:	d01a      	beq.n	8005d64 <UART_SetConfig+0x2b0>
 8005d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d32:	d81b      	bhi.n	8005d6c <UART_SetConfig+0x2b8>
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d38:	d00c      	beq.n	8005d54 <UART_SetConfig+0x2a0>
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3e:	d815      	bhi.n	8005d6c <UART_SetConfig+0x2b8>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <UART_SetConfig+0x298>
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d48:	d008      	beq.n	8005d5c <UART_SetConfig+0x2a8>
 8005d4a:	e00f      	b.n	8005d6c <UART_SetConfig+0x2b8>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e022      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d54:	2302      	movs	r3, #2
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e01e      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e01a      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d64:	2308      	movs	r3, #8
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e016      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d72:	e012      	b.n	8005d9a <UART_SetConfig+0x2e6>
 8005d74:	efff69f3 	.word	0xefff69f3
 8005d78:	40008000 	.word	0x40008000
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40004400 	.word	0x40004400
 8005d88:	40004800 	.word	0x40004800
 8005d8c:	40004c00 	.word	0x40004c00
 8005d90:	40005000 	.word	0x40005000
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a9f      	ldr	r2, [pc, #636]	; (800601c <UART_SetConfig+0x568>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d17a      	bne.n	8005e9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d824      	bhi.n	8005df6 <UART_SetConfig+0x342>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x300>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005df7 	.word	0x08005df7
 8005dc4:	08005de7 	.word	0x08005de7
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	08005df7 	.word	0x08005df7
 8005dd4:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7ff f822 	bl	8004e20 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	61f8      	str	r0, [r7, #28]
        break;
 8005dde:	e010      	b.n	8005e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <UART_SetConfig+0x56c>)
 8005de2:	61fb      	str	r3, [r7, #28]
        break;
 8005de4:	e00d      	b.n	8005e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7fe ff83 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8005dea:	61f8      	str	r0, [r7, #28]
        break;
 8005dec:	e009      	b.n	8005e02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e005      	b.n	8005e02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80fb 	beq.w	8006000 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d305      	bcc.n	8005e26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d903      	bls.n	8005e2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e2c:	e0e8      	b.n	8006000 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2200      	movs	r2, #0
 8005e32:	461c      	mov	r4, r3
 8005e34:	4615      	mov	r5, r2
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	022b      	lsls	r3, r5, #8
 8005e40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e44:	0222      	lsls	r2, r4, #8
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	6849      	ldr	r1, [r1, #4]
 8005e4a:	0849      	lsrs	r1, r1, #1
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	4688      	mov	r8, r1
 8005e50:	4681      	mov	r9, r0
 8005e52:	eb12 0a08 	adds.w	sl, r2, r8
 8005e56:	eb43 0b09 	adc.w	fp, r3, r9
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e68:	4650      	mov	r0, sl
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	f7fa fcba 	bl	80007e4 <__aeabi_uldivmod>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4613      	mov	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7e:	d308      	bcc.n	8005e92 <UART_SetConfig+0x3de>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d204      	bcs.n	8005e92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	60da      	str	r2, [r3, #12]
 8005e90:	e0b6      	b.n	8006000 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e98:	e0b2      	b.n	8006000 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea2:	d15e      	bne.n	8005f62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d828      	bhi.n	8005efe <UART_SetConfig+0x44a>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0x400>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eff 	.word	0x08005eff
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f7fe ffa2 	bl	8004e20 <HAL_RCC_GetPCLK1Freq>
 8005edc:	61f8      	str	r0, [r7, #28]
        break;
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee0:	f7fe ffb4 	bl	8004e4c <HAL_RCC_GetPCLK2Freq>
 8005ee4:	61f8      	str	r0, [r7, #28]
        break;
 8005ee6:	e010      	b.n	8005f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b4d      	ldr	r3, [pc, #308]	; (8006020 <UART_SetConfig+0x56c>)
 8005eea:	61fb      	str	r3, [r7, #28]
        break;
 8005eec:	e00d      	b.n	8005f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fe feff 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8005ef2:	61f8      	str	r0, [r7, #28]
        break;
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efa:	61fb      	str	r3, [r7, #28]
        break;
 8005efc:	e005      	b.n	8005f0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d077      	beq.n	8006000 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005a      	lsls	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b0f      	cmp	r3, #15
 8005f2a:	d916      	bls.n	8005f5a <UART_SetConfig+0x4a6>
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d212      	bcs.n	8005f5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f023 030f 	bic.w	r3, r3, #15
 8005f3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	8afa      	ldrh	r2, [r7, #22]
 8005f56:	60da      	str	r2, [r3, #12]
 8005f58:	e052      	b.n	8006000 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f60:	e04e      	b.n	8006000 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d827      	bhi.n	8005fba <UART_SetConfig+0x506>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x4bc>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fab 	.word	0x08005fab
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fbb 	.word	0x08005fbb
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fe ff44 	bl	8004e20 <HAL_RCC_GetPCLK1Freq>
 8005f98:	61f8      	str	r0, [r7, #28]
        break;
 8005f9a:	e014      	b.n	8005fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7fe ff56 	bl	8004e4c <HAL_RCC_GetPCLK2Freq>
 8005fa0:	61f8      	str	r0, [r7, #28]
        break;
 8005fa2:	e010      	b.n	8005fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <UART_SetConfig+0x56c>)
 8005fa6:	61fb      	str	r3, [r7, #28]
        break;
 8005fa8:	e00d      	b.n	8005fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fe fea1 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8005fae:	61f8      	str	r0, [r7, #28]
        break;
 8005fb0:	e009      	b.n	8005fc6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	61fb      	str	r3, [r7, #28]
        break;
 8005fb8:	e005      	b.n	8005fc6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d019      	beq.n	8006000 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	085a      	lsrs	r2, r3, #1
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d909      	bls.n	8005ffa <UART_SetConfig+0x546>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d205      	bcs.n	8005ffa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	e002      	b.n	8006000 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800600c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006010:	4618      	mov	r0, r3
 8006012:	3728      	adds	r7, #40	; 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800601a:	bf00      	nop
 800601c:	40008000 	.word	0x40008000
 8006020:	00f42400 	.word	0x00f42400

08006024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d10a      	bne.n	800613a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b098      	sub	sp, #96	; 0x60
 800616c:	af02      	add	r7, sp, #8
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006178:	f7fb fbc4 	bl	8001904 <HAL_GetTick>
 800617c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d12e      	bne.n	80061ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f88c 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d021      	beq.n	80061ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	647b      	str	r3, [r7, #68]	; 0x44
 80061c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e062      	b.n	80062b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d149      	bne.n	800628c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006200:	2200      	movs	r2, #0
 8006202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f856 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d03c      	beq.n	800628c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	623b      	str	r3, [r7, #32]
   return(result);
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 8006232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	60fb      	str	r3, [r7, #12]
   return(result);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006264:	61fa      	str	r2, [r7, #28]
 8006266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	617b      	str	r3, [r7, #20]
   return(result);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e011      	b.n	80062b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3758      	adds	r7, #88	; 0x58
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	e049      	b.n	800635e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d045      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fb fb17 	bl	8001904 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e048      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d031      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d110      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2208      	movs	r2, #8
 800630e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f838 	bl	8006386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2208      	movs	r2, #8
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e029      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006338:	d111      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f81e 	bl	8006386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e00f      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	bf0c      	ite	eq
 800636e:	2301      	moveq	r3, #1
 8006370:	2300      	movne	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	429a      	cmp	r2, r3
 800637a:	d0a6      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006386:	b480      	push	{r7}
 8006388:	b095      	sub	sp, #84	; 0x54
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	643b      	str	r3, [r7, #64]	; 0x40
 80063ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d118      	bne.n	800642e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	60bb      	str	r3, [r7, #8]
   return(result);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f023 0310 	bic.w	r3, r3, #16
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	613b      	str	r3, [r7, #16]
   return(result);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e6      	bne.n	80063fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006442:	bf00      	nop
 8006444:	3754      	adds	r7, #84	; 0x54
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644e:	b084      	sub	sp, #16
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	f107 001c 	add.w	r0, r7, #28
 800645c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fa1d 	bl	80078ac <USB_CoreReset>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
 8006488:	e005      	b.n	8006496 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a2:	b004      	add	sp, #16
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d165      	bne.n	8006588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <USB_SetTurnaroundTime+0x110>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d906      	bls.n	80064d2 <USB_SetTurnaroundTime+0x2a>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a3d      	ldr	r2, [pc, #244]	; (80065bc <USB_SetTurnaroundTime+0x114>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d202      	bcs.n	80064d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064cc:	230f      	movs	r3, #15
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e05c      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a39      	ldr	r2, [pc, #228]	; (80065bc <USB_SetTurnaroundTime+0x114>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d306      	bcc.n	80064e8 <USB_SetTurnaroundTime+0x40>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a38      	ldr	r2, [pc, #224]	; (80065c0 <USB_SetTurnaroundTime+0x118>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d202      	bcs.n	80064e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064e2:	230e      	movs	r3, #14
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e051      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <USB_SetTurnaroundTime+0x118>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d306      	bcc.n	80064fe <USB_SetTurnaroundTime+0x56>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <USB_SetTurnaroundTime+0x11c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d202      	bcs.n	80064fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064f8:	230d      	movs	r3, #13
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e046      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <USB_SetTurnaroundTime+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d306      	bcc.n	8006514 <USB_SetTurnaroundTime+0x6c>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <USB_SetTurnaroundTime+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d802      	bhi.n	8006514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800650e:	230c      	movs	r3, #12
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e03b      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a2c      	ldr	r2, [pc, #176]	; (80065c8 <USB_SetTurnaroundTime+0x120>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d906      	bls.n	800652a <USB_SetTurnaroundTime+0x82>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a2b      	ldr	r2, [pc, #172]	; (80065cc <USB_SetTurnaroundTime+0x124>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d802      	bhi.n	800652a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006524:	230b      	movs	r3, #11
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e030      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a27      	ldr	r2, [pc, #156]	; (80065cc <USB_SetTurnaroundTime+0x124>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d906      	bls.n	8006540 <USB_SetTurnaroundTime+0x98>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <USB_SetTurnaroundTime+0x128>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d802      	bhi.n	8006540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800653a:	230a      	movs	r3, #10
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e025      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <USB_SetTurnaroundTime+0x128>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d906      	bls.n	8006556 <USB_SetTurnaroundTime+0xae>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a22      	ldr	r2, [pc, #136]	; (80065d4 <USB_SetTurnaroundTime+0x12c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d202      	bcs.n	8006556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006550:	2309      	movs	r3, #9
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e01a      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <USB_SetTurnaroundTime+0x12c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d306      	bcc.n	800656c <USB_SetTurnaroundTime+0xc4>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <USB_SetTurnaroundTime+0x130>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d802      	bhi.n	800656c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006566:	2308      	movs	r3, #8
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e00f      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <USB_SetTurnaroundTime+0x130>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d906      	bls.n	8006582 <USB_SetTurnaroundTime+0xda>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a19      	ldr	r2, [pc, #100]	; (80065dc <USB_SetTurnaroundTime+0x134>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d202      	bcs.n	8006582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800657c:	2307      	movs	r3, #7
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e004      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006582:	2306      	movs	r3, #6
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e001      	b.n	800658c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006588:	2309      	movs	r3, #9
 800658a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	00d8acbf 	.word	0x00d8acbf
 80065bc:	00e4e1c0 	.word	0x00e4e1c0
 80065c0:	00f42400 	.word	0x00f42400
 80065c4:	01067380 	.word	0x01067380
 80065c8:	011a499f 	.word	0x011a499f
 80065cc:	01312cff 	.word	0x01312cff
 80065d0:	014ca43f 	.word	0x014ca43f
 80065d4:	016e3600 	.word	0x016e3600
 80065d8:	01a6ab1f 	.word	0x01a6ab1f
 80065dc:	01e84800 	.word	0x01e84800

080065e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f043 0201 	orr.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d115      	bne.n	8006672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006652:	2001      	movs	r0, #1
 8006654:	f7fb f962 	bl	800191c <HAL_Delay>
      ms++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 f8ab 	bl	80077ba <USB_GetMode>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d01e      	beq.n	80066a8 <USB_SetCurrentMode+0x84>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b31      	cmp	r3, #49	; 0x31
 800666e:	d9f0      	bls.n	8006652 <USB_SetCurrentMode+0x2e>
 8006670:	e01a      	b.n	80066a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d115      	bne.n	80066a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006684:	2001      	movs	r0, #1
 8006686:	f7fb f949 	bl	800191c <HAL_Delay>
      ms++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f892 	bl	80077ba <USB_GetMode>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <USB_SetCurrentMode+0x84>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b31      	cmp	r3, #49	; 0x31
 80066a0:	d9f0      	bls.n	8006684 <USB_SetCurrentMode+0x60>
 80066a2:	e001      	b.n	80066a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e005      	b.n	80066b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b32      	cmp	r3, #50	; 0x32
 80066ac:	d101      	bne.n	80066b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066bc:	b084      	sub	sp, #16
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e009      	b.n	80066f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3340      	adds	r3, #64	; 0x40
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0e      	cmp	r3, #14
 80066f4:	d9f2      	bls.n	80066dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11c      	bne.n	8006736 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e005      	b.n	8006742 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800674e:	2103      	movs	r1, #3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f959 	bl	8006a08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006756:	2110      	movs	r1, #16
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8f1 	bl	8006940 <USB_FlushTxFifo>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f91d 	bl	80069a8 <USB_FlushRxFifo>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	461a      	mov	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e043      	b.n	800682a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b8:	d118      	bne.n	80067ec <USB_DevInit+0x130>
    {
      if (i == 0U)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	461a      	mov	r2, r3
 80067ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	e013      	b.n	80067fe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	461a      	mov	r2, r3
 80067e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e008      	b.n	80067fe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	461a      	mov	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	461a      	mov	r2, r3
 800680c:	2300      	movs	r3, #0
 800680e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	461a      	mov	r2, r3
 800681e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006822:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3301      	adds	r3, #1
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d3b7      	bcc.n	80067a2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	e043      	b.n	80068c0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800684a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684e:	d118      	bne.n	8006882 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e013      	b.n	8006894 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	461a      	mov	r2, r3
 800687a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	e008      	b.n	8006894 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	2300      	movs	r3, #0
 8006892:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	461a      	mov	r2, r3
 80068b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	3301      	adds	r3, #1
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d3b7      	bcc.n	8006838 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f043 0210 	orr.w	r2, r3, #16
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <USB_DevInit+0x280>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f043 0208 	orr.w	r2, r3, #8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d107      	bne.n	800692a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006922:	f043 0304 	orr.w	r3, r3, #4
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006936:	b004      	add	sp, #16
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	803c3800 	.word	0x803c3800

08006940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <USB_FlushTxFifo+0x64>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e01b      	b.n	8006998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	daf2      	bge.n	800694e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	019b      	lsls	r3, r3, #6
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <USB_FlushTxFifo+0x64>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e006      	b.n	8006998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b20      	cmp	r3, #32
 8006994:	d0f0      	beq.n	8006978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	00030d40 	.word	0x00030d40

080069a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <USB_FlushRxFifo+0x5c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e018      	b.n	80069f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	daf2      	bge.n	80069b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2210      	movs	r2, #16
 80069d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <USB_FlushRxFifo+0x5c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e006      	b.n	80069f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d0f0      	beq.n	80069d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	00030d40 	.word	0x00030d40

08006a08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0306 	and.w	r3, r3, #6
 8006a52:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d002      	beq.n	8006a60 <USB_GetDevSpeed+0x26>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b06      	cmp	r3, #6
 8006a5e:	d102      	bne.n	8006a66 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a60:	2302      	movs	r3, #2
 8006a62:	75fb      	strb	r3, [r7, #23]
 8006a64:	e001      	b.n	8006a6a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006a66:	230f      	movs	r3, #15
 8006a68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d13a      	bne.n	8006b0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d155      	bne.n	8006b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	791b      	ldrb	r3, [r3, #4]
 8006ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	059b      	lsls	r3, r3, #22
 8006aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006af0:	4313      	orrs	r3, r2
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	e036      	b.n	8006b78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d11a      	bne.n	8006b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	4313      	orrs	r3, r2
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d161      	bne.n	8006c68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bba:	d11f      	bne.n	8006bfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	43db      	mvns	r3, r3
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	2101      	movs	r1, #1
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c40:	4013      	ands	r3, r2
 8006c42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	0159      	lsls	r1, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	440b      	add	r3, r1
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <USB_DeactivateEndpoint+0x1b0>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
 8006c66:	e060      	b.n	8006d2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7e:	d11f      	bne.n	8006cc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	041b      	lsls	r3, r3, #16
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d04:	4013      	ands	r3, r2
 8006d06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	0159      	lsls	r1, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	4619      	mov	r1, r3
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <USB_DeactivateEndpoint+0x1b4>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	ec337800 	.word	0xec337800
 8006d3c:	eff37800 	.word	0xeff37800

08006d40 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 8128 	bne.w	8006fae <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d132      	bne.n	8006dcc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc4:	0cdb      	lsrs	r3, r3, #19
 8006dc6:	04db      	lsls	r3, r3, #19
 8006dc8:	6113      	str	r3, [r2, #16]
 8006dca:	e092      	b.n	8006ef2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	0cdb      	lsrs	r3, r3, #19
 8006de8:	04db      	lsls	r3, r3, #19
 8006dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d11a      	bne.n	8006e4c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d903      	bls.n	8006e2a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e48:	6113      	str	r3, [r2, #16]
 8006e4a:	e01b      	b.n	8006e84 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	6919      	ldr	r1, [r3, #16]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	440b      	add	r3, r1
 8006e64:	1e59      	subs	r1, r3, #1
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e70:	4b8d      	ldr	r3, [pc, #564]	; (80070a8 <USB_EPStartXfer+0x368>)
 8006e72:	400b      	ands	r3, r1
 8006e74:	6939      	ldr	r1, [r7, #16]
 8006e76:	0148      	lsls	r0, r1, #5
 8006e78:	6979      	ldr	r1, [r7, #20]
 8006e7a:	4401      	add	r1, r0
 8006e7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e80:	4313      	orrs	r3, r2
 8006e82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9a:	6939      	ldr	r1, [r7, #16]
 8006e9c:	0148      	lsls	r0, r1, #5
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	4401      	add	r1, r0
 8006ea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d11f      	bne.n	8006ef2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ecc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ed0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f10:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	791b      	ldrb	r3, [r3, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d015      	beq.n	8006f46 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8139 	beq.w	8007196 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	2101      	movs	r1, #1
 8006f36:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3a:	6979      	ldr	r1, [r7, #20]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f40:	4313      	orrs	r3, r2
 8006f42:	634b      	str	r3, [r1, #52]	; 0x34
 8006f44:	e127      	b.n	8007196 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d110      	bne.n	8006f78 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e00f      	b.n	8006f98 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f96:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68d9      	ldr	r1, [r3, #12]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9a6 	bl	80072f8 <USB_WritePacket>
 8006fac:	e0f3      	b.n	8007196 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc8:	0cdb      	lsrs	r3, r3, #19
 8006fca:	04db      	lsls	r3, r3, #19
 8006fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d12f      	bne.n	8007058 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007026:	6939      	ldr	r1, [r7, #16]
 8007028:	0148      	lsls	r0, r1, #5
 800702a:	6979      	ldr	r1, [r7, #20]
 800702c:	4401      	add	r1, r0
 800702e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007032:	4313      	orrs	r3, r2
 8007034:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	0151      	lsls	r1, r2, #5
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	440a      	add	r2, r1
 800704c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007054:	6113      	str	r3, [r2, #16]
 8007056:	e061      	b.n	800711c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d125      	bne.n	80070ac <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007076:	6939      	ldr	r1, [r7, #16]
 8007078:	0148      	lsls	r0, r1, #5
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	4401      	add	r1, r0
 800707e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007082:	4313      	orrs	r3, r2
 8007084:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a4:	6113      	str	r3, [r2, #16]
 80070a6:	e039      	b.n	800711c <USB_EPStartXfer+0x3dc>
 80070a8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4413      	add	r3, r2
 80070b6:	1e5a      	subs	r2, r3, #1
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	89fa      	ldrh	r2, [r7, #14]
 80070c8:	fb03 f202 	mul.w	r2, r3, r2
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	89fb      	ldrh	r3, [r7, #14]
 80070e0:	04d9      	lsls	r1, r3, #19
 80070e2:	4b2f      	ldr	r3, [pc, #188]	; (80071a0 <USB_EPStartXfer+0x460>)
 80070e4:	400b      	ands	r3, r1
 80070e6:	6939      	ldr	r1, [r7, #16]
 80070e8:	0148      	lsls	r0, r1, #5
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	4401      	add	r1, r0
 80070ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070f2:	4313      	orrs	r3, r2
 80070f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710c:	6939      	ldr	r1, [r7, #16]
 800710e:	0148      	lsls	r0, r1, #5
 8007110:	6979      	ldr	r1, [r7, #20]
 8007112:	4401      	add	r1, r0
 8007114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007118:	4313      	orrs	r3, r2
 800711a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	791b      	ldrb	r3, [r3, #4]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d128      	bne.n	8007176 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d110      	bne.n	8007156 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	e00f      	b.n	8007176 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	440a      	add	r2, r1
 800716c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007174:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	1ff80000 	.word	0x1ff80000

080071a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d14a      	bne.n	8007258 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071da:	f040 8086 	bne.w	80072ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007200:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	7812      	ldrb	r2, [r2, #0]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007224:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007232:	4293      	cmp	r3, r2
 8007234:	d902      	bls.n	800723c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
          break;
 800723a:	e056      	b.n	80072ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007254:	d0e7      	beq.n	8007226 <USB_EPStopXfer+0x82>
 8007256:	e048      	b.n	80072ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007270:	d13b      	bne.n	80072ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007290:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007294:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	7812      	ldrb	r2, [r2, #0]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d902      	bls.n	80072d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
          break;
 80072ce:	e00c      	b.n	80072ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e8:	d0e7      	beq.n	80072ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	460b      	mov	r3, r1
 8007308:	71fb      	strb	r3, [r7, #7]
 800730a:	4613      	mov	r3, r2
 800730c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	3303      	adds	r3, #3
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800731e:	2300      	movs	r3, #0
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e018      	b.n	8007356 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	031a      	lsls	r2, r3, #12
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4413      	add	r3, r2
 800732c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007330:	461a      	mov	r2, r3
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	3301      	adds	r3, #1
 800733c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	3301      	adds	r3, #1
 8007342:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	3301      	adds	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	3301      	adds	r3, #1
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	429a      	cmp	r2, r3
 800735c:	d3e2      	bcc.n	8007324 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3724      	adds	r7, #36	; 0x24
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800736c:	b480      	push	{r7}
 800736e:	b08b      	sub	sp, #44	; 0x2c
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	b29b      	uxth	r3, r3
 8007388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007392:	2300      	movs	r3, #0
 8007394:	623b      	str	r3, [r7, #32]
 8007396:	e014      	b.n	80073c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	3301      	adds	r3, #1
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	3301      	adds	r3, #1
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	3301      	adds	r3, #1
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	3301      	adds	r3, #1
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	3301      	adds	r3, #1
 80073c0:	623b      	str	r3, [r7, #32]
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d3e6      	bcc.n	8007398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073ca:	8bfb      	ldrh	r3, [r7, #30]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01e      	beq.n	800740e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	461a      	mov	r2, r3
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	701a      	strb	r2, [r3, #0]
      i++;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	3301      	adds	r3, #1
 80073fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	3301      	adds	r3, #1
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007402:	8bfb      	ldrh	r3, [r7, #30]
 8007404:	3b01      	subs	r3, #1
 8007406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007408:	8bfb      	ldrh	r3, [r7, #30]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ea      	bne.n	80073e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007410:	4618      	mov	r0, r3
 8007412:	372c      	adds	r7, #44	; 0x2c
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d12c      	bne.n	8007492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	db12      	blt.n	8007470 <USB_EPSetStall+0x54>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00f      	beq.n	8007470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	0151      	lsls	r1, r2, #5
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	440a      	add	r2, r1
 8007466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800746e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e02b      	b.n	80074ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	db12      	blt.n	80074ca <USB_EPSetStall+0xae>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00f      	beq.n	80074ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d128      	bne.n	8007566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	791b      	ldrb	r3, [r3, #4]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d003      	beq.n	8007544 <USB_EPClearStall+0x4c>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d138      	bne.n	80075b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e027      	b.n	80075b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d003      	beq.n	8007596 <USB_EPClearStall+0x9e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d10f      	bne.n	80075b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763e:	f023 0302 	bic.w	r3, r3, #2
 8007642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800766c:	f023 0303 	bic.w	r3, r3, #3
 8007670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ac:	68fb      	ldr	r3, [r7, #12]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4013      	ands	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	0c1b      	lsrs	r3, r3, #16
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	b29b      	uxth	r3, r3
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007750:	68bb      	ldr	r3, [r7, #8]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	fa22 f303 	lsr.w	r3, r2, r3
 800778e:	01db      	lsls	r3, r3, #7
 8007790:	b2db      	uxtb	r3, r3
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4013      	ands	r3, r2
 80077aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077ac:	68bb      	ldr	r3, [r7, #8]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0301 	and.w	r3, r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077f4:	f023 0307 	bic.w	r3, r3, #7
 80077f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	333c      	adds	r3, #60	; 0x3c
 800782e:	3304      	adds	r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <USB_EP0_OutStart+0x8c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d90a      	bls.n	8007852 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784c:	d101      	bne.n	8007852 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e024      	b.n	800789c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	461a      	mov	r2, r3
 800785a:	2300      	movs	r3, #0
 800785c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007880:	f043 0318 	orr.w	r3, r3, #24
 8007884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007894:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007898:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	4f54300a 	.word	0x4f54300a

080078ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <USB_CoreReset+0x64>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e01b      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf2      	bge.n	80078b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f043 0201 	orr.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <USB_CoreReset+0x64>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d0f0      	beq.n	80078e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	00030d40 	.word	0x00030d40

08007914 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007920:	2018      	movs	r0, #24
 8007922:	f002 fc8b 	bl	800a23c <USBD_static_malloc>
 8007926:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	32b0      	adds	r2, #176	; 0xb0
 8007938:	2100      	movs	r1, #0
 800793a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800793e:	2302      	movs	r3, #2
 8007940:	e08a      	b.n	8007a58 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	32b0      	adds	r2, #176	; 0xb0
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	32b0      	adds	r2, #176	; 0xb0
 800795c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7c1b      	ldrb	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11b      	bne.n	80079a6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800796e:	4b3c      	ldr	r3, [pc, #240]	; (8007a60 <USBD_CUSTOM_HID_Init+0x14c>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	3326      	adds	r3, #38	; 0x26
 8007984:	2205      	movs	r2, #5
 8007986:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007988:	4b36      	ldr	r3, [pc, #216]	; (8007a64 <USBD_CUSTOM_HID_Init+0x150>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80079a0:	2205      	movs	r2, #5
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e01a      	b.n	80079dc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <USBD_CUSTOM_HID_Init+0x14c>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	3326      	adds	r3, #38	; 0x26
 80079bc:	2205      	movs	r2, #5
 80079be:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079c0:	4b28      	ldr	r3, [pc, #160]	; (8007a64 <USBD_CUSTOM_HID_Init+0x150>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80079d8:	2205      	movs	r2, #5
 80079da:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <USBD_CUSTOM_HID_Init+0x14c>)
 80079de:	7819      	ldrb	r1, [r3, #0]
 80079e0:	2302      	movs	r3, #2
 80079e2:	2203      	movs	r2, #3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f002 fa29 	bl	8009e3c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80079ea:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <USBD_CUSTOM_HID_Init+0x14c>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	3324      	adds	r3, #36	; 0x24
 8007a00:	2201      	movs	r2, #1
 8007a02:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007a04:	4b17      	ldr	r3, [pc, #92]	; (8007a64 <USBD_CUSTOM_HID_Init+0x150>)
 8007a06:	7819      	ldrb	r1, [r3, #0]
 8007a08:	2302      	movs	r3, #2
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 fa15 	bl	8009e3c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <USBD_CUSTOM_HID_Init+0x150>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	33b0      	adds	r3, #176	; 0xb0
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <USBD_CUSTOM_HID_Init+0x150>)
 8007a4a:	7819      	ldrb	r1, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	2302      	movs	r3, #2
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 fb6d 	bl	800a130 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000086 	.word	0x20000086
 8007a64:	20000087 	.word	0x20000087

08007a68 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007a74:	4b37      	ldr	r3, [pc, #220]	; (8007b54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f002 fa1c 	bl	8009eb8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007a80:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	3324      	adds	r3, #36	; 0x24
 8007a96:	2200      	movs	r2, #0
 8007a98:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	; (8007b54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 020f 	and.w	r2, r3, #15
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	440b      	add	r3, r1
 8007aae:	3326      	adds	r3, #38	; 0x26
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007ab4:	4b28      	ldr	r3, [pc, #160]	; (8007b58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 f9fc 	bl	8009eb8 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007ac0:	4b25      	ldr	r3, [pc, #148]	; (8007b58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ad8:	2200      	movs	r2, #0
 8007ada:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007adc:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007af4:	2200      	movs	r2, #0
 8007af6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32b0      	adds	r2, #176	; 0xb0
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01f      	beq.n	8007b4a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	33b0      	adds	r3, #176	; 0xb0
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	32b0      	adds	r2, #176	; 0xb0
 8007b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f002 fb93 	bl	800a258 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	32b0      	adds	r2, #176	; 0xb0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000086 	.word	0x20000086
 8007b58:	20000087 	.word	0x20000087

08007b5c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	32b0      	adds	r2, #176	; 0xb0
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b74:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e0f8      	b.n	8007d82 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d056      	beq.n	8007c4a <USBD_CUSTOM_HID_Setup+0xee>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	f040 80e8 	bne.w	8007d72 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	3b02      	subs	r3, #2
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	d846      	bhi.n	8007c3a <USBD_CUSTOM_HID_Setup+0xde>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <USBD_CUSTOM_HID_Setup+0x58>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007beb 	.word	0x08007beb
 8007bbc:	08007c3b 	.word	0x08007c3b
 8007bc0:	08007c3b 	.word	0x08007c3b
 8007bc4:	08007c3b 	.word	0x08007c3b
 8007bc8:	08007c3b 	.word	0x08007c3b
 8007bcc:	08007c3b 	.word	0x08007c3b
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007bfb 	.word	0x08007bfb
 8007bd8:	08007bdd 	.word	0x08007bdd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	885b      	ldrh	r3, [r3, #2]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]
          break;
 8007be8:	e02e      	b.n	8007c48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	3304      	adds	r3, #4
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fcf6 	bl	80095e4 <USBD_CtlSendData>
          break;
 8007bf8:	e026      	b.n	8007c48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	609a      	str	r2, [r3, #8]
          break;
 8007c0a:	e01d      	b.n	8007c48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2201      	movs	r2, #1
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 fce5 	bl	80095e4 <USBD_CtlSendData>
          break;
 8007c1a:	e015      	b.n	8007c48 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007c22:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	88db      	ldrh	r3, [r3, #6]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	bf28      	it	cs
 8007c2c:	2302      	movcs	r3, #2
 8007c2e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007c30:	461a      	mov	r2, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fd02 	bl	800963c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007c38:	e006      	b.n	8007c48 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fc60 	bl	8009502 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	bf00      	nop
      }
      break;
 8007c48:	e09a      	b.n	8007d80 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b0b      	cmp	r3, #11
 8007c50:	f200 8086 	bhi.w	8007d60 <USBD_CUSTOM_HID_Setup+0x204>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USBD_CUSTOM_HID_Setup+0x100>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007d6f 	.word	0x08007d6f
 8007c64:	08007d61 	.word	0x08007d61
 8007c68:	08007d61 	.word	0x08007d61
 8007c6c:	08007d61 	.word	0x08007d61
 8007c70:	08007d61 	.word	0x08007d61
 8007c74:	08007cb7 	.word	0x08007cb7
 8007c78:	08007d61 	.word	0x08007d61
 8007c7c:	08007d61 	.word	0x08007d61
 8007c80:	08007d61 	.word	0x08007d61
 8007c84:	08007d0f 	.word	0x08007d0f
 8007c88:	08007d39 	.word	0x08007d39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d107      	bne.n	8007ca8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c98:	f107 030e 	add.w	r3, r7, #14
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fc9f 	bl	80095e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ca6:	e063      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fc29 	bl	8009502 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb4:	e05c      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b22      	cmp	r3, #34	; 0x22
 8007cc0:	d110      	bne.n	8007ce4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b32      	cmp	r3, #50	; 0x32
 8007cc8:	bf28      	it	cs
 8007cca:	2332      	movcs	r3, #50	; 0x32
 8007ccc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33b0      	adds	r3, #176	; 0xb0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	61bb      	str	r3, [r7, #24]
 8007ce2:	e00d      	b.n	8007d00 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	885b      	ldrh	r3, [r3, #2]
 8007ce8:	0a1b      	lsrs	r3, r3, #8
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b21      	cmp	r3, #33	; 0x21
 8007cee:	d107      	bne.n	8007d00 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007cf0:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <USBD_CUSTOM_HID_Setup+0x230>)
 8007cf2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	88db      	ldrh	r3, [r3, #6]
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	bf28      	it	cs
 8007cfc:	2309      	movcs	r3, #9
 8007cfe:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d00:	8bfb      	ldrh	r3, [r7, #30]
 8007d02:	461a      	mov	r2, r3
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fc6c 	bl	80095e4 <USBD_CtlSendData>
          break;
 8007d0c:	e030      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d107      	bne.n	8007d2a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fc5e 	bl	80095e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d28:	e022      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fbe8 	bl	8009502 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	75fb      	strb	r3, [r7, #23]
          break;
 8007d36:	e01b      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d106      	bne.n	8007d52 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d50:	e00e      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fbd4 	bl	8009502 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d5e:	e007      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fbcd 	bl	8009502 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d6c:	e000      	b.n	8007d70 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8007d6e:	bf00      	nop
      }
      break;
 8007d70:	e006      	b.n	8007d80 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 fbc4 	bl	8009502 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7e:	bf00      	nop
  }
  return (uint8_t)ret;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000070 	.word	0x20000070

08007d90 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	32b0      	adds	r2, #176	; 0xb0
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e017      	b.n	8007de8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d110      	bne.n	8007de6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	7d1b      	ldrb	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <USBD_CUSTOM_HID_SendReport+0x60>)
 8007dd4:	7819      	ldrb	r1, [r3, #0]
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f002 f970 	bl	800a0c0 <USBD_LL_Transmit>
 8007de0:	e001      	b.n	8007de6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000086 	.word	0x20000086

08007df4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007dfc:	2181      	movs	r1, #129	; 0x81
 8007dfe:	4815      	ldr	r0, [pc, #84]	; (8007e54 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007e00:	f000 fd1d 	bl	800883e <USBD_GetEpDesc>
 8007e04:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007e06:	2101      	movs	r1, #1
 8007e08:	4812      	ldr	r0, [pc, #72]	; (8007e54 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007e0a:	f000 fd18 	bl	800883e <USBD_GetEpDesc>
 8007e0e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f042 0202 	orr.w	r2, r2, #2
 8007e1e:	711a      	strb	r2, [r3, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2205      	movs	r2, #5
 8007e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f042 0202 	orr.w	r2, r2, #2
 8007e38:	711a      	strb	r2, [r3, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2205      	movs	r2, #5
 8007e42:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2229      	movs	r2, #41	; 0x29
 8007e48:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007e4a:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	20000044 	.word	0x20000044

08007e58 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007e60:	2181      	movs	r1, #129	; 0x81
 8007e62:	4815      	ldr	r0, [pc, #84]	; (8007eb8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007e64:	f000 fceb 	bl	800883e <USBD_GetEpDesc>
 8007e68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4812      	ldr	r0, [pc, #72]	; (8007eb8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007e6e:	f000 fce6 	bl	800883e <USBD_GetEpDesc>
 8007e72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f042 0202 	orr.w	r2, r2, #2
 8007e82:	711a      	strb	r2, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2205      	movs	r2, #5
 8007e8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f042 0202 	orr.w	r2, r2, #2
 8007e9c:	711a      	strb	r2, [r3, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2229      	movs	r2, #41	; 0x29
 8007eac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007eae:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000044 	.word	0x20000044

08007ebc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007ec4:	2181      	movs	r1, #129	; 0x81
 8007ec6:	4815      	ldr	r0, [pc, #84]	; (8007f1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007ec8:	f000 fcb9 	bl	800883e <USBD_GetEpDesc>
 8007ecc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4812      	ldr	r0, [pc, #72]	; (8007f1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007ed2:	f000 fcb4 	bl	800883e <USBD_GetEpDesc>
 8007ed6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f042 0202 	orr.w	r2, r2, #2
 8007ee6:	711a      	strb	r2, [r3, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2205      	movs	r2, #5
 8007ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f042 0202 	orr.w	r2, r2, #2
 8007f00:	711a      	strb	r2, [r3, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2205      	movs	r2, #5
 8007f0a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2229      	movs	r2, #41	; 0x29
 8007f10:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007f12:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000044 	.word	0x20000044

08007f20 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32b0      	adds	r2, #176	; 0xb0
 8007f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	32b0      	adds	r2, #176	; 0xb0
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e017      	b.n	8007f9e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	32b0      	adds	r2, #176	; 0xb0
 8007f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	33b0      	adds	r3, #176	; 0xb0
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	7810      	ldrb	r0, [r2, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	7852      	ldrb	r2, [r2, #1]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	32b0      	adds	r2, #176	; 0xb0
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e00f      	b.n	8007fe6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	32b0      	adds	r2, #176	; 0xb0
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007fd8:	7819      	ldrb	r1, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	2302      	movs	r3, #2
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f002 f8a6 	bl	800a130 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000087 	.word	0x20000087

08007ff4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32b0      	adds	r2, #176	; 0xb0
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	e016      	b.n	8008044 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d111      	bne.n	8008042 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b0      	adds	r3, #176	; 0xb0
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	7810      	ldrb	r0, [r2, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	7852      	ldrb	r2, [r2, #1]
 8008038:	4611      	mov	r1, r2
 800803a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	220a      	movs	r2, #10
 8008058:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	2000007c 	.word	0x2000007c

0800806c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e009      	b.n	8008094 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	33b0      	adds	r3, #176	; 0xb0
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e01f      	b.n	80080f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	79fa      	ldrb	r2, [r7, #7]
 80080ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f001 fe27 	bl	8009d40 <USBD_LL_Init>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e025      	b.n	8008164 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32ae      	adds	r2, #174	; 0xae
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00f      	beq.n	8008154 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32ae      	adds	r2, #174	; 0xae
 800813e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	f107 020e 	add.w	r2, r7, #14
 8008148:	4610      	mov	r0, r2
 800814a:	4798      	blx	r3
 800814c:	4602      	mov	r2, r0
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 fe2f 	bl	8009dd8 <USBD_LL_Start>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	4611      	mov	r1, r2
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4611      	mov	r1, r2
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f938 	bl	800948e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	2b02      	cmp	r3, #2
 8008240:	d01a      	beq.n	8008278 <USBD_LL_SetupStage+0x72>
 8008242:	2b02      	cmp	r3, #2
 8008244:	d822      	bhi.n	800828c <USBD_LL_SetupStage+0x86>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <USBD_LL_SetupStage+0x4a>
 800824a:	2b01      	cmp	r3, #1
 800824c:	d00a      	beq.n	8008264 <USBD_LL_SetupStage+0x5e>
 800824e:	e01d      	b.n	800828c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fb65 	bl	8008928 <USBD_StdDevReq>
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
      break;
 8008262:	e020      	b.n	80082a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbcd 	bl	8008a0c <USBD_StdItfReq>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
      break;
 8008276:	e016      	b.n	80082a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc2f 	bl	8008ae4 <USBD_StdEPReq>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
      break;
 800828a:	e00c      	b.n	80082a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008296:	b2db      	uxtb	r3, r3
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 fe42 	bl	8009f24 <USBD_LL_StallEP>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
      break;
 80082a4:	bf00      	nop
  }

  return ret;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	460b      	mov	r3, r1
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d16e      	bne.n	80083a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	f040 8098 	bne.w	800840c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d913      	bls.n	8008310 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	1ad2      	subs	r2, r2, r3
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	4293      	cmp	r3, r2
 8008300:	bf28      	it	cs
 8008302:	4613      	movcs	r3, r2
 8008304:	461a      	mov	r2, r3
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f001 f9b4 	bl	8009676 <USBD_CtlContinueRx>
 800830e:	e07d      	b.n	800840c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2b02      	cmp	r3, #2
 800831c:	d014      	beq.n	8008348 <USBD_LL_DataOutStage+0x98>
 800831e:	2b02      	cmp	r3, #2
 8008320:	d81d      	bhi.n	800835e <USBD_LL_DataOutStage+0xae>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <USBD_LL_DataOutStage+0x7c>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d003      	beq.n	8008332 <USBD_LL_DataOutStage+0x82>
 800832a:	e018      	b.n	800835e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	75bb      	strb	r3, [r7, #22]
            break;
 8008330:	e018      	b.n	8008364 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4619      	mov	r1, r3
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fa64 	bl	800880a <USBD_CoreFindIF>
 8008342:	4603      	mov	r3, r0
 8008344:	75bb      	strb	r3, [r7, #22]
            break;
 8008346:	e00d      	b.n	8008364 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800834e:	b2db      	uxtb	r3, r3
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fa66 	bl	8008824 <USBD_CoreFindEP>
 8008358:	4603      	mov	r3, r0
 800835a:	75bb      	strb	r3, [r7, #22]
            break;
 800835c:	e002      	b.n	8008364 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	75bb      	strb	r3, [r7, #22]
            break;
 8008362:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008364:	7dbb      	ldrb	r3, [r7, #22]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d119      	bne.n	800839e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b03      	cmp	r3, #3
 8008374:	d113      	bne.n	800839e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008376:	7dba      	ldrb	r2, [r7, #22]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	32ae      	adds	r2, #174	; 0xae
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008386:	7dba      	ldrb	r2, [r7, #22]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800838e:	7dba      	ldrb	r2, [r7, #22]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	32ae      	adds	r2, #174	; 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f001 f97a 	bl	8009698 <USBD_CtlSendStatus>
 80083a4:	e032      	b.n	800840c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4619      	mov	r1, r3
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fa37 	bl	8008824 <USBD_CoreFindEP>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ba:	7dbb      	ldrb	r3, [r7, #22]
 80083bc:	2bff      	cmp	r3, #255	; 0xff
 80083be:	d025      	beq.n	800840c <USBD_LL_DataOutStage+0x15c>
 80083c0:	7dbb      	ldrb	r3, [r7, #22]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d122      	bne.n	800840c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d117      	bne.n	8008402 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083d2:	7dba      	ldrb	r2, [r7, #22]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	32ae      	adds	r2, #174	; 0xae
 80083d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083e2:	7dba      	ldrb	r2, [r7, #22]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083ea:	7dba      	ldrb	r2, [r7, #22]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	32ae      	adds	r2, #174	; 0xae
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	7afa      	ldrb	r2, [r7, #11]
 80083f8:	4611      	mov	r1, r2
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	4798      	blx	r3
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	e000      	b.n	800840e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	460b      	mov	r3, r1
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d16f      	bne.n	800850a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3314      	adds	r3, #20
 800842e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008436:	2b02      	cmp	r3, #2
 8008438:	d15a      	bne.n	80084f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d914      	bls.n	8008470 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 f8dc 	bl	800961a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fe61 	bl	800a130 <USBD_LL_PrepareReceive>
 800846e:	e03f      	b.n	80084f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	429a      	cmp	r2, r3
 800847a:	d11c      	bne.n	80084b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008484:	429a      	cmp	r2, r3
 8008486:	d316      	bcc.n	80084b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008492:	429a      	cmp	r2, r3
 8008494:	d20f      	bcs.n	80084b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 f8bd 	bl	800961a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a8:	2300      	movs	r3, #0
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f001 fe3e 	bl	800a130 <USBD_LL_PrepareReceive>
 80084b4:	e01c      	b.n	80084f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d10f      	bne.n	80084e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084e2:	2180      	movs	r1, #128	; 0x80
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f001 fd1d 	bl	8009f24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 f8e7 	bl	80096be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d03a      	beq.n	8008570 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff fe42 	bl	8008184 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008508:	e032      	b.n	8008570 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f985 	bl	8008824 <USBD_CoreFindEP>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2bff      	cmp	r3, #255	; 0xff
 8008522:	d025      	beq.n	8008570 <USBD_LL_DataInStage+0x15a>
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d122      	bne.n	8008570 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d11c      	bne.n	8008570 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008536:	7dfa      	ldrb	r2, [r7, #23]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	32ae      	adds	r2, #174	; 0xae
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d014      	beq.n	8008570 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008546:	7dfa      	ldrb	r2, [r7, #23]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800854e:	7dfa      	ldrb	r2, [r7, #23]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	32ae      	adds	r2, #174	; 0xae
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	7afa      	ldrb	r2, [r7, #11]
 800855c:	4611      	mov	r1, r2
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	4798      	blx	r3
 8008562:	4603      	mov	r3, r0
 8008564:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008566:	7dbb      	ldrb	r3, [r7, #22]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800856c:	7dbb      	ldrb	r3, [r7, #22]
 800856e:	e000      	b.n	8008572 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d014      	beq.n	80085e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6852      	ldr	r2, [r2, #4]
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	4611      	mov	r1, r2
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085dc:	2303      	movs	r3, #3
 80085de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fc28 	bl	8009e3c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2240      	movs	r2, #64	; 0x40
 80085f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085fc:	2340      	movs	r3, #64	; 0x40
 80085fe:	2200      	movs	r2, #0
 8008600:	2180      	movs	r1, #128	; 0x80
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 fc1a 	bl	8009e3c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2240      	movs	r2, #64	; 0x40
 8008612:	621a      	str	r2, [r3, #32]

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b04      	cmp	r3, #4
 8008650:	d006      	beq.n	8008660 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	b2da      	uxtb	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2204      	movs	r2, #4
 8008664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b04      	cmp	r3, #4
 8008688:	d106      	bne.n	8008698 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008690:	b2da      	uxtb	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d110      	bne.n	80086dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	32ae      	adds	r2, #174	; 0xae
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	e01c      	b.n	8008742 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b03      	cmp	r3, #3
 8008712:	d115      	bne.n	8008740 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	32ae      	adds	r2, #174	; 0xae
 800871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32ae      	adds	r2, #174	; 0xae
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	4611      	mov	r1, r2
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	32ae      	adds	r2, #174	; 0xae
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	e01c      	b.n	80087a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b03      	cmp	r3, #3
 8008776:	d115      	bne.n	80087a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32ae      	adds	r2, #174	; 0xae
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	; 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	4611      	mov	r1, r2
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6852      	ldr	r2, [r2, #4]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	4611      	mov	r1, r2
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087fc:	2303      	movs	r3, #3
 80087fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008816:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008830:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	429a      	cmp	r2, r3
 8008864:	d920      	bls.n	80088a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800886e:	e013      	b.n	8008898 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008870:	f107 030a 	add.w	r3, r7, #10
 8008874:	4619      	mov	r1, r3
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f000 f81b 	bl	80088b2 <USBD_GetNextDesc>
 800887c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b05      	cmp	r3, #5
 8008884:	d108      	bne.n	8008898 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	789b      	ldrb	r3, [r3, #2]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	429a      	cmp	r2, r3
 8008892:	d008      	beq.n	80088a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	885b      	ldrh	r3, [r3, #2]
 800889c:	b29a      	uxth	r2, r3
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d8e5      	bhi.n	8008870 <USBD_GetEpDesc+0x32>
 80088a4:	e000      	b.n	80088a8 <USBD_GetEpDesc+0x6a>
          break;
 80088a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088a8:	693b      	ldr	r3, [r7, #16]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	881a      	ldrh	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4413      	add	r3, r2
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	3301      	adds	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800890a:	8a3b      	ldrh	r3, [r7, #16]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	b21a      	sxth	r2, r3
 8008910:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008914:	4313      	orrs	r3, r2
 8008916:	b21b      	sxth	r3, r3
 8008918:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800891a:	89fb      	ldrh	r3, [r7, #14]
}
 800891c:	4618      	mov	r0, r3
 800891e:	371c      	adds	r7, #28
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800893e:	2b40      	cmp	r3, #64	; 0x40
 8008940:	d005      	beq.n	800894e <USBD_StdDevReq+0x26>
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d857      	bhi.n	80089f6 <USBD_StdDevReq+0xce>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00f      	beq.n	800896a <USBD_StdDevReq+0x42>
 800894a:	2b20      	cmp	r3, #32
 800894c:	d153      	bne.n	80089f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	32ae      	adds	r2, #174	; 0xae
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
      break;
 8008968:	e04a      	b.n	8008a00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	2b09      	cmp	r3, #9
 8008970:	d83b      	bhi.n	80089ea <USBD_StdDevReq+0xc2>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_StdDevReq+0x50>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	080089cd 	.word	0x080089cd
 800897c:	080089e1 	.word	0x080089e1
 8008980:	080089eb 	.word	0x080089eb
 8008984:	080089d7 	.word	0x080089d7
 8008988:	080089eb 	.word	0x080089eb
 800898c:	080089ab 	.word	0x080089ab
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089eb 	.word	0x080089eb
 8008998:	080089c3 	.word	0x080089c3
 800899c:	080089b5 	.word	0x080089b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa3c 	bl	8008e20 <USBD_GetDescriptor>
          break;
 80089a8:	e024      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fbcb 	bl	8009148 <USBD_SetAddress>
          break;
 80089b2:	e01f      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fc0a 	bl	80091d0 <USBD_SetConfig>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
          break;
 80089c0:	e018      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fcad 	bl	8009324 <USBD_GetConfig>
          break;
 80089ca:	e013      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fcde 	bl	8009390 <USBD_GetStatus>
          break;
 80089d4:	e00e      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fd0d 	bl	80093f8 <USBD_SetFeature>
          break;
 80089de:	e009      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fd31 	bl	800944a <USBD_ClrFeature>
          break;
 80089e8:	e004      	b.n	80089f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fd88 	bl	8009502 <USBD_CtlError>
          break;
 80089f2:	bf00      	nop
      }
      break;
 80089f4:	e004      	b.n	8008a00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fd82 	bl	8009502 <USBD_CtlError>
      break;
 80089fe:	bf00      	nop
  }

  return ret;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop

08008a0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d005      	beq.n	8008a32 <USBD_StdItfReq+0x26>
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d852      	bhi.n	8008ad0 <USBD_StdItfReq+0xc4>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <USBD_StdItfReq+0x26>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d14e      	bne.n	8008ad0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d840      	bhi.n	8008ac2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	889b      	ldrh	r3, [r3, #4]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d836      	bhi.n	8008ab8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	889b      	ldrh	r3, [r3, #4]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fed9 	bl	800880a <USBD_CoreFindIF>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2bff      	cmp	r3, #255	; 0xff
 8008a60:	d01d      	beq.n	8008a9e <USBD_StdItfReq+0x92>
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11a      	bne.n	8008a9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a68:	7bba      	ldrb	r2, [r7, #14]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	32ae      	adds	r2, #174	; 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00f      	beq.n	8008a98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a78:	7bba      	ldrb	r2, [r7, #14]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a80:	7bba      	ldrb	r2, [r7, #14]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	32ae      	adds	r2, #174	; 0xae
 8008a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a96:	e004      	b.n	8008aa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a9c:	e001      	b.n	8008aa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d110      	bne.n	8008acc <USBD_StdItfReq+0xc0>
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10d      	bne.n	8008acc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fdf1 	bl	8009698 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ab6:	e009      	b.n	8008acc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fd21 	bl	8009502 <USBD_CtlError>
          break;
 8008ac0:	e004      	b.n	8008acc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fd1c 	bl	8009502 <USBD_CtlError>
          break;
 8008aca:	e000      	b.n	8008ace <USBD_StdItfReq+0xc2>
          break;
 8008acc:	bf00      	nop
      }
      break;
 8008ace:	e004      	b.n	8008ada <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fd15 	bl	8009502 <USBD_CtlError>
      break;
 8008ad8:	bf00      	nop
  }

  return ret;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	889b      	ldrh	r3, [r3, #4]
 8008af6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b00:	2b40      	cmp	r3, #64	; 0x40
 8008b02:	d007      	beq.n	8008b14 <USBD_StdEPReq+0x30>
 8008b04:	2b40      	cmp	r3, #64	; 0x40
 8008b06:	f200 817f 	bhi.w	8008e08 <USBD_StdEPReq+0x324>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02a      	beq.n	8008b64 <USBD_StdEPReq+0x80>
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	f040 817a 	bne.w	8008e08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff fe83 	bl	8008824 <USBD_CoreFindEP>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b22:	7b7b      	ldrb	r3, [r7, #13]
 8008b24:	2bff      	cmp	r3, #255	; 0xff
 8008b26:	f000 8174 	beq.w	8008e12 <USBD_StdEPReq+0x32e>
 8008b2a:	7b7b      	ldrb	r3, [r7, #13]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 8170 	bne.w	8008e12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b32:	7b7a      	ldrb	r2, [r7, #13]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b3a:	7b7a      	ldrb	r2, [r7, #13]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32ae      	adds	r2, #174	; 0xae
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8163 	beq.w	8008e12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b4c:	7b7a      	ldrb	r2, [r7, #13]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32ae      	adds	r2, #174	; 0xae
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b62:	e156      	b.n	8008e12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d008      	beq.n	8008b7e <USBD_StdEPReq+0x9a>
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	f300 8145 	bgt.w	8008dfc <USBD_StdEPReq+0x318>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 809b 	beq.w	8008cae <USBD_StdEPReq+0x1ca>
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d03c      	beq.n	8008bf6 <USBD_StdEPReq+0x112>
 8008b7c:	e13e      	b.n	8008dfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d002      	beq.n	8008b90 <USBD_StdEPReq+0xac>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d016      	beq.n	8008bbc <USBD_StdEPReq+0xd8>
 8008b8e:	e02c      	b.n	8008bea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_StdEPReq+0xce>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 f9bf 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba6:	2180      	movs	r1, #128	; 0x80
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f9bb 	bl	8009f24 <USBD_LL_StallEP>
 8008bae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb0:	e020      	b.n	8008bf4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fca4 	bl	8009502 <USBD_CtlError>
              break;
 8008bba:	e01b      	b.n	8008bf4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10e      	bne.n	8008be2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <USBD_StdEPReq+0xfe>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	; 0x80
 8008bce:	d008      	beq.n	8008be2 <USBD_StdEPReq+0xfe>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	88db      	ldrh	r3, [r3, #6]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f9a1 	bl	8009f24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fd58 	bl	8009698 <USBD_CtlSendStatus>

              break;
 8008be8:	e004      	b.n	8008bf4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fc88 	bl	8009502 <USBD_CtlError>
              break;
 8008bf2:	bf00      	nop
          }
          break;
 8008bf4:	e107      	b.n	8008e06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d002      	beq.n	8008c08 <USBD_StdEPReq+0x124>
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d016      	beq.n	8008c34 <USBD_StdEPReq+0x150>
 8008c06:	e04b      	b.n	8008ca0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <USBD_StdEPReq+0x146>
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b80      	cmp	r3, #128	; 0x80
 8008c12:	d00a      	beq.n	8008c2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f983 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f97f 	bl	8009f24 <USBD_LL_StallEP>
 8008c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c28:	e040      	b.n	8008cac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc68 	bl	8009502 <USBD_CtlError>
              break;
 8008c32:	e03b      	b.n	8008cac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	885b      	ldrh	r3, [r3, #2]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d136      	bne.n	8008caa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f9a0 	bl	8009f90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fd21 	bl	8009698 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff fde2 	bl	8008824 <USBD_CoreFindEP>
 8008c60:	4603      	mov	r3, r0
 8008c62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c64:	7b7b      	ldrb	r3, [r7, #13]
 8008c66:	2bff      	cmp	r3, #255	; 0xff
 8008c68:	d01f      	beq.n	8008caa <USBD_StdEPReq+0x1c6>
 8008c6a:	7b7b      	ldrb	r3, [r7, #13]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11c      	bne.n	8008caa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c70:	7b7a      	ldrb	r2, [r7, #13]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c78:	7b7a      	ldrb	r2, [r7, #13]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32ae      	adds	r2, #174	; 0xae
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c88:	7b7a      	ldrb	r2, [r7, #13]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	32ae      	adds	r2, #174	; 0xae
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c9e:	e004      	b.n	8008caa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fc2d 	bl	8009502 <USBD_CtlError>
              break;
 8008ca8:	e000      	b.n	8008cac <USBD_StdEPReq+0x1c8>
              break;
 8008caa:	bf00      	nop
          }
          break;
 8008cac:	e0ab      	b.n	8008e06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d002      	beq.n	8008cc0 <USBD_StdEPReq+0x1dc>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d032      	beq.n	8008d24 <USBD_StdEPReq+0x240>
 8008cbe:	e097      	b.n	8008df0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <USBD_StdEPReq+0x1f2>
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d004      	beq.n	8008cd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fc17 	bl	8009502 <USBD_CtlError>
                break;
 8008cd4:	e091      	b.n	8008dfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da0b      	bge.n	8008cf6 <USBD_StdEPReq+0x212>
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	3310      	adds	r3, #16
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	e00b      	b.n	8008d0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc61 	bl	80095e4 <USBD_CtlSendData>
              break;
 8008d22:	e06a      	b.n	8008dfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	da11      	bge.n	8008d50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	f003 020f 	and.w	r2, r3, #15
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d117      	bne.n	8008d76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fbda 	bl	8009502 <USBD_CtlError>
                  break;
 8008d4e:	e054      	b.n	8008dfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fbc7 	bl	8009502 <USBD_CtlError>
                  break;
 8008d74:	e041      	b.n	8008dfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da0b      	bge.n	8008d96 <USBD_StdEPReq+0x2b2>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	3310      	adds	r3, #16
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	4413      	add	r3, r2
 8008d92:	3304      	adds	r3, #4
 8008d94:	e00b      	b.n	8008dae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	3304      	adds	r3, #4
 8008dae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <USBD_StdEPReq+0x2d8>
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b80      	cmp	r3, #128	; 0x80
 8008dba:	d103      	bne.n	8008dc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e00e      	b.n	8008de2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f917 	bl	8009ffc <USBD_LL_IsStallEP>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2202      	movs	r2, #2
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fbfb 	bl	80095e4 <USBD_CtlSendData>
              break;
 8008dee:	e004      	b.n	8008dfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb85 	bl	8009502 <USBD_CtlError>
              break;
 8008df8:	bf00      	nop
          }
          break;
 8008dfa:	e004      	b.n	8008e06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fb7f 	bl	8009502 <USBD_CtlError>
          break;
 8008e04:	bf00      	nop
      }
      break;
 8008e06:	e005      	b.n	8008e14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fb79 	bl	8009502 <USBD_CtlError>
      break;
 8008e10:	e000      	b.n	8008e14 <USBD_StdEPReq+0x330>
      break;
 8008e12:	bf00      	nop
  }

  return ret;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b0e      	cmp	r3, #14
 8008e42:	f200 8152 	bhi.w	80090ea <USBD_GetDescriptor+0x2ca>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBD_GetDescriptor+0x2c>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008ebd 	.word	0x08008ebd
 8008e50:	08008ed5 	.word	0x08008ed5
 8008e54:	08008f15 	.word	0x08008f15
 8008e58:	080090eb 	.word	0x080090eb
 8008e5c:	080090eb 	.word	0x080090eb
 8008e60:	0800908b 	.word	0x0800908b
 8008e64:	080090b7 	.word	0x080090b7
 8008e68:	080090eb 	.word	0x080090eb
 8008e6c:	080090eb 	.word	0x080090eb
 8008e70:	080090eb 	.word	0x080090eb
 8008e74:	080090eb 	.word	0x080090eb
 8008e78:	080090eb 	.word	0x080090eb
 8008e7c:	080090eb 	.word	0x080090eb
 8008e80:	080090eb 	.word	0x080090eb
 8008e84:	08008e89 	.word	0x08008e89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7c12      	ldrb	r2, [r2, #16]
 8008ea0:	f107 0108 	add.w	r1, r7, #8
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eaa:	e126      	b.n	80090fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fb27 	bl	8009502 <USBD_CtlError>
        err++;
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	72fb      	strb	r3, [r7, #11]
      break;
 8008eba:	e11e      	b.n	80090fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	7c12      	ldrb	r2, [r2, #16]
 8008ec8:	f107 0108 	add.w	r1, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
      break;
 8008ed2:	e112      	b.n	80090fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7c1b      	ldrb	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10d      	bne.n	8008ef8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f107 0208 	add.w	r2, r7, #8
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
 8008eec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ef6:	e100      	b.n	80090fa <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	f107 0208 	add.w	r2, r7, #8
 8008f04:	4610      	mov	r0, r2
 8008f06:	4798      	blx	r3
 8008f08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	2202      	movs	r2, #2
 8008f10:	701a      	strb	r2, [r3, #0]
      break;
 8008f12:	e0f2      	b.n	80090fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	885b      	ldrh	r3, [r3, #2]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	f200 80ac 	bhi.w	8009078 <USBD_GetDescriptor+0x258>
 8008f20:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <USBD_GetDescriptor+0x108>)
 8008f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f26:	bf00      	nop
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f75 	.word	0x08008f75
 8008f30:	08008fa9 	.word	0x08008fa9
 8008f34:	08008fdd 	.word	0x08008fdd
 8008f38:	08009011 	.word	0x08009011
 8008f3c:	08009045 	.word	0x08009045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7c12      	ldrb	r2, [r2, #16]
 8008f58:	f107 0108 	add.w	r1, r7, #8
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4798      	blx	r3
 8008f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f62:	e091      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 facb 	bl	8009502 <USBD_CtlError>
            err++;
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	72fb      	strb	r3, [r7, #11]
          break;
 8008f72:	e089      	b.n	8009088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	7c12      	ldrb	r2, [r2, #16]
 8008f8c:	f107 0108 	add.w	r1, r7, #8
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f96:	e077      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fab1 	bl	8009502 <USBD_CtlError>
            err++;
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fa6:	e06f      	b.n	8009088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00b      	beq.n	8008fcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	7c12      	ldrb	r2, [r2, #16]
 8008fc0:	f107 0108 	add.w	r1, r7, #8
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4798      	blx	r3
 8008fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fca:	e05d      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa97 	bl	8009502 <USBD_CtlError>
            err++;
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fda:	e055      	b.n	8009088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	7c12      	ldrb	r2, [r2, #16]
 8008ff4:	f107 0108 	add.w	r1, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffe:	e043      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa7d 	bl	8009502 <USBD_CtlError>
            err++;
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	3301      	adds	r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
          break;
 800900e:	e03b      	b.n	8009088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	7c12      	ldrb	r2, [r2, #16]
 8009028:	f107 0108 	add.w	r1, r7, #8
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
 8009030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009032:	e029      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa63 	bl	8009502 <USBD_CtlError>
            err++;
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	3301      	adds	r3, #1
 8009040:	72fb      	strb	r3, [r7, #11]
          break;
 8009042:	e021      	b.n	8009088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009066:	e00f      	b.n	8009088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa49 	bl	8009502 <USBD_CtlError>
            err++;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	3301      	adds	r3, #1
 8009074:	72fb      	strb	r3, [r7, #11]
          break;
 8009076:	e007      	b.n	8009088 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa41 	bl	8009502 <USBD_CtlError>
          err++;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	3301      	adds	r3, #1
 8009084:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009086:	bf00      	nop
      }
      break;
 8009088:	e037      	b.n	80090fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7c1b      	ldrb	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909a:	f107 0208 	add.w	r2, r7, #8
 800909e:	4610      	mov	r0, r2
 80090a0:	4798      	blx	r3
 80090a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a4:	e029      	b.n	80090fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fa2a 	bl	8009502 <USBD_CtlError>
        err++;
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	3301      	adds	r3, #1
 80090b2:	72fb      	strb	r3, [r7, #11]
      break;
 80090b4:	e021      	b.n	80090fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7c1b      	ldrb	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10d      	bne.n	80090da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f107 0208 	add.w	r2, r7, #8
 80090ca:	4610      	mov	r0, r2
 80090cc:	4798      	blx	r3
 80090ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	2207      	movs	r2, #7
 80090d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090d8:	e00f      	b.n	80090fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fa10 	bl	8009502 <USBD_CtlError>
        err++;
 80090e2:	7afb      	ldrb	r3, [r7, #11]
 80090e4:	3301      	adds	r3, #1
 80090e6:	72fb      	strb	r3, [r7, #11]
      break;
 80090e8:	e007      	b.n	80090fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fa08 	bl	8009502 <USBD_CtlError>
      err++;
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	3301      	adds	r3, #1
 80090f6:	72fb      	strb	r3, [r7, #11]
      break;
 80090f8:	bf00      	nop
  }

  if (err != 0U)
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d11e      	bne.n	800913e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	88db      	ldrh	r3, [r3, #6]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d016      	beq.n	8009136 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009108:	893b      	ldrh	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00e      	beq.n	800912c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	88da      	ldrh	r2, [r3, #6]
 8009112:	893b      	ldrh	r3, [r7, #8]
 8009114:	4293      	cmp	r3, r2
 8009116:	bf28      	it	cs
 8009118:	4613      	movcs	r3, r2
 800911a:	b29b      	uxth	r3, r3
 800911c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800911e:	893b      	ldrh	r3, [r7, #8]
 8009120:	461a      	mov	r2, r3
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fa5d 	bl	80095e4 <USBD_CtlSendData>
 800912a:	e009      	b.n	8009140 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9e7 	bl	8009502 <USBD_CtlError>
 8009134:	e004      	b.n	8009140 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 faae 	bl	8009698 <USBD_CtlSendStatus>
 800913c:	e000      	b.n	8009140 <USBD_GetDescriptor+0x320>
    return;
 800913e:	bf00      	nop
  }
}
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	889b      	ldrh	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d131      	bne.n	80091be <USBD_SetAddress+0x76>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	88db      	ldrh	r3, [r3, #6]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d12d      	bne.n	80091be <USBD_SetAddress+0x76>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	2b7f      	cmp	r3, #127	; 0x7f
 8009168:	d829      	bhi.n	80091be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009174:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b03      	cmp	r3, #3
 8009180:	d104      	bne.n	800918c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9bc 	bl	8009502 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	e01d      	b.n	80091c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7bfa      	ldrb	r2, [r7, #15]
 8009190:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 ff5b 	bl	800a054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa7a 	bl	8009698 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2202      	movs	r2, #2
 80091ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b2:	e009      	b.n	80091c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091bc:	e004      	b.n	80091c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f99e 	bl	8009502 <USBD_CtlError>
  }
}
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	885b      	ldrh	r3, [r3, #2]
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	4b4e      	ldr	r3, [pc, #312]	; (8009320 <USBD_SetConfig+0x150>)
 80091e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091e8:	4b4d      	ldr	r3, [pc, #308]	; (8009320 <USBD_SetConfig+0x150>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d905      	bls.n	80091fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f985 	bl	8009502 <USBD_CtlError>
    return USBD_FAIL;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e08c      	b.n	8009316 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d002      	beq.n	800920e <USBD_SetConfig+0x3e>
 8009208:	2b03      	cmp	r3, #3
 800920a:	d029      	beq.n	8009260 <USBD_SetConfig+0x90>
 800920c:	e075      	b.n	80092fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800920e:	4b44      	ldr	r3, [pc, #272]	; (8009320 <USBD_SetConfig+0x150>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d020      	beq.n	8009258 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009216:	4b42      	ldr	r3, [pc, #264]	; (8009320 <USBD_SetConfig+0x150>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009220:	4b3f      	ldr	r3, [pc, #252]	; (8009320 <USBD_SetConfig+0x150>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fe ffb7 	bl	800819a <USBD_SetClassConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d008      	beq.n	8009248 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f962 	bl	8009502 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009246:	e065      	b.n	8009314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa25 	bl	8009698 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2203      	movs	r2, #3
 8009252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009256:	e05d      	b.n	8009314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fa1d 	bl	8009698 <USBD_CtlSendStatus>
      break;
 800925e:	e059      	b.n	8009314 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009260:	4b2f      	ldr	r3, [pc, #188]	; (8009320 <USBD_SetConfig+0x150>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d112      	bne.n	800928e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009270:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <USBD_SetConfig+0x150>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800927a:	4b29      	ldr	r3, [pc, #164]	; (8009320 <USBD_SetConfig+0x150>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7fe ffa6 	bl	80081d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa06 	bl	8009698 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800928c:	e042      	b.n	8009314 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800928e:	4b24      	ldr	r3, [pc, #144]	; (8009320 <USBD_SetConfig+0x150>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d02a      	beq.n	80092f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7fe ff94 	bl	80081d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092aa:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <USBD_SetConfig+0x150>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092b4:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <USBD_SetConfig+0x150>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe ff6d 	bl	800819a <USBD_SetClassConfig>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00f      	beq.n	80092ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f918 	bl	8009502 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fe ff79 	bl	80081d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092e8:	e014      	b.n	8009314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f9d4 	bl	8009698 <USBD_CtlSendStatus>
      break;
 80092f0:	e010      	b.n	8009314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f9d0 	bl	8009698 <USBD_CtlSendStatus>
      break;
 80092f8:	e00c      	b.n	8009314 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f900 	bl	8009502 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009302:	4b07      	ldr	r3, [pc, #28]	; (8009320 <USBD_SetConfig+0x150>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe ff62 	bl	80081d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	73fb      	strb	r3, [r7, #15]
      break;
 8009312:	bf00      	nop
  }

  return ret;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200003b8 	.word	0x200003b8

08009324 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	88db      	ldrh	r3, [r3, #6]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d004      	beq.n	8009340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f8e2 	bl	8009502 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800933e:	e023      	b.n	8009388 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b02      	cmp	r3, #2
 800934a:	dc02      	bgt.n	8009352 <USBD_GetConfig+0x2e>
 800934c:	2b00      	cmp	r3, #0
 800934e:	dc03      	bgt.n	8009358 <USBD_GetConfig+0x34>
 8009350:	e015      	b.n	800937e <USBD_GetConfig+0x5a>
 8009352:	2b03      	cmp	r3, #3
 8009354:	d00b      	beq.n	800936e <USBD_GetConfig+0x4a>
 8009356:	e012      	b.n	800937e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3308      	adds	r3, #8
 8009362:	2201      	movs	r2, #1
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f93c 	bl	80095e4 <USBD_CtlSendData>
        break;
 800936c:	e00c      	b.n	8009388 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3304      	adds	r3, #4
 8009372:	2201      	movs	r2, #1
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f934 	bl	80095e4 <USBD_CtlSendData>
        break;
 800937c:	e004      	b.n	8009388 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8be 	bl	8009502 <USBD_CtlError>
        break;
 8009386:	bf00      	nop
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	3b01      	subs	r3, #1
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d81e      	bhi.n	80093e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d004      	beq.n	80093ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8a5 	bl	8009502 <USBD_CtlError>
        break;
 80093b8:	e01a      	b.n	80093f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f043 0202 	orr.w	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	330c      	adds	r3, #12
 80093da:	2202      	movs	r2, #2
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f900 	bl	80095e4 <USBD_CtlSendData>
      break;
 80093e4:	e004      	b.n	80093f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f88a 	bl	8009502 <USBD_CtlError>
      break;
 80093ee:	bf00      	nop
  }
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d107      	bne.n	800941a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f940 	bl	8009698 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009418:	e013      	b.n	8009442 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	885b      	ldrh	r3, [r3, #2]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d10b      	bne.n	800943a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	889b      	ldrh	r3, [r3, #4]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	b29b      	uxth	r3, r3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f930 	bl	8009698 <USBD_CtlSendStatus>
}
 8009438:	e003      	b.n	8009442 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f860 	bl	8009502 <USBD_CtlError>
}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	b2db      	uxtb	r3, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	2b02      	cmp	r3, #2
 8009460:	d80b      	bhi.n	800947a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	885b      	ldrh	r3, [r3, #2]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10c      	bne.n	8009484 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f910 	bl	8009698 <USBD_CtlSendStatus>
      }
      break;
 8009478:	e004      	b.n	8009484 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f840 	bl	8009502 <USBD_CtlError>
      break;
 8009482:	e000      	b.n	8009486 <USBD_ClrFeature+0x3c>
      break;
 8009484:	bf00      	nop
  }
}
 8009486:	bf00      	nop
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fa17 	bl	80088ec <SWAPBYTE>
 80094be:	4603      	mov	r3, r0
 80094c0:	461a      	mov	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fa0a 	bl	80088ec <SWAPBYTE>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff f9fd 	bl	80088ec <SWAPBYTE>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	80da      	strh	r2, [r3, #6]
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800950c:	2180      	movs	r1, #128	; 0x80
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd08 	bl	8009f24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009514:	2100      	movs	r1, #0
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fd04 	bl	8009f24 <USBD_LL_StallEP>
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d036      	beq.n	80095a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800953e:	6938      	ldr	r0, [r7, #16]
 8009540:	f000 f836 	bl	80095b0 <USBD_GetLen>
 8009544:	4603      	mov	r3, r0
 8009546:	3301      	adds	r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	4413      	add	r3, r2
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	701a      	strb	r2, [r3, #0]
  idx++;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	3301      	adds	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	4413      	add	r3, r2
 800956a:	2203      	movs	r2, #3
 800956c:	701a      	strb	r2, [r3, #0]
  idx++;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	3301      	adds	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009574:	e013      	b.n	800959e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	4413      	add	r3, r2
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	7812      	ldrb	r2, [r2, #0]
 8009580:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	3301      	adds	r3, #1
 8009586:	613b      	str	r3, [r7, #16]
    idx++;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	3301      	adds	r3, #1
 800958c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4413      	add	r3, r2
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
    idx++;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	3301      	adds	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e7      	bne.n	8009576 <USBD_GetString+0x52>
 80095a6:	e000      	b.n	80095aa <USBD_GetString+0x86>
    return;
 80095a8:	bf00      	nop
  }
}
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095c0:	e005      	b.n	80095ce <USBD_GetLen+0x1e>
  {
    len++;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	3301      	adds	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f5      	bne.n	80095c2 <USBD_GetLen+0x12>
  }

  return len;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fd58 	bl	800a0c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fd47 	bl	800a0c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2203      	movs	r2, #3
 800964c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	2100      	movs	r1, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fd62 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	2100      	movs	r1, #0
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 fd51 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2204      	movs	r2, #4
 80096a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096a8:	2300      	movs	r3, #0
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fd06 	bl	800a0c0 <USBD_LL_Transmit>

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2205      	movs	r2, #5
 80096ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ce:	2300      	movs	r3, #0
 80096d0:	2200      	movs	r2, #0
 80096d2:	2100      	movs	r1, #0
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fd2b 	bl	800a130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096e8:	2200      	movs	r2, #0
 80096ea:	4912      	ldr	r1, [pc, #72]	; (8009734 <MX_USB_DEVICE_Init+0x50>)
 80096ec:	4812      	ldr	r0, [pc, #72]	; (8009738 <MX_USB_DEVICE_Init+0x54>)
 80096ee:	f7fe fcd7 	bl	80080a0 <USBD_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096f8:	f7f7 fdea 	bl	80012d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80096fc:	490f      	ldr	r1, [pc, #60]	; (800973c <MX_USB_DEVICE_Init+0x58>)
 80096fe:	480e      	ldr	r0, [pc, #56]	; (8009738 <MX_USB_DEVICE_Init+0x54>)
 8009700:	f7fe fcfe 	bl	8008100 <USBD_RegisterClass>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800970a:	f7f7 fde1 	bl	80012d0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800970e:	490c      	ldr	r1, [pc, #48]	; (8009740 <MX_USB_DEVICE_Init+0x5c>)
 8009710:	4809      	ldr	r0, [pc, #36]	; (8009738 <MX_USB_DEVICE_Init+0x54>)
 8009712:	f7fe fcab 	bl	800806c <USBD_CUSTOM_HID_RegisterInterface>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800971c:	f7f7 fdd8 	bl	80012d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009720:	4805      	ldr	r0, [pc, #20]	; (8009738 <MX_USB_DEVICE_Init+0x54>)
 8009722:	f7fe fd23 	bl	800816c <USBD_Start>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800972c:	f7f7 fdd0 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009730:	bf00      	nop
 8009732:	bd80      	pop	{r7, pc}
 8009734:	200000cc 	.word	0x200000cc
 8009738:	200003bc 	.word	0x200003bc
 800973c:	2000000c 	.word	0x2000000c
 8009740:	200000bc 	.word	0x200000bc

08009744 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800974a:	4618      	mov	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009758:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800975a:	4618      	mov	r0, r3
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	460a      	mov	r2, r1
 800976e:	71fb      	strb	r3, [r7, #7]
 8009770:	4613      	mov	r3, r2
 8009772:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8009774:	4803      	ldr	r0, [pc, #12]	; (8009784 <CUSTOM_HID_OutEvent_FS+0x20>)
 8009776:	f7fe fc17 	bl	8007fa8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800977a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200003bc 	.word	0x200003bc

08009788 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8009794:	887b      	ldrh	r3, [r7, #2]
 8009796:	461a      	mov	r2, r3
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	4804      	ldr	r0, [pc, #16]	; (80097ac <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 800979c:	f7fe faf8 	bl	8007d90 <USBD_CUSTOM_HID_SendReport>
 80097a0:	4603      	mov	r3, r0
 80097a2:	b25b      	sxtb	r3, r3
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200003bc 	.word	0x200003bc

080097b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	6039      	str	r1, [r7, #0]
 80097ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2212      	movs	r2, #18
 80097c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097c2:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	200000ec 	.word	0x200000ec

080097d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2204      	movs	r2, #4
 80097e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097e6:	4b03      	ldr	r3, [pc, #12]	; (80097f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	2000010c 	.word	0x2000010c

080097f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	; (800982c <USBD_FS_ProductStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	; (8009830 <USBD_FS_ProductStrDescriptor+0x38>)
 8009810:	f7ff fe88 	bl	8009524 <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	; (800982c <USBD_FS_ProductStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	; (8009830 <USBD_FS_ProductStrDescriptor+0x38>)
 800981c:	f7ff fe82 	bl	8009524 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000698 	.word	0x20000698
 8009830:	0800a2e8 	.word	0x0800a2e8

08009834 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	4904      	ldr	r1, [pc, #16]	; (8009854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009844:	4804      	ldr	r0, [pc, #16]	; (8009858 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009846:	f7ff fe6d 	bl	8009524 <USBD_GetString>
  return USBD_StrDesc;
 800984a:	4b02      	ldr	r3, [pc, #8]	; (8009854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000698 	.word	0x20000698
 8009858:	0800a308 	.word	0x0800a308

0800985c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	6039      	str	r1, [r7, #0]
 8009866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	221a      	movs	r2, #26
 800986c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800986e:	f000 f855 	bl	800991c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009872:	4b02      	ldr	r3, [pc, #8]	; (800987c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20000110 	.word	0x20000110

08009880 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4907      	ldr	r1, [pc, #28]	; (80098b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009896:	4808      	ldr	r0, [pc, #32]	; (80098b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009898:	f7ff fe44 	bl	8009524 <USBD_GetString>
 800989c:	e004      	b.n	80098a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4904      	ldr	r1, [pc, #16]	; (80098b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098a2:	4805      	ldr	r0, [pc, #20]	; (80098b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098a4:	f7ff fe3e 	bl	8009524 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098a8:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000698 	.word	0x20000698
 80098b8:	0800a31c 	.word	0x0800a31c

080098bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4907      	ldr	r1, [pc, #28]	; (80098f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098d2:	4808      	ldr	r0, [pc, #32]	; (80098f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098d4:	f7ff fe26 	bl	8009524 <USBD_GetString>
 80098d8:	e004      	b.n	80098e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098de:	4805      	ldr	r0, [pc, #20]	; (80098f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098e0:	f7ff fe20 	bl	8009524 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20000698 	.word	0x20000698
 80098f4:	0800a330 	.word	0x0800a330

080098f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	220c      	movs	r2, #12
 8009908:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800990a:	4b03      	ldr	r3, [pc, #12]	; (8009918 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20000100 	.word	0x20000100

0800991c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <Get_SerialNum+0x44>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009928:	4b0e      	ldr	r3, [pc, #56]	; (8009964 <Get_SerialNum+0x48>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800992e:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <Get_SerialNum+0x4c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4413      	add	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009942:	2208      	movs	r2, #8
 8009944:	4909      	ldr	r1, [pc, #36]	; (800996c <Get_SerialNum+0x50>)
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 f814 	bl	8009974 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800994c:	2204      	movs	r2, #4
 800994e:	4908      	ldr	r1, [pc, #32]	; (8009970 <Get_SerialNum+0x54>)
 8009950:	68b8      	ldr	r0, [r7, #8]
 8009952:	f000 f80f 	bl	8009974 <IntToUnicode>
  }
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	1fff7590 	.word	0x1fff7590
 8009964:	1fff7594 	.word	0x1fff7594
 8009968:	1fff7598 	.word	0x1fff7598
 800996c:	20000112 	.word	0x20000112
 8009970:	20000122 	.word	0x20000122

08009974 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
 800998a:	e027      	b.n	80099dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	0f1b      	lsrs	r3, r3, #28
 8009990:	2b09      	cmp	r3, #9
 8009992:	d80b      	bhi.n	80099ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	0f1b      	lsrs	r3, r3, #28
 8009998:	b2da      	uxtb	r2, r3
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4619      	mov	r1, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	440b      	add	r3, r1
 80099a4:	3230      	adds	r2, #48	; 0x30
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e00a      	b.n	80099c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	4619      	mov	r1, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	440b      	add	r3, r1
 80099bc:	3237      	adds	r2, #55	; 0x37
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	3301      	adds	r3, #1
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	3301      	adds	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
 80099dc:	7dfa      	ldrb	r2, [r7, #23]
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d3d3      	bcc.n	800998c <IntToUnicode+0x18>
  }
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b0ac      	sub	sp, #176	; 0xb0
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	605a      	str	r2, [r3, #4]
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	2288      	movs	r2, #136	; 0x88
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fc2f 	bl	800a278 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a22:	f040 8085 	bne.w	8009b30 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009a2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009a34:	2301      	movs	r3, #1
 8009a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009a3c:	2318      	movs	r3, #24
 8009a3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009a40:	2307      	movs	r3, #7
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009a44:	2302      	movs	r3, #2
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009a4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a52:	f107 0314 	add.w	r3, r7, #20
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fb fa6e 	bl	8004f38 <HAL_RCCEx_PeriphCLKConfig>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8009a62:	f7f7 fc35 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a66:	4b34      	ldr	r3, [pc, #208]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6a:	4a33      	ldr	r2, [pc, #204]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a72:	4b31      	ldr	r3, [pc, #196]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8009a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a96:	4619      	mov	r1, r3
 8009a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a9c:	f7f8 f980 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009aa0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009aba:	230a      	movs	r3, #10
 8009abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009aca:	f7f8 f969 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ace:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad2:	4a19      	ldr	r2, [pc, #100]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d114      	bne.n	8009b1c <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009af2:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af6:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009afc:	6593      	str	r3, [r2, #88]	; 0x58
 8009afe:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b06:	60bb      	str	r3, [r7, #8]
 8009b08:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009b0a:	f7fa fb49 	bl	80041a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b12:	4a09      	ldr	r2, [pc, #36]	; (8009b38 <HAL_PCD_MspInit+0x144>)
 8009b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b18:	6593      	str	r3, [r2, #88]	; 0x58
 8009b1a:	e001      	b.n	8009b20 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009b1c:	f7fa fb40 	bl	80041a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	2043      	movs	r0, #67	; 0x43
 8009b26:	f7f7 fff8 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b2a:	2043      	movs	r0, #67	; 0x43
 8009b2c:	f7f8 f811 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b30:	bf00      	nop
 8009b32:	37b0      	adds	r7, #176	; 0xb0
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	40021000 	.word	0x40021000

08009b3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe fb57 	bl	8008206 <USBD_LL_SetupStage>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f7fe fb91 	bl	80082b0 <USBD_LL_DataOutStage>
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3348      	adds	r3, #72	; 0x48
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f7fe fc2a 	bl	8008416 <USBD_LL_DataInStage>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fd64 	bl	80086a6 <USBD_LL_SOF>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d001      	beq.n	8009bfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009bfa:	f7f7 fb69 	bl	80012d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fd08 	bl	800861e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fcb0 	bl	800857a <USBD_LL_Reset>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fcf7 	bl	800863e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	4a03      	ldr	r2, [pc, #12]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5e:	f043 0306 	orr.w	r3, r3, #6
 8009c62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	e000ed00 	.word	0xe000ed00

08009c70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c8a:	f023 0301 	bic.w	r3, r3, #1
 8009c8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <HAL_PCD_ResumeCallback+0x4c>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <HAL_PCD_ResumeCallback+0x4c>)
 8009c9e:	f023 0306 	bic.w	r3, r3, #6
 8009ca2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ca4:	f000 fae2 	bl	800a26c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fce1 	bl	8008676 <USBD_LL_Resume>
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	e000ed00 	.word	0xe000ed00

08009cc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cd2:	78fa      	ldrb	r2, [r7, #3]
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe fd37 	bl	800874a <USBD_LL_IsoOUTIncomplete>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fcf3 	bl	80086e6 <USBD_LL_IsoINIncomplete>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fd49 	bl	80087ae <USBD_LL_DevConnected>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fd46 	bl	80087c4 <USBD_LL_DevDisconnected>
}
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d13c      	bne.n	8009dca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d50:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1e      	ldr	r2, [pc, #120]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d60:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d6e:	4b19      	ldr	r3, [pc, #100]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d70:	2202      	movs	r2, #2
 8009d72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d74:	4b17      	ldr	r3, [pc, #92]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d76:	2202      	movs	r2, #2
 8009d78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d7a:	4b16      	ldr	r3, [pc, #88]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d86:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009d8c:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d92:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d98:	4b0e      	ldr	r3, [pc, #56]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d9e:	480d      	ldr	r0, [pc, #52]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009da0:	f7f8 fffb 	bl	8002d9a <HAL_PCD_Init>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009daa:	f7f7 fa91 	bl	80012d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	4808      	ldr	r0, [pc, #32]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009db2:	f7fa f94c 	bl	800404e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009db6:	2240      	movs	r2, #64	; 0x40
 8009db8:	2100      	movs	r1, #0
 8009dba:	4806      	ldr	r0, [pc, #24]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009dbc:	f7fa f900 	bl	8003fc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dc0:	2280      	movs	r2, #128	; 0x80
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	4803      	ldr	r0, [pc, #12]	; (8009dd4 <USBD_LL_Init+0x94>)
 8009dc6:	f7fa f8fb 	bl	8003fc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000898 	.word	0x20000898

08009dd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f9 f8f7 	bl	8002fe2 <HAL_PCD_Start>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d816      	bhi.n	8009e2c <USBD_LL_Start+0x54>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USBD_LL_Start+0x2c>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e1b 	.word	0x08009e1b
 8009e0c:	08009e21 	.word	0x08009e21
 8009e10:	08009e27 	.word	0x08009e27
    case HAL_OK :
      usb_status = USBD_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
    break;
 8009e18:	e00b      	b.n	8009e32 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1e:	e008      	b.n	8009e32 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
    break;
 8009e24:	e005      	b.n	8009e32 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e26:	2303      	movs	r3, #3
 8009e28:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2a:	e002      	b.n	8009e32 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e30:	bf00      	nop
  }
  return usb_status;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	70fb      	strb	r3, [r7, #3]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70bb      	strb	r3, [r7, #2]
 8009e52:	4613      	mov	r3, r2
 8009e54:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e64:	78bb      	ldrb	r3, [r7, #2]
 8009e66:	883a      	ldrh	r2, [r7, #0]
 8009e68:	78f9      	ldrb	r1, [r7, #3]
 8009e6a:	f7f9 fda1 	bl	80039b0 <HAL_PCD_EP_Open>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d817      	bhi.n	8009ea8 <USBD_LL_OpenEP+0x6c>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <USBD_LL_OpenEP+0x44>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e91 	.word	0x08009e91
 8009e84:	08009e97 	.word	0x08009e97
 8009e88:	08009e9d 	.word	0x08009e9d
 8009e8c:	08009ea3 	.word	0x08009ea3
    case HAL_OK :
      usb_status = USBD_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
    break;
 8009e94:	e00b      	b.n	8009eae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9a:	e008      	b.n	8009eae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e005      	b.n	8009eae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea6:	e002      	b.n	8009eae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009eac:	bf00      	nop
  }
  return usb_status;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ed2:	78fa      	ldrb	r2, [r7, #3]
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f9 fdd2 	bl	8003a80 <HAL_PCD_EP_Close>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d816      	bhi.n	8009f14 <USBD_LL_CloseEP+0x5c>
 8009ee6:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <USBD_LL_CloseEP+0x34>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009efd 	.word	0x08009efd
 8009ef0:	08009f03 	.word	0x08009f03
 8009ef4:	08009f09 	.word	0x08009f09
 8009ef8:	08009f0f 	.word	0x08009f0f
    case HAL_OK :
      usb_status = USBD_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73fb      	strb	r3, [r7, #15]
    break;
 8009f00:	e00b      	b.n	8009f1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f02:	2303      	movs	r3, #3
 8009f04:	73fb      	strb	r3, [r7, #15]
    break;
 8009f06:	e008      	b.n	8009f1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f0c:	e005      	b.n	8009f1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	73fb      	strb	r3, [r7, #15]
    break;
 8009f12:	e002      	b.n	8009f1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	73fb      	strb	r3, [r7, #15]
    break;
 8009f18:	bf00      	nop
  }
  return usb_status;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f9 fe49 	bl	8003bda <HAL_PCD_EP_SetStall>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d816      	bhi.n	8009f80 <USBD_LL_StallEP+0x5c>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <USBD_LL_StallEP+0x34>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f6f 	.word	0x08009f6f
 8009f60:	08009f75 	.word	0x08009f75
 8009f64:	08009f7b 	.word	0x08009f7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6c:	e00b      	b.n	8009f86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	73fb      	strb	r3, [r7, #15]
    break;
 8009f72:	e008      	b.n	8009f86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f74:	2301      	movs	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
    break;
 8009f78:	e005      	b.n	8009f86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7e:	e002      	b.n	8009f86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]
    break;
 8009f84:	bf00      	nop
  }
  return usb_status;
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f9 fe75 	bl	8003c9e <HAL_PCD_EP_ClrStall>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d816      	bhi.n	8009fec <USBD_LL_ClearStallEP+0x5c>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBD_LL_ClearStallEP+0x34>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009fd5 	.word	0x08009fd5
 8009fc8:	08009fdb 	.word	0x08009fdb
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009fe7 	.word	0x08009fe7
    case HAL_OK :
      usb_status = USBD_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e00b      	b.n	8009ff2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009fde:	e008      	b.n	8009ff2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	e005      	b.n	8009ff2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fea:	e002      	b.n	8009ff2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff0:	bf00      	nop
  }
  return usb_status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a00e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a014:	2b00      	cmp	r3, #0
 800a016:	da0b      	bge.n	800a030 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	4613      	mov	r3, r2
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	333e      	adds	r3, #62	; 0x3e
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	e00b      	b.n	800a048 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	4613      	mov	r3, r2
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a046:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7f9 fc77 	bl	8003966 <HAL_PCD_SetAddress>
 800a078:	4603      	mov	r3, r0
 800a07a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d816      	bhi.n	800a0b0 <USBD_LL_SetUSBAddress+0x5c>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <USBD_LL_SetUSBAddress+0x34>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a099 	.word	0x0800a099
 800a08c:	0800a09f 	.word	0x0800a09f
 800a090:	0800a0a5 	.word	0x0800a0a5
 800a094:	0800a0ab 	.word	0x0800a0ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
    break;
 800a09c:	e00b      	b.n	800a0b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a2:	e008      	b.n	800a0b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a8:	e005      	b.n	800a0b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ae:	e002      	b.n	800a0b6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b4:	bf00      	nop
  }
  return usb_status;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0de:	7af9      	ldrb	r1, [r7, #11]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	f7f9 fd48 	bl	8003b78 <HAL_PCD_EP_Transmit>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a0ec:	7dbb      	ldrb	r3, [r7, #22]
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d816      	bhi.n	800a120 <USBD_LL_Transmit+0x60>
 800a0f2:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_LL_Transmit+0x38>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a10f 	.word	0x0800a10f
 800a100:	0800a115 	.word	0x0800a115
 800a104:	0800a11b 	.word	0x0800a11b
    case HAL_OK :
      usb_status = USBD_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	75fb      	strb	r3, [r7, #23]
    break;
 800a10c:	e00b      	b.n	800a126 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a10e:	2303      	movs	r3, #3
 800a110:	75fb      	strb	r3, [r7, #23]
    break;
 800a112:	e008      	b.n	800a126 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a114:	2301      	movs	r3, #1
 800a116:	75fb      	strb	r3, [r7, #23]
    break;
 800a118:	e005      	b.n	800a126 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a11a:	2303      	movs	r3, #3
 800a11c:	75fb      	strb	r3, [r7, #23]
    break;
 800a11e:	e002      	b.n	800a126 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	75fb      	strb	r3, [r7, #23]
    break;
 800a124:	bf00      	nop
  }
  return usb_status;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	460b      	mov	r3, r1
 800a13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a14e:	7af9      	ldrb	r1, [r7, #11]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	f7f9 fcde 	bl	8003b14 <HAL_PCD_EP_Receive>
 800a158:	4603      	mov	r3, r0
 800a15a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a15c:	7dbb      	ldrb	r3, [r7, #22]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d816      	bhi.n	800a190 <USBD_LL_PrepareReceive+0x60>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBD_LL_PrepareReceive+0x38>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a17f 	.word	0x0800a17f
 800a170:	0800a185 	.word	0x0800a185
 800a174:	0800a18b 	.word	0x0800a18b
    case HAL_OK :
      usb_status = USBD_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]
    break;
 800a17c:	e00b      	b.n	800a196 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a17e:	2303      	movs	r3, #3
 800a180:	75fb      	strb	r3, [r7, #23]
    break;
 800a182:	e008      	b.n	800a196 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a184:	2301      	movs	r3, #1
 800a186:	75fb      	strb	r3, [r7, #23]
    break;
 800a188:	e005      	b.n	800a196 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	75fb      	strb	r3, [r7, #23]
    break;
 800a18e:	e002      	b.n	800a196 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	75fb      	strb	r3, [r7, #23]
    break;
 800a194:	bf00      	nop
  }
  return usb_status;
 800a196:	7dfb      	ldrb	r3, [r7, #23]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_PCDEx_LPM_Callback+0x18>
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d01f      	beq.n	800a1f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1b6:	e03b      	b.n	800a230 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d007      	beq.n	800a1d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a1c0:	f000 f854 	bl	800a26c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1c4:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	4a1b      	ldr	r2, [pc, #108]	; (800a238 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1ca:	f023 0306 	bic.w	r3, r3, #6
 800a1ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1e2:	f023 0301 	bic.w	r3, r3, #1
 800a1e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fa41 	bl	8008676 <USBD_LL_Resume>
    break;
 800a1f4:	e01c      	b.n	800a230 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fa12 	bl	800863e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <HAL_PCDEx_LPM_Callback+0x98>)
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	4a04      	ldr	r2, [pc, #16]	; (800a238 <HAL_PCDEx_LPM_Callback+0x98>)
 800a228:	f043 0306 	orr.w	r3, r3, #6
 800a22c:	6113      	str	r3, [r2, #16]
    break;
 800a22e:	bf00      	nop
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	e000ed00 	.word	0xe000ed00

0800a23c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a244:	4b03      	ldr	r3, [pc, #12]	; (800a254 <USBD_static_malloc+0x18>)
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20000da4 	.word	0x20000da4

0800a258 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a270:	f7f6 fce0 	bl	8000c34 <SystemClock_Config>
}
 800a274:	bf00      	nop
 800a276:	bd80      	pop	{r7, pc}

0800a278 <memset>:
 800a278:	4402      	add	r2, r0
 800a27a:	4603      	mov	r3, r0
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d100      	bne.n	800a282 <memset+0xa>
 800a280:	4770      	bx	lr
 800a282:	f803 1b01 	strb.w	r1, [r3], #1
 800a286:	e7f9      	b.n	800a27c <memset+0x4>

0800a288 <__libc_init_array>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	4d0d      	ldr	r5, [pc, #52]	; (800a2c0 <__libc_init_array+0x38>)
 800a28c:	4c0d      	ldr	r4, [pc, #52]	; (800a2c4 <__libc_init_array+0x3c>)
 800a28e:	1b64      	subs	r4, r4, r5
 800a290:	10a4      	asrs	r4, r4, #2
 800a292:	2600      	movs	r6, #0
 800a294:	42a6      	cmp	r6, r4
 800a296:	d109      	bne.n	800a2ac <__libc_init_array+0x24>
 800a298:	4d0b      	ldr	r5, [pc, #44]	; (800a2c8 <__libc_init_array+0x40>)
 800a29a:	4c0c      	ldr	r4, [pc, #48]	; (800a2cc <__libc_init_array+0x44>)
 800a29c:	f000 f818 	bl	800a2d0 <_init>
 800a2a0:	1b64      	subs	r4, r4, r5
 800a2a2:	10a4      	asrs	r4, r4, #2
 800a2a4:	2600      	movs	r6, #0
 800a2a6:	42a6      	cmp	r6, r4
 800a2a8:	d105      	bne.n	800a2b6 <__libc_init_array+0x2e>
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b0:	4798      	blx	r3
 800a2b2:	3601      	adds	r6, #1
 800a2b4:	e7ee      	b.n	800a294 <__libc_init_array+0xc>
 800a2b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ba:	4798      	blx	r3
 800a2bc:	3601      	adds	r6, #1
 800a2be:	e7f2      	b.n	800a2a6 <__libc_init_array+0x1e>
 800a2c0:	0800a398 	.word	0x0800a398
 800a2c4:	0800a398 	.word	0x0800a398
 800a2c8:	0800a398 	.word	0x0800a398
 800a2cc:	0800a39c 	.word	0x0800a39c

0800a2d0 <_init>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr

0800a2dc <_fini>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr
