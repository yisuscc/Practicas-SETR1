
P6fase2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009098  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092cc  080092cc  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d4  080092d4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080092dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  20000118  080093f4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  080093f4  00020db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0f7  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c8  00000000  00000000  0003d282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  00041350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001378  00000000  00000000  00042ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00044018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd27  00000000  00000000  0006e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fd5  00000000  00000000  0008e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006af8  00000000  00000000  001833c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00189eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009208 	.word	0x08009208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08009208 	.word	0x08009208

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe58 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f857 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9f1 	bl	80008b8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f8b5 	bl	8000644 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8eb 	bl	80006b4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f927 	bl	8000730 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f94b 	bl	800077c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f987 	bl	80007f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f9b5 	bl	8000858 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 f893 	bl	8008618 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(5000);
 80004f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80004f6:	f000 feb7 	bl	8001268 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i;
  uint8_t dato[6];
  USBD_LL_PrepareReceive(&hUsbDeviceFS,1,dato,6);
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	2306      	movs	r3, #6
 80004fe:	2101      	movs	r1, #1
 8000500:	481d      	ldr	r0, [pc, #116]	; (8000578 <main+0xb4>)
 8000502:	f008 fdb1 	bl	8009068 <USBD_LL_PrepareReceive>
  while (1)
  {
	  if(miflag==1){
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <main+0xb8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d108      	bne.n	8000520 <main+0x5c>
		  USBD_LL_PrepareReceive(&hUsbDeviceFS,1,dato,6);
 800050e:	1d3a      	adds	r2, r7, #4
 8000510:	2306      	movs	r3, #6
 8000512:	2101      	movs	r1, #1
 8000514:	4818      	ldr	r0, [pc, #96]	; (8000578 <main+0xb4>)
 8000516:	f008 fda7 	bl	8009068 <USBD_LL_PrepareReceive>
		  miflag = 0;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <main+0xb8>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
	  }
	  for (i=0;i<50;i++)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e00e      	b.n	8000544 <main+0x80>
	  {
	  dato[1]=4;
 8000526:	2304      	movs	r3, #4
 8000528:	717b      	strb	r3, [r7, #5]
	  dato[2]=4;
 800052a:	2304      	movs	r3, #4
 800052c:	71bb      	strb	r3, [r7, #6]
	  USBD_CUSTOM_HID_SendReport_FS(dato,6);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2106      	movs	r1, #6
 8000532:	4618      	mov	r0, r3
 8000534:	f008 f8c4 	bl	80086c0 <USBD_CUSTOM_HID_SendReport_FS>
	  HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 fe95 	bl	8001268 <HAL_Delay>
	  for (i=0;i<50;i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2b31      	cmp	r3, #49	; 0x31
 8000548:	dded      	ble.n	8000526 <main+0x62>
	  }
	  for (i=0;i<50;i++)
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e00e      	b.n	800056e <main+0xaa>
	  {
	  dato[1]=-4;
 8000550:	23fc      	movs	r3, #252	; 0xfc
 8000552:	717b      	strb	r3, [r7, #5]
	  dato[2]=-4;
 8000554:	23fc      	movs	r3, #252	; 0xfc
 8000556:	71bb      	strb	r3, [r7, #6]
	  USBD_CUSTOM_HID_SendReport_FS(dato,6);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2106      	movs	r1, #6
 800055c:	4618      	mov	r0, r3
 800055e:	f008 f8af 	bl	80086c0 <USBD_CUSTOM_HID_SendReport_FS>
	  HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fe80 	bl	8001268 <HAL_Delay>
	  for (i=0;i<50;i++)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b31      	cmp	r3, #49	; 0x31
 8000572:	dded      	ble.n	8000550 <main+0x8c>
	  if(miflag==1){
 8000574:	e7c7      	b.n	8000506 <main+0x42>
 8000576:	bf00      	nop
 8000578:	200003a8 	.word	0x200003a8
 800057c:	20000684 	.word	0x20000684

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fe0e 	bl	80091b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f002 fd65 	bl	8003074 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 fb34 	bl	8000c1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f002 fd40 	bl	8003038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <SystemClock_Config+0xc0>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <SystemClock_Config+0xc0>)
 80005c0:	f023 0318 	bic.w	r3, r3, #24
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c8:	2314      	movs	r3, #20
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	; 0x60
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e8:	2328      	movs	r3, #40	; 0x28
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fe5b 	bl	80032b8 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000608:	f000 fb08 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2104      	movs	r1, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fa23 	bl	8003a70 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000630:	f000 faf4 	bl	8000c1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000634:	f003 ff2a 	bl	800448c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	; 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800064a:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <MX_DFSDM1_Init+0x6c>)
 800064c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000650:	2201      	movs	r2, #1
 8000652:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800065c:	2202      	movs	r2, #2
 800065e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800066e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000672:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800067c:	2204      	movs	r2, #4
 800067e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000688:	2201      	movs	r2, #1
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_DFSDM1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_DFSDM1_Init+0x68>)
 800069a:	f000 ff1b 	bl	80014d4 <HAL_DFSDM_ChannelInit>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006a4:	f000 faba 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000134 	.word	0x20000134
 80006b0:	40016020 	.word	0x40016020

080006b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_I2C2_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_I2C2_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_I2C2_Init+0x74>)
 80006c0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_I2C2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_I2C2_Init+0x74>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_I2C2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C2_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_I2C2_Init+0x74>)
 80006f2:	f001 f9e0 	bl	8001ab6 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 fa8e 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_I2C2_Init+0x74>)
 8000704:	f001 fa72 	bl	8001bec <HAL_I2CEx_ConfigAnalogFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800070e:	f000 fa85 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C2_Init+0x74>)
 8000716:	f001 fab4 	bl	8001c82 <HAL_I2CEx_ConfigDigitalFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fa7c 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000016c 	.word	0x2000016c
 800072c:	40005800 	.word	0x40005800

08000730 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_QUADSPI_Init+0x44>)
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_QUADSPI_Init+0x48>)
 8000738:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_QUADSPI_Init+0x44>)
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_QUADSPI_Init+0x44>)
 8000742:	2204      	movs	r2, #4
 8000744:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_QUADSPI_Init+0x44>)
 8000748:	2210      	movs	r2, #16
 800074a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_QUADSPI_Init+0x44>)
 800074e:	2217      	movs	r2, #23
 8000750:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_QUADSPI_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_QUADSPI_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_QUADSPI_Init+0x44>)
 8000760:	f002 fcee 	bl	8003140 <HAL_QSPI_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800076a:	f000 fa57 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200001c0 	.word	0x200001c0
 8000778:	a0001000 	.word	0xa0001000

0800077c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_SPI3_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_SPI3_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_SPI3_Init+0x74>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_SPI3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI3_Init+0x74>)
 8000796:	f44f 7240 	mov.w	r2, #768	; 0x300
 800079a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI3_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_SPI3_Init+0x74>)
 80007dc:	f004 f838 	bl	8004850 <HAL_SPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fa19 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000204 	.word	0x20000204
 80007f4:	40003c00 	.word	0x40003c00

080007f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART1_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART1_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800083c:	f004 f8ab 	bl	8004996 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f9e9 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000268 	.word	0x20000268
 8000854:	40013800 	.word	0x40013800

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART3_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800089c:	f004 f87b 	bl	8004996 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f9b9 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002f0 	.word	0x200002f0
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4bbd      	ldr	r3, [pc, #756]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4abc      	ldr	r2, [pc, #752]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4bba      	ldr	r3, [pc, #744]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4bb7      	ldr	r3, [pc, #732]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4ab6      	ldr	r2, [pc, #728]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4bb4      	ldr	r3, [pc, #720]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4bb1      	ldr	r3, [pc, #708]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4ab0      	ldr	r2, [pc, #704]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4bae      	ldr	r3, [pc, #696]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4bab      	ldr	r3, [pc, #684]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4aaa      	ldr	r2, [pc, #680]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4ba8      	ldr	r3, [pc, #672]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4ba5      	ldr	r3, [pc, #660]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4aa4      	ldr	r2, [pc, #656]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4ba2      	ldr	r3, [pc, #648]	; (8000bc4 <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 718a 	mov.w	r1, #276	; 0x114
 800094c:	489e      	ldr	r0, [pc, #632]	; (8000bc8 <MX_GPIO_Init+0x310>)
 800094e:	f001 f877 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f248 1104 	movw	r1, #33028	; 0x8104
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f001 f870 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000960:	2200      	movs	r2, #0
 8000962:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000966:	4899      	ldr	r0, [pc, #612]	; (8000bcc <MX_GPIO_Init+0x314>)
 8000968:	f001 f86a 	bl	8001a40 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000972:	4897      	ldr	r0, [pc, #604]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000974:	f001 f864 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4894      	ldr	r0, [pc, #592]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000980:	f001 f85e 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7110 	mov.w	r1, #576	; 0x240
 800098a:	4892      	ldr	r0, [pc, #584]	; (8000bd4 <MX_GPIO_Init+0x31c>)
 800098c:	f001 f858 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	488d      	ldr	r0, [pc, #564]	; (8000bcc <MX_GPIO_Init+0x314>)
 8000996:	f001 f853 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2101      	movs	r1, #1
 800099e:	488a      	ldr	r0, [pc, #552]	; (8000bc8 <MX_GPIO_Init+0x310>)
 80009a0:	f001 f84e 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009a4:	f240 1315 	movw	r3, #277	; 0x115
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4882      	ldr	r0, [pc, #520]	; (8000bc8 <MX_GPIO_Init+0x310>)
 80009be:	f000 fe95 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009c2:	236a      	movs	r3, #106	; 0x6a
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	487c      	ldr	r0, [pc, #496]	; (8000bc8 <MX_GPIO_Init+0x310>)
 80009d8:	f000 fe88 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4878      	ldr	r0, [pc, #480]	; (8000bd4 <MX_GPIO_Init+0x31c>)
 80009f4:	f000 fe7a 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009f8:	233f      	movs	r3, #63	; 0x3f
 80009fa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fc:	230b      	movs	r3, #11
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4872      	ldr	r0, [pc, #456]	; (8000bd4 <MX_GPIO_Init+0x31c>)
 8000a0c:	f000 fe6e 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a10:	2303      	movs	r3, #3
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a20:	2308      	movs	r3, #8
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f000 fe5d 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a32:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fe4d 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a62:	2301      	movs	r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fe3c 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a74:	2310      	movs	r3, #16
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f000 fe2f 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a8e:	23e0      	movs	r3, #224	; 0xe0
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fe1e 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4841      	ldr	r0, [pc, #260]	; (8000bcc <MX_GPIO_Init+0x314>)
 8000ac6:	f000 fe11 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	483b      	ldr	r0, [pc, #236]	; (8000bcc <MX_GPIO_Init+0x314>)
 8000ade:	f000 fe05 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ae2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ae6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4834      	ldr	r0, [pc, #208]	; (8000bcc <MX_GPIO_Init+0x314>)
 8000afc:	f000 fdf6 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b00:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b04:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000b18:	f000 fde8 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b1c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4826      	ldr	r0, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000b36:	f000 fdd9 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4820      	ldr	r0, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0x31c>)
 8000b54:	f000 fdca 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <MX_GPIO_Init+0x31c>)
 8000b70:	f000 fdbc 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b84:	2305      	movs	r3, #5
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000b90:	f000 fdac 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b94:	2378      	movs	r3, #120	; 0x78
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_GPIO_Init+0x318>)
 8000bb0:	f000 fd9c 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bba:	2312      	movs	r3, #18
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e00a      	b.n	8000bd8 <MX_GPIO_Init+0x320>
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48001000 	.word	0x48001000
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0x360>)
 8000bea:	f000 fd7f 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fc37 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f000 fc50 	bl	800149e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2028      	movs	r0, #40	; 0x28
 8000c04:	f000 fc2f 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c08:	2028      	movs	r0, #40	; 0x28
 8000c0a:	f000 fc48 	bl	800149e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	48000400 	.word	0x48000400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ac      	sub	sp, #176	; 0xb0
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2288      	movs	r2, #136	; 0x88
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f008 fa8d 	bl	80091b0 <memset>
  if(DFSDM1_Init == 0)
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d142      	bne.n	8000d24 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f902 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cba:	f7ff ffaf 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cee:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d16:	f000 fce9 	bl	80016ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a02      	ldr	r2, [pc, #8]	; (8000d2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d22:	6013      	str	r3, [r2, #0]
  }

}
 8000d24:	bf00      	nop
 8000d26:	37b0      	adds	r7, #176	; 0xb0
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000378 	.word	0x20000378
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48001000 	.word	0x48001000

08000d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ac      	sub	sp, #176	; 0xb0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2288      	movs	r2, #136	; 0x88
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f008 fa29 	bl	80091b0 <memset>
  if(hi2c->Instance==I2C2)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <HAL_I2C_MspInit+0xb0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d13b      	bne.n	8000de0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 f89f 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d80:	f7ff ff4c 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <HAL_I2C_MspInit+0xb8>)
 8000dc4:	f000 fc92 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_I2C_MspInit+0xb4>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	37b0      	adds	r7, #176	; 0xb0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40005800 	.word	0x40005800
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400

08000df4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_QSPI_MspInit+0x7c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d128      	bne.n	8000e68 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	6513      	str	r3, [r2, #80]	; 0x50
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_QSPI_MspInit+0x80>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e46:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e4a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_QSPI_MspInit+0x84>)
 8000e64:	f000 fc42 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	a0001000 	.word	0xa0001000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48001000 	.word	0x48001000

08000e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_SPI_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d128      	bne.n	8000ef0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ece:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_SPI_MspInit+0x84>)
 8000eec:	f000 fbfe 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40003c00 	.word	0x40003c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000800 	.word	0x48000800

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ae      	sub	sp, #184	; 0xb8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2288      	movs	r2, #136	; 0x88
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 f943 	bl	80091b0 <memset>
  if(huart->Instance==USART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a42      	ldr	r2, [pc, #264]	; (8001038 <HAL_UART_MspInit+0x134>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d13b      	bne.n	8000fac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 ffb9 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f4c:	f7ff fe66 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f54:	4a39      	ldr	r2, [pc, #228]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	4a33      	ldr	r2, [pc, #204]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_UART_MspInit+0x138>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4826      	ldr	r0, [pc, #152]	; (8001040 <HAL_UART_MspInit+0x13c>)
 8000fa6:	f000 fba1 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000faa:	e040      	b.n	800102e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <HAL_UART_MspInit+0x140>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13b      	bne.n	800102e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 ff78 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000fce:	f7ff fe25 	bl	8000c1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_UART_MspInit+0x138>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_UART_MspInit+0x138>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_UART_MspInit+0x138>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_UART_MspInit+0x138>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_UART_MspInit+0x138>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_UART_MspInit+0x138>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	2307      	movs	r3, #7
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <HAL_UART_MspInit+0x144>)
 800102a:	f000 fb5f 	bl	80016ec <HAL_GPIO_Init>
}
 800102e:	bf00      	nop
 8001030:	37b8      	adds	r7, #184	; 0xb8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013800 	.word	0x40013800
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400
 8001044:	40004800 	.word	0x40004800
 8001048:	48000c00 	.word	0x48000c00

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f8c6 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80010a4:	2020      	movs	r0, #32
 80010a6:	f000 fce3 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80010aa:	2040      	movs	r0, #64	; 0x40
 80010ac:	f000 fce0 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80010b0:	2080      	movs	r0, #128	; 0x80
 80010b2:	f000 fcdd 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80010b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010ba:	f000 fcd9 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80010c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010ca:	f000 fcd1 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80010ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010d2:	f000 fccd 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80010d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010da:	f000 fcc9 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80010de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010e2:	f000 fcc5 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80010e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010ea:	f000 fcc1 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <OTG_FS_IRQHandler+0x10>)
 80010fa:	f000 ff61 	bl	8001fc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000888 	.word	0x20000888

08001108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f008 f831 	bl	80091c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff f9b1 	bl	80004c4 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001170:	080092dc 	.word	0x080092dc
  ldr r2, =_sbss
 8001174:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001178:	20000db4 	.word	0x20000db4

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f961 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fd42 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_InitTick+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f96d 	bl	80014ba <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f937 	bl	8001466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_InitTick+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e007      	b.n	8001210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e004      	b.n	8001210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e001      	b.n	8001210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	2000037c 	.word	0x2000037c

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	2000037c 	.word	0x2000037c

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0ac      	b.n	8001640 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8b2 	bl	8001654 <DFSDM_GetChannelFromInstance>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a55      	ldr	r2, [pc, #340]	; (8001648 <HAL_DFSDM_ChannelInit+0x174>)
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e09f      	b.n	8001640 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fbb5 	bl	8000c70 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <HAL_DFSDM_ChannelInit+0x178>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_DFSDM_ChannelInit+0x178>)
 800150e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001510:	4b4e      	ldr	r3, [pc, #312]	; (800164c <HAL_DFSDM_ChannelInit+0x178>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d125      	bne.n	8001564 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 800151e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001522:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4948      	ldr	r1, [pc, #288]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a46      	ldr	r2, [pc, #280]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 8001538:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800153c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	493f      	ldr	r1, [pc, #252]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a3c      	ldr	r2, [pc, #240]	; (8001650 <HAL_DFSDM_ChannelInit+0x17c>)
 800155e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001562:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001572:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001582:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001588:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 020f 	bic.w	r2, r2, #15
 80015a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80015c8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f002 0207 	and.w	r2, r2, #7
 80015f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001620:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f810 	bl	8001654 <DFSDM_GetChannelFromInstance>
 8001634:	4602      	mov	r2, r0
 8001636:	4904      	ldr	r1, [pc, #16]	; (8001648 <HAL_DFSDM_ChannelInit+0x174>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000384 	.word	0x20000384
 800164c:	20000380 	.word	0x20000380
 8001650:	40016000 	.word	0x40016000

08001654 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d102      	bne.n	800166a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e02b      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <DFSDM_GetChannelFromInstance+0x80>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d102      	bne.n	8001678 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e024      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <DFSDM_GetChannelFromInstance+0x84>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d102      	bne.n	8001686 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e01d      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <DFSDM_GetChannelFromInstance+0x88>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d102      	bne.n	8001694 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800168e:	2304      	movs	r3, #4
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e016      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800169c:	2305      	movs	r3, #5
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e00f      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <DFSDM_GetChannelFromInstance+0x90>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d102      	bne.n	80016b0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80016aa:	2306      	movs	r3, #6
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e008      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <DFSDM_GetChannelFromInstance+0x94>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d102      	bne.n	80016be <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80016b8:	2307      	movs	r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e001      	b.n	80016c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80016be:	2303      	movs	r3, #3
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40016000 	.word	0x40016000
 80016d4:	40016020 	.word	0x40016020
 80016d8:	40016040 	.word	0x40016040
 80016dc:	40016080 	.word	0x40016080
 80016e0:	400160a0 	.word	0x400160a0
 80016e4:	400160c0 	.word	0x400160c0
 80016e8:	400160e0 	.word	0x400160e0

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e17f      	b.n	80019fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8171 	beq.w	80019f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d005      	beq.n	800172c <HAL_GPIO_Init+0x40>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 0201 	and.w	r2, r3, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b03      	cmp	r3, #3
 8001798:	d118      	bne.n	80017cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	6939      	ldr	r1, [r7, #16]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80ac 	beq.w	80019f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b6:	4a5a      	ldr	r2, [pc, #360]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x242>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x338>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x33c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x340>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_GPIO_Init+0x344>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <HAL_GPIO_Init+0x348>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4a      	ldr	r2, [pc, #296]	; (8001a38 <HAL_GPIO_Init+0x34c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x22a>
 8001912:	2306      	movs	r3, #6
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x244>
 8001916:	2307      	movs	r3, #7
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x244>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x244>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x244>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x244>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x244>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x244>
 800192e:	2300      	movs	r3, #0
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001940:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_GPIO_Init+0x350>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_GPIO_Init+0x350>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_GPIO_Init+0x350>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199c:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_GPIO_Init+0x350>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x350>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_GPIO_Init+0x350>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_GPIO_Init+0x350>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <HAL_GPIO_Init+0x350>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f47f ae78 	bne.w	80016fc <HAL_GPIO_Init+0x10>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000c00 	.word	0x48000c00
 8001a30:	48001000 	.word	0x48001000
 8001a34:	48001400 	.word	0x48001400
 8001a38:	48001800 	.word	0x48001800
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f806 	bl	8001aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e08d      	b.n	8001be4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff f92b 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2224      	movs	r2, #36	; 0x24
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	e006      	b.n	8001b3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d108      	bne.n	8001b58 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e007      	b.n	8001b68 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69d9      	ldr	r1, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d138      	bne.n	8001c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e032      	b.n	8001c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
  }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d139      	bne.n	8001d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e033      	b.n	8001d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2224      	movs	r2, #36	; 0x24
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1c:	b08f      	sub	sp, #60	; 0x3c
 8001d1e:	af0a      	add	r7, sp, #40	; 0x28
 8001d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e116      	b.n	8001f5a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f006 fdf0 	bl	800892c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fc09 	bl	8005582 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	687e      	ldr	r6, [r7, #4]
 8001d78:	466d      	mov	r5, sp
 8001d7a:	f106 0410 	add.w	r4, r6, #16
 8001d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d8e:	1d33      	adds	r3, r6, #4
 8001d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f003 fb1b 	bl	80053ce <USB_CoreInit>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0d7      	b.n	8001f5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fbf7 	bl	80055a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e04a      	b.n	8001e52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333d      	adds	r3, #61	; 0x3d
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	333c      	adds	r3, #60	; 0x3c
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	b298      	uxth	r0, r3
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3356      	adds	r3, #86	; 0x56
 8001df8:	4602      	mov	r2, r0
 8001dfa:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3340      	adds	r3, #64	; 0x40
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3344      	adds	r3, #68	; 0x44
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3348      	adds	r3, #72	; 0x48
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	334c      	adds	r3, #76	; 0x4c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3af      	bcc.n	8001dbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e044      	b.n	8001eec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3b5      	bcc.n	8001e62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	687e      	ldr	r6, [r7, #4]
 8001efe:	466d      	mov	r5, sp
 8001f00:	f106 0410 	add.w	r4, r6, #16
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f14:	1d33      	adds	r3, r6, #4
 8001f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f003 fb8f 	bl	800563c <USB_DevInit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e014      	b.n	8001f5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 f851 	bl	8002ff0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fb3d 	bl	80065d2 <USB_DevDisconnect>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_Start+0x1c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e01c      	b.n	8001fb8 <HAL_PCD_Start+0x56>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fade 	bl	8005560 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 faf1 	bl	8006590 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b08d      	sub	sp, #52	; 0x34
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 fbaf 	bl	800673a <USB_GetMode>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 847e 	bne.w	80028e0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 fb13 	bl	8006614 <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8474 	beq.w	80028de <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fb00 	bl	8006614 <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d107      	bne.n	800202e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f002 0202 	and.w	r2, r2, #2
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 faee 	bl	8006614 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d161      	bne.n	8002106 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0210 	bic.w	r2, r2, #16
 8002050:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	0c5b      	lsrs	r3, r3, #17
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	2b02      	cmp	r3, #2
 800207c:	d124      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d035      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	6a38      	ldr	r0, [r7, #32]
 800209e:	f004 f925 	bl	80062ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ae:	441a      	add	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c0:	441a      	add	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]
 80020c6:	e016      	b.n	80020f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	0c5b      	lsrs	r3, r3, #17
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d110      	bne.n	80020f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020da:	2208      	movs	r2, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	6a38      	ldr	r0, [r7, #32]
 80020e0:	f004 f904 	bl	80062ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f0:	441a      	add	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0210 	orr.w	r2, r2, #16
 8002104:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fa82 	bl	8006614 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800211a:	f040 80a7 	bne.w	800226c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fa87 	bl	800663a <USB_ReadDevAllOutEpInterrupt>
 800212c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800212e:	e099      	b.n	8002264 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 808e 	beq.w	8002258 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f004 faab 	bl	80066a2 <USB_ReadDevOutEPInterrupt>
 800214c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800216a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fe65 	bl	8002e3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002188:	461a      	mov	r2, r3
 800218a:	2308      	movs	r3, #8
 800218c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800218e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fea1 	bl	8002ed8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	2310      	movs	r3, #16
 80021b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d030      	beq.n	800221e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d109      	bne.n	80021dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	78db      	ldrb	r3, [r3, #3]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f006 fcf6 	bl	8008bf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002218:	461a      	mov	r2, r3
 800221a:	2302      	movs	r3, #2
 800221c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	2320      	movs	r3, #32
 8002238:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002250:	461a      	mov	r2, r3
 8002252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002256:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	3301      	adds	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f af62 	bne.w	8002130 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 f9cf 	bl	8006614 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002280:	f040 80a4 	bne.w	80023cc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 f9f0 	bl	800666e <USB_ReadDevAllInEpInterrupt>
 800228e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002294:	e096      	b.n	80023c4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 808b 	beq.w	80023b8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fa16 	bl	80066de <USB_ReadDevInEPInterrupt>
 80022b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	2201      	movs	r2, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69f9      	ldr	r1, [r7, #28]
 80022da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022de:	4013      	ands	r3, r2
 80022e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ee:	461a      	mov	r2, r3
 80022f0:	2301      	movs	r3, #1
 80022f2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f006 fbe7 	bl	8008ace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002316:	461a      	mov	r2, r3
 8002318:	2308      	movs	r3, #8
 800231a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002332:	461a      	mov	r2, r3
 8002334:	2310      	movs	r3, #16
 8002336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234e:	461a      	mov	r2, r3
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d023      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800235e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002360:	6a38      	ldr	r0, [r7, #32]
 8002362:	f003 faad 	bl	80058c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	3338      	adds	r3, #56	; 0x38
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	78db      	ldrb	r3, [r3, #3]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f006 fc44 	bl	8008c1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a0:	461a      	mov	r2, r3
 80023a2:	2302      	movs	r3, #2
 80023a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fcba 	bl	8002d2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f47f af65 	bne.w	8002296 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 f91f 	bl	8006614 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e0:	d122      	bne.n	8002428 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002408:	2100      	movs	r1, #0
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f006 fe64 	bl	80090d8 <HAL_PCDEx_LPM_Callback>
 8002410:	e002      	b.n	8002418 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f006 fbc8 	bl	8008ba8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f004 f8f1 	bl	8006614 <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243c:	d112      	bne.n	8002464 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f006 fb84 	bl	8008b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002462:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f004 f8d3 	bl	8006614 <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002478:	d121      	bne.n	80024be <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002488:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024ae:	2101      	movs	r1, #1
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f006 fe11 	bl	80090d8 <HAL_PCDEx_LPM_Callback>
 80024b6:	e002      	b.n	80024be <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f006 fb4f 	bl	8008b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f004 f8a6 	bl	8006614 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	f040 80b5 	bne.w	8002640 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2110      	movs	r1, #16
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f9e5 	bl	80058c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fa:	e046      	b.n	800258a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002508:	461a      	mov	r2, r3
 800250a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	440a      	add	r2, r1
 8002526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800252a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002542:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002554:	0151      	lsls	r1, r2, #5
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	440a      	add	r2, r1
 800255a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800255e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002562:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002574:	0151      	lsls	r1, r2, #5
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	440a      	add	r2, r1
 800257a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800257e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002582:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	3301      	adds	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002590:	429a      	cmp	r2, r3
 8002592:	d3b3      	bcc.n	80024fc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f043 030b 	orr.w	r3, r3, #11
 80025c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f043 030b 	orr.w	r3, r3, #11
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	e015      	b.n	800260a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002604:	f043 030b 	orr.w	r3, r3, #11
 8002608:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002618:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800261c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f004 f8b6 	bl	800679c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 ffe5 	bl	8006614 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d124      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f87b 	bl	8006756 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 f9a8 	bl	80059ba <USB_GetDevSpeed>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	f001 fb87 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 800267a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f002 fecf 	bl	8005428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f006 fa47 	bl	8008b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800269e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 ffb5 	bl	8006614 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d10a      	bne.n	80026ca <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 fa24 	bl	8008b02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f002 0208 	and.w	r2, r2, #8
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ffa0 	bl	8006614 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d122      	bne.n	8002724 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e014      	b.n	800271a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fadb 	bl	8002cca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	429a      	cmp	r2, r3
 8002722:	d3e5      	bcc.n	80026f0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 ff73 	bl	8006614 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002738:	d13b      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273a:	2301      	movs	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e02b      	b.n	8002798 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3340      	adds	r3, #64	; 0x40
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d115      	bne.n	8002792 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	da12      	bge.n	8002792 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	333f      	adds	r3, #63	; 0x3f
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fa9c 	bl	8002cca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3ce      	bcc.n	8002740 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 ff2c 	bl	8006614 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c6:	d155      	bne.n	8002874 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c8:	2301      	movs	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e045      	b.n	800285a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da2b      	bge.n	8002854 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002808:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002850:	6053      	str	r3, [r2, #4]
            break;
 8002852:	e007      	b.n	8002864 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3301      	adds	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	429a      	cmp	r2, r3
 8002862:	d3b4      	bcc.n	80027ce <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fecb 	bl	8006614 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d10a      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f006 f9d8 	bl	8008c40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 feb5 	bl	8006614 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d115      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f006 f9c8 	bl	8008c5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	e000      	b.n	80028e0 <HAL_PCD_IRQHandler+0x920>
      return;
 80028de:	bf00      	nop
    }
  }
}
 80028e0:	3734      	adds	r7, #52	; 0x34
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_SetAddress+0x1a>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e013      	b.n	8002928 <HAL_PCD_SetAddress+0x42>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fe13 	bl	8006544 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	70fb      	strb	r3, [r7, #3]
 8002942:	460b      	mov	r3, r1
 8002944:	803b      	strh	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800294e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da0f      	bge.n	8002976 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	3338      	adds	r3, #56	; 0x38
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	705a      	strb	r2, [r3, #1]
 8002974:	e00f      	b.n	8002996 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a2:	883a      	ldrh	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	78ba      	ldrb	r2, [r7, #2]
 80029ac:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c0:	78bb      	ldrb	r3, [r7, #2]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d102      	bne.n	80029cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_PCD_EP_Open+0xaa>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e00e      	b.n	80029f8 <HAL_PCD_EP_Open+0xc8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 f805 	bl	80059f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da0f      	bge.n	8002a34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	705a      	strb	r2, [r3, #1]
 8002a32:	e00f      	b.n	8002a54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_EP_Close+0x6e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e00e      	b.n	8002a8c <HAL_PCD_EP_Close+0x8c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 f843 	bl	8005b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f8e9 	bl	8005cc0 <USB_EPStartXfer>

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	460b      	mov	r3, r1
 8002b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6979      	ldr	r1, [r7, #20]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 f8b8 	bl	8005cc0 <USB_EPStartXfer>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d901      	bls.n	8002b78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e04e      	b.n	8002c16 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0f      	bge.n	8002ba0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	3338      	adds	r3, #56	; 0x38
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	705a      	strb	r2, [r3, #1]
 8002b9e:	e00d      	b.n	8002bbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_PCD_EP_SetStall+0x82>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e01c      	b.n	8002c16 <HAL_PCD_EP_SetStall+0xbc>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fbd6 	bl	800639c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f003 fdc8 	bl	800679c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d901      	bls.n	8002c3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e042      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	da0f      	bge.n	8002c64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3338      	adds	r3, #56	; 0x38
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	705a      	strb	r2, [r3, #1]
 8002c62:	e00f      	b.n	8002c84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_EP_ClrStall+0x86>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e00e      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0xa4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fbe0 	bl	8006478 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da0c      	bge.n	8002cf8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	3338      	adds	r3, #56	; 0x38
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e00c      	b.n	8002d12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fa03 	bl	8006124 <USB_EPStopXfer>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3338      	adds	r3, #56	; 0x38
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d901      	bls.n	8002d64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e067      	b.n	8002e34 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d902      	bls.n	8002d80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3303      	adds	r3, #3
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d88:	e026      	b.n	8002dd8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d902      	bls.n	8002da6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3303      	adds	r3, #3
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f003 fa5c 	bl	8006278 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	441a      	add	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d809      	bhi.n	8002e02 <PCD_WriteEmptyTxFifo+0xd6>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d203      	bcs.n	8002e02 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1c3      	bne.n	8002d8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d811      	bhi.n	8002e32 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	2201      	movs	r2, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e2e:	4013      	ands	r3, r2
 8002e30:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	333c      	adds	r3, #60	; 0x3c
 8002e54:	3304      	adds	r3, #4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d124      	bne.n	8002ebc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8e:	6093      	str	r3, [r2, #8]
 8002e90:	e01a      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2320      	movs	r3, #32
 8002eac:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f005 fdef 	bl	8008a98 <HAL_PCD_DataOutStageCallback>
 8002eba:	e005      	b.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 fde8 	bl	8008a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	4f54310a 	.word	0x4f54310a

08002ed8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	333c      	adds	r3, #60	; 0x3c
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <PCD_EP_OutSetupPacket_int+0x64>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d90e      	bls.n	8002f2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f005 fda1 	bl	8008a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	4f54300a 	.word	0x4f54300a

08002f40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f5e:	883b      	ldrh	r3, [r7, #0]
 8002f60:	0419      	lsls	r1, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6c:	e028      	b.n	8002fc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e00d      	b.n	8002f9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3340      	adds	r3, #64	; 0x40
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4413      	add	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3ec      	bcc.n	8002f82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	0418      	lsls	r0, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4302      	orrs	r2, r0
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	f043 0303 	orr.w	r3, r3, #3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_PWREx_GetVoltageRange+0x18>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40007000 	.word	0x40007000

08003074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003082:	d130      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800308c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003090:	d038      	beq.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800309a:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2232      	movs	r2, #50	; 0x32
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0c9b      	lsrs	r3, r3, #18
 80030b4:	3301      	adds	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b8:	e002      	b.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b01      	subs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d102      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f2      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d110      	bne.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d007      	beq.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40007000 	.word	0x40007000
 8003118:	20000000 	.word	0x20000000
 800311c:	431bde83 	.word	0x431bde83

08003120 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_PWREx_EnableVddUSB+0x1c>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6053      	str	r3, [r2, #4]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40007000 	.word	0x40007000

08003140 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fe f882 	bl	8001250 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e063      	b.n	8003220 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fe41 	bl	8000df4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003172:	f241 3188 	movw	r1, #5000	; 0x1388
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f858 	bl	800322c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	2120      	movs	r1, #32
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f850 	bl	8003248 <QSPI_WaitFlagStateUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80031ac:	7afb      	ldrb	r3, [r7, #11]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d131      	bne.n	8003216 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031bc:	f023 0310 	bic.w	r3, r3, #16
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6852      	ldr	r2, [r2, #4]
 80031c4:	0611      	lsls	r1, r2, #24
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_QSPI_Init+0xe8>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6912      	ldr	r2, [r2, #16]
 80031e2:	0411      	lsls	r1, r2, #16
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6952      	ldr	r2, [r2, #20]
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6992      	ldr	r2, [r2, #24]
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800321e:	7afb      	ldrb	r3, [r7, #11]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	ffe0f8fe 	.word	0xffe0f8fe

0800322c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003258:	e01a      	b.n	8003290 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d016      	beq.n	8003290 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fd fff5 	bl	8001250 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2204      	movs	r2, #4
 800327c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e00e      	b.n	80032ae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1d6      	bne.n	800325a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e3ca      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ca:	4b97      	ldr	r3, [pc, #604]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d4:	4b94      	ldr	r3, [pc, #592]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80e4 	beq.w	80034b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_RCC_OscConfig+0x4a>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	f040 808b 	bne.w	8003410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 8087 	bne.w	8003410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003302:	4b89      	ldr	r3, [pc, #548]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e3a2      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	4b82      	ldr	r3, [pc, #520]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_RCC_OscConfig+0x7c>
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003332:	e005      	b.n	8003340 <HAL_RCC_OscConfig+0x88>
 8003334:	4b7c      	ldr	r3, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	4293      	cmp	r3, r2
 8003342:	d223      	bcs.n	800338c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd55 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e383      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003358:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a72      	ldr	r2, [pc, #456]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b70      	ldr	r3, [pc, #448]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	496d      	ldr	r1, [pc, #436]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003376:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	4968      	ldr	r1, [pc, #416]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
 800338a:	e025      	b.n	80033d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338c:	4b66      	ldr	r3, [pc, #408]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a65      	ldr	r2, [pc, #404]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003392:	f043 0308 	orr.w	r3, r3, #8
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b63      	ldr	r3, [pc, #396]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4960      	ldr	r1, [pc, #384]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033aa:	4b5f      	ldr	r3, [pc, #380]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	495b      	ldr	r1, [pc, #364]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fd15 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e343      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d8:	f000 fc4a 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b52      	ldr	r3, [pc, #328]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	4950      	ldr	r1, [pc, #320]	; (800352c <HAL_RCC_OscConfig+0x274>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	4a4e      	ldr	r2, [pc, #312]	; (8003530 <HAL_RCC_OscConfig+0x278>)
 80033f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033f8:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fed7 	bl	80011b0 <HAL_InitTick>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d052      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	e327      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d032      	beq.n	800347e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003424:	f7fd ff14 	bl	8001250 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800342c:	f7fd ff10 	bl	8001250 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e310      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a36      	ldr	r2, [pc, #216]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4931      	ldr	r1, [pc, #196]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	492c      	ldr	r1, [pc, #176]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e01a      	b.n	80034b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348a:	f7fd fee1 	bl	8001250 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003492:	f7fd fedd 	bl	8001250 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e2dd      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x1da>
 80034b0:	e000      	b.n	80034b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d074      	beq.n	80035aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x21a>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d10e      	bne.n	80034ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d10b      	bne.n	80034ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d064      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2f0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d160      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e2ba      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x24a>
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e026      	b.n	8003550 <HAL_RCC_OscConfig+0x298>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350a:	d115      	bne.n	8003538 <HAL_RCC_OscConfig+0x280>
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 8003512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a02      	ldr	r2, [pc, #8]	; (8003528 <HAL_RCC_OscConfig+0x270>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x298>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	08009284 	.word	0x08009284
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004
 8003538:	4ba0      	ldr	r3, [pc, #640]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a9f      	ldr	r2, [pc, #636]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b9d      	ldr	r3, [pc, #628]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a9c      	ldr	r2, [pc, #624]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd fe7a 	bl	8001250 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fd fe76 	bl	8001250 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e276      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x2a8>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fe66 	bl	8001250 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fd fe62 	bl	8001250 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e262      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x2d0>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d060      	beq.n	8003678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_OscConfig+0x310>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d116      	bne.n	80035f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c8:	4b7c      	ldr	r3, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x328>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e23f      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	4973      	ldr	r1, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f4:	e040      	b.n	8003678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d023      	beq.n	8003646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fd fe21 	bl	8001250 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003612:	f7fd fe1d 	bl	8001250 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e21d      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003624:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	495f      	ldr	r1, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	e018      	b.n	8003678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800364c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fdfd 	bl	8001250 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fd fdf9 	bl	8001250 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1f9      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03c      	beq.n	80036fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003692:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fdd8 	bl	8001250 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd fdd4 	bl	8001250 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1d4      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80036b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ef      	beq.n	80036a4 <HAL_RCC_OscConfig+0x3ec>
 80036c4:	e01b      	b.n	80036fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80036c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fdbb 	bl	8001250 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036de:	f7fd fdb7 	bl	8001250 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1b7      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80036f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ef      	bne.n	80036de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a6 	beq.w	8003858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370c:	2300      	movs	r3, #0
 800370e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003734:	2301      	movs	r3, #1
 8003736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCC_OscConfig+0x508>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d118      	bne.n	8003776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_OscConfig+0x508>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_RCC_OscConfig+0x508>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003750:	f7fd fd7e 	bl	8001250 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fd fd7a 	bl	8001250 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e17a      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_RCC_OscConfig+0x508>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d108      	bne.n	8003790 <HAL_RCC_OscConfig+0x4d8>
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378e:	e029      	b.n	80037e4 <HAL_RCC_OscConfig+0x52c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d115      	bne.n	80037c4 <HAL_RCC_OscConfig+0x50c>
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x504>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b8:	e014      	b.n	80037e4 <HAL_RCC_OscConfig+0x52c>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
 80037c4:	4b9c      	ldr	r3, [pc, #624]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a9b      	ldr	r2, [pc, #620]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d4:	4b98      	ldr	r3, [pc, #608]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	4a97      	ldr	r2, [pc, #604]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fd30 	bl	8001250 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fd fd2c 	bl	8001250 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e12a      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	4b8b      	ldr	r3, [pc, #556]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ed      	beq.n	80037f4 <HAL_RCC_OscConfig+0x53c>
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fd fd19 	bl	8001250 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fd15 	bl	8001250 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e113      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003838:	4b7f      	ldr	r3, [pc, #508]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ed      	bne.n	8003822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003846:	7ffb      	ldrb	r3, [r7, #31]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384c:	4b7a      	ldr	r3, [pc, #488]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003856:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80fe 	beq.w	8003a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	2b02      	cmp	r3, #2
 8003868:	f040 80d0 	bne.w	8003a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800386c:	4b72      	ldr	r3, [pc, #456]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	429a      	cmp	r2, r3
 800387e:	d130      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	3b01      	subs	r3, #1
 800388c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d127      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d11f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ac:	2a07      	cmp	r2, #7
 80038ae:	bf14      	ite	ne
 80038b0:	2201      	movne	r2, #1
 80038b2:	2200      	moveq	r2, #0
 80038b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d109      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d06e      	beq.n	80039c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d069      	beq.n	80039bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0ad      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4b      	ldr	r2, [pc, #300]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003910:	f7fd fc9e 	bl	8001250 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fc9a 	bl	8001250 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e09a      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <HAL_RCC_OscConfig+0x784>)
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003946:	3a01      	subs	r2, #1
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003950:	0212      	lsls	r2, r2, #8
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003958:	0852      	lsrs	r2, r2, #1
 800395a:	3a01      	subs	r2, #1
 800395c:	0552      	lsls	r2, r2, #21
 800395e:	4311      	orrs	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003964:	0852      	lsrs	r2, r2, #1
 8003966:	3a01      	subs	r2, #1
 8003968:	0652      	lsls	r2, r2, #25
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003970:	0912      	lsrs	r2, r2, #4
 8003972:	0452      	lsls	r2, r2, #17
 8003974:	430a      	orrs	r2, r1
 8003976:	4930      	ldr	r1, [pc, #192]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003978:	4313      	orrs	r3, r2
 800397a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800397c:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 800398e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003994:	f7fd fc5c 	bl	8001250 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fc58 	bl	8001250 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e058      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ba:	e050      	b.n	8003a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e04f      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d148      	bne.n	8003a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e4:	f7fd fc34 	bl	8001250 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fc30 	bl	8001250 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e030      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x734>
 8003a0a:	e028      	b.n	8003a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d023      	beq.n	8003a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <HAL_RCC_OscConfig+0x780>)
 8003a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fc17 	bl	8001250 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a24:	e00c      	b.n	8003a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a26:	f7fd fc13 	bl	8001250 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d905      	bls.n	8003a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e013      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_OscConfig+0x7b0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ec      	bne.n	8003a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x7b0>)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4905      	ldr	r1, [pc, #20]	; (8003a68 <HAL_RCC_OscConfig+0x7b0>)
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_OscConfig+0x7b4>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
 8003a58:	e001      	b.n	8003a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	feeefffc 	.word	0xfeeefffc

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0e7      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b72      	ldr	r3, [pc, #456]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 0207 	bic.w	r2, r3, #7
 8003a9a:	4970      	ldr	r1, [pc, #448]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0cf      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d908      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4960      	ldr	r1, [pc, #384]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04c      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d121      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0a6      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0e:	4b54      	ldr	r3, [pc, #336]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e09a      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b26:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e08e      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e086      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4943      	ldr	r1, [pc, #268]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd fb7a 	bl	8001250 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fd fb76 	bl	8001250 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e06e      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d208      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	492b      	ldr	r1, [pc, #172]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d210      	bcs.n	8003be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 0207 	bic.w	r2, r3, #7
 8003bcc:	4923      	ldr	r1, [pc, #140]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCC_ClockConfig+0x1ec>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e036      	b.n	8003c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4918      	ldr	r1, [pc, #96]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4910      	ldr	r1, [pc, #64]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c24:	f000 f824 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	490b      	ldr	r1, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x1f4>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1fc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd fab1 	bl	80011b0 <HAL_InitTick>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c52:	7afb      	ldrb	r3, [r7, #11]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40021000 	.word	0x40021000
 8003c64:	08009284 	.word	0x08009284
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000004 	.word	0x20000004

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d121      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11e      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca4:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e005      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e004      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf4:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d134      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d003      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0xac>
 8003d14:	e005      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d18:	617b      	str	r3, [r7, #20]
      break;
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d1e:	617b      	str	r3, [r7, #20]
      break;
 8003d20:	e002      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	617b      	str	r3, [r7, #20]
      break;
 8003d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	3301      	adds	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	fb03 f202 	mul.w	r2, r3, r2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	0e5b      	lsrs	r3, r3, #25
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d68:	69bb      	ldr	r3, [r7, #24]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	0800929c 	.word	0x0800929c
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	007a1200 	.word	0x007a1200

08003d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000000 	.word	0x20000000

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	08009294 	.word	0x08009294

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd0:	f7ff ffda 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0adb      	lsrs	r3, r3, #11
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4904      	ldr	r1, [pc, #16]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	08009294 	.word	0x08009294

08003df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e04:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e10:	f7ff f922 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 8003e14:	6178      	str	r0, [r7, #20]
 8003e16:	e014      	b.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	; 0x58
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e30:	f7ff f912 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 8003e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e48:	d10b      	bne.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d919      	bls.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2ba0      	cmp	r3, #160	; 0xa0
 8003e54:	d902      	bls.n	8003e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e56:	2302      	movs	r3, #2
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e013      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e010      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d902      	bls.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e68:	2303      	movs	r3, #3
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e00a      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d102      	bne.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e74:	2302      	movs	r3, #2
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	e004      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d101      	bne.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e80:	2301      	movs	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 0207 	bic.w	r2, r3, #7
 8003e8c:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40022000 	.word	0x40022000

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d041      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003edc:	d02a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee2:	d824      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eee:	d81e      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efa:	e018      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003efc:	4b86      	ldr	r3, [pc, #536]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a85      	ldr	r2, [pc, #532]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 facb 	bl	80044ac <RCCEx_PLLSAI1_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1a:	e00c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3320      	adds	r3, #32
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fbb6 	bl	8004694 <RCCEx_PLLSAI2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	74fb      	strb	r3, [r7, #19]
      break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3c:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4a:	4973      	ldr	r1, [pc, #460]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f52:	e001      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d041      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f6c:	d02a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f72:	d824      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7e:	d81e      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f88:	d010      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f8a:	e018      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f8c:	4b62      	ldr	r3, [pc, #392]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a61      	ldr	r2, [pc, #388]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fa83 	bl	80044ac <RCCEx_PLLSAI1_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3320      	adds	r3, #32
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fb6e 	bl	8004694 <RCCEx_PLLSAI2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fcc:	4b52      	ldr	r3, [pc, #328]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fda:	494f      	ldr	r1, [pc, #316]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	4a40      	ldr	r2, [pc, #256]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	; 0x58
 800401c:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004028:	2301      	movs	r3, #1
 800402a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402c:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a3a      	ldr	r2, [pc, #232]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004038:	f7fd f90a 	bl	8001250 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403e:	e009      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004040:	f7fd f906 	bl	8001250 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	74fb      	strb	r3, [r7, #19]
        break;
 8004052:	e005      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ef      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d15c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	429a      	cmp	r2, r3
 8004082:	d019      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004090:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd f8c5 	bl	8001250 <HAL_GetTick>
 80040c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c8:	e00b      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd f8c1 	bl	8001250 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d902      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	74fb      	strb	r3, [r7, #19]
            break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ec      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	4904      	ldr	r1, [pc, #16]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800410e:	e009      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7c7b      	ldrb	r3, [r7, #17]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b9e      	ldr	r3, [pc, #632]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	4a9d      	ldr	r2, [pc, #628]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004142:	4b98      	ldr	r3, [pc, #608]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f023 0203 	bic.w	r2, r3, #3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	4994      	ldr	r1, [pc, #592]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004164:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 020c 	bic.w	r2, r3, #12
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	498c      	ldr	r1, [pc, #560]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004186:	4b87      	ldr	r3, [pc, #540]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	4983      	ldr	r1, [pc, #524]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a8:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	497b      	ldr	r1, [pc, #492]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	4972      	ldr	r1, [pc, #456]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ec:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	496a      	ldr	r1, [pc, #424]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	4961      	ldr	r1, [pc, #388]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004230:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	4959      	ldr	r1, [pc, #356]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004252:	4b54      	ldr	r3, [pc, #336]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004260:	4950      	ldr	r1, [pc, #320]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004274:	4b4b      	ldr	r3, [pc, #300]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	4948      	ldr	r1, [pc, #288]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004296:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	493f      	ldr	r1, [pc, #252]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d028      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b8:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	4937      	ldr	r1, [pc, #220]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
 80042e4:	e011      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ee:	d10c      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f8d8 	bl	80044ac <RCCEx_PLLSAI1_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d028      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	491f      	ldr	r1, [pc, #124]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004334:	d106      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004340:	60d3      	str	r3, [r2, #12]
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434c:	d10c      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f8a9 	bl	80044ac <RCCEx_PLLSAI1_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02b      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004392:	d109      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a02      	ldr	r2, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439e:	60d3      	str	r3, [r2, #12]
 80043a0:	e014      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f877 	bl	80044ac <RCCEx_PLLSAI1_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e6:	4928      	ldr	r1, [pc, #160]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f6:	d10d      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f854 	bl	80044ac <RCCEx_PLLSAI1_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d014      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	74bb      	strb	r3, [r7, #18]
 8004412:	e011      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441c:	d10c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3320      	adds	r3, #32
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f935 	bl	8004694 <RCCEx_PLLSAI2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004452:	490d      	ldr	r1, [pc, #52]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800447e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000

080044ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ba:	4b75      	ldr	r3, [pc, #468]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d018      	beq.n	80044f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0203 	and.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d10d      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
       ||
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044de:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
       ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d047      	beq.n	8004582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	e044      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d018      	beq.n	8004532 <RCCEx_PLLSAI1_Config+0x86>
 8004500:	2b03      	cmp	r3, #3
 8004502:	d825      	bhi.n	8004550 <RCCEx_PLLSAI1_Config+0xa4>
 8004504:	2b01      	cmp	r3, #1
 8004506:	d002      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x62>
 8004508:	2b02      	cmp	r3, #2
 800450a:	d009      	beq.n	8004520 <RCCEx_PLLSAI1_Config+0x74>
 800450c:	e020      	b.n	8004550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450e:	4b60      	ldr	r3, [pc, #384]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11d      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451e:	e01a      	b.n	8004556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004520:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d116      	bne.n	800455a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e013      	b.n	800455a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004532:	4b57      	ldr	r3, [pc, #348]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800453e:	4b54      	ldr	r3, [pc, #336]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800454e:	e006      	b.n	800455e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      break;
 8004554:	e004      	b.n	8004560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	430b      	orrs	r3, r1
 800457c:	4944      	ldr	r1, [pc, #272]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	4313      	orrs	r3, r2
 8004580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d17d      	bne.n	8004684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004588:	4b41      	ldr	r3, [pc, #260]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a40      	ldr	r2, [pc, #256]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fc fe5c 	bl	8001250 <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459c:	f7fc fe58 	bl	8001250 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
        break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b0:	4b37      	ldr	r3, [pc, #220]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ef      	bne.n	800459c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d160      	bne.n	8004684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d111      	bne.n	80045ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c8:	4b31      	ldr	r3, [pc, #196]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	0211      	lsls	r1, r2, #8
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68d2      	ldr	r2, [r2, #12]
 80045de:	0912      	lsrs	r2, r2, #4
 80045e0:	0452      	lsls	r2, r2, #17
 80045e2:	430a      	orrs	r2, r1
 80045e4:	492a      	ldr	r1, [pc, #168]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	610b      	str	r3, [r1, #16]
 80045ea:	e027      	b.n	800463c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d112      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6892      	ldr	r2, [r2, #8]
 8004602:	0211      	lsls	r1, r2, #8
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6912      	ldr	r2, [r2, #16]
 8004608:	0852      	lsrs	r2, r2, #1
 800460a:	3a01      	subs	r2, #1
 800460c:	0552      	lsls	r2, r2, #21
 800460e:	430a      	orrs	r2, r1
 8004610:	491f      	ldr	r1, [pc, #124]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	610b      	str	r3, [r1, #16]
 8004616:	e011      	b.n	800463c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004618:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6892      	ldr	r2, [r2, #8]
 8004628:	0211      	lsls	r1, r2, #8
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6952      	ldr	r2, [r2, #20]
 800462e:	0852      	lsrs	r2, r2, #1
 8004630:	3a01      	subs	r2, #1
 8004632:	0652      	lsls	r2, r2, #25
 8004634:	430a      	orrs	r2, r1
 8004636:	4916      	ldr	r1, [pc, #88]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a13      	ldr	r2, [pc, #76]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fc fe02 	bl	8001250 <HAL_GetTick>
 800464c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464e:	e009      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004650:	f7fc fdfe 	bl	8001250 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d902      	bls.n	8004664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	73fb      	strb	r3, [r7, #15]
          break;
 8004662:	e005      	b.n	8004670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ef      	beq.n	8004650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	4904      	ldr	r1, [pc, #16]	; (8004690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000

08004694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a2:	4b6a      	ldr	r3, [pc, #424]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0203 	and.w	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10d      	bne.n	80046da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
       ||
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046c6:	4b61      	ldr	r3, [pc, #388]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
       ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d047      	beq.n	800476a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
 80046de:	e044      	b.n	800476a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d018      	beq.n	800471a <RCCEx_PLLSAI2_Config+0x86>
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d825      	bhi.n	8004738 <RCCEx_PLLSAI2_Config+0xa4>
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d002      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0x62>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d009      	beq.n	8004708 <RCCEx_PLLSAI2_Config+0x74>
 80046f4:	e020      	b.n	8004738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046f6:	4b55      	ldr	r3, [pc, #340]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004706:	e01a      	b.n	800473e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e013      	b.n	8004742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800471a:	4b4c      	ldr	r3, [pc, #304]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004726:	4b49      	ldr	r3, [pc, #292]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004736:	e006      	b.n	8004746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e004      	b.n	8004748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004746:	bf00      	nop
    }

    if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	430b      	orrs	r3, r1
 8004764:	4939      	ldr	r1, [pc, #228]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d167      	bne.n	8004840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a35      	ldr	r2, [pc, #212]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fc fd68 	bl	8001250 <HAL_GetTick>
 8004780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004782:	e009      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004784:	f7fc fd64 	bl	8001250 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	73fb      	strb	r3, [r7, #15]
        break;
 8004796:	e005      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004798:	4b2c      	ldr	r3, [pc, #176]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ef      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d14a      	bne.n	8004840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d111      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b0:	4b26      	ldr	r3, [pc, #152]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	0912      	lsrs	r2, r2, #4
 80047c8:	0452      	lsls	r2, r2, #17
 80047ca:	430a      	orrs	r2, r1
 80047cc:	491f      	ldr	r1, [pc, #124]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	614b      	str	r3, [r1, #20]
 80047d2:	e011      	b.n	80047f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	0211      	lsls	r1, r2, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6912      	ldr	r2, [r2, #16]
 80047ea:	0852      	lsrs	r2, r2, #1
 80047ec:	3a01      	subs	r2, #1
 80047ee:	0652      	lsls	r2, r2, #25
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4916      	ldr	r1, [pc, #88]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fc fd24 	bl	8001250 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800480a:	e009      	b.n	8004820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800480c:	f7fc fd20 	bl	8001250 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d902      	bls.n	8004820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	73fb      	strb	r3, [r7, #15]
          break;
 800481e:	e005      	b.n	800482c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ef      	beq.n	800480c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4904      	ldr	r1, [pc, #16]	; (800484c <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000

08004850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e095      	b.n	800498e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
 800487a:	e005      	b.n	8004888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc faea 	bl	8000e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c8:	d902      	bls.n	80048d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e002      	b.n	80048d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048de:	d007      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	ea42 0103 	orr.w	r1, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	0c1b      	lsrs	r3, r3, #16
 800494c:	f003 0204 	and.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e040      	b.n	8004a2a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fc faa3 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2224      	movs	r2, #36	; 0x24
 80049c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fae1 	bl	8004fa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f826 	bl	8004a34 <UART_SetConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e01b      	b.n	8004a2a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb60 	bl	80050e8 <UART_CheckIdleState>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a38:	b08a      	sub	sp, #40	; 0x28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4ba4      	ldr	r3, [pc, #656]	; (8004cf4 <UART_SetConfig+0x2c0>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a99      	ldr	r2, [pc, #612]	; (8004cf8 <UART_SetConfig+0x2c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <UART_SetConfig+0x2c8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d126      	bne.n	8004b0c <UART_SetConfig+0xd8>
 8004abe:	4b90      	ldr	r3, [pc, #576]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d81b      	bhi.n	8004b04 <UART_SetConfig+0xd0>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0xa0>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e116      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e112      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e10e      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e10a      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e106      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7c      	ldr	r2, [pc, #496]	; (8004d04 <UART_SetConfig+0x2d0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d138      	bne.n	8004b88 <UART_SetConfig+0x154>
 8004b16:	4b7a      	ldr	r3, [pc, #488]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	d82d      	bhi.n	8004b80 <UART_SetConfig+0x14c>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0xf8>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b81 	.word	0x08004b81
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004b81 	.word	0x08004b81
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b81 	.word	0x08004b81
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e0d8      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e0d4      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e0d0      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e0cc      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e0c8      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5e      	ldr	r2, [pc, #376]	; (8004d08 <UART_SetConfig+0x2d4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d125      	bne.n	8004bde <UART_SetConfig+0x1aa>
 8004b92:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d016      	beq.n	8004bce <UART_SetConfig+0x19a>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d818      	bhi.n	8004bd6 <UART_SetConfig+0x1a2>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d00a      	beq.n	8004bbe <UART_SetConfig+0x18a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d814      	bhi.n	8004bd6 <UART_SetConfig+0x1a2>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <UART_SetConfig+0x182>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d008      	beq.n	8004bc6 <UART_SetConfig+0x192>
 8004bb4:	e00f      	b.n	8004bd6 <UART_SetConfig+0x1a2>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbc:	e0ad      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc4:	e0a9      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bcc:	e0a5      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004bce:	2308      	movs	r3, #8
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e0a1      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e09d      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4a      	ldr	r2, [pc, #296]	; (8004d0c <UART_SetConfig+0x2d8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d125      	bne.n	8004c34 <UART_SetConfig+0x200>
 8004be8:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf4:	d016      	beq.n	8004c24 <UART_SetConfig+0x1f0>
 8004bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf8:	d818      	bhi.n	8004c2c <UART_SetConfig+0x1f8>
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d00a      	beq.n	8004c14 <UART_SetConfig+0x1e0>
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d814      	bhi.n	8004c2c <UART_SetConfig+0x1f8>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <UART_SetConfig+0x1d8>
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d008      	beq.n	8004c1c <UART_SetConfig+0x1e8>
 8004c0a:	e00f      	b.n	8004c2c <UART_SetConfig+0x1f8>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e082      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c14:	2302      	movs	r3, #2
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e07e      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e07a      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e076      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e072      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <UART_SetConfig+0x2dc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d12a      	bne.n	8004c94 <UART_SetConfig+0x260>
 8004c3e:	4b30      	ldr	r3, [pc, #192]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4c:	d01a      	beq.n	8004c84 <UART_SetConfig+0x250>
 8004c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c52:	d81b      	bhi.n	8004c8c <UART_SetConfig+0x258>
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c58:	d00c      	beq.n	8004c74 <UART_SetConfig+0x240>
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5e:	d815      	bhi.n	8004c8c <UART_SetConfig+0x258>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <UART_SetConfig+0x238>
 8004c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c68:	d008      	beq.n	8004c7c <UART_SetConfig+0x248>
 8004c6a:	e00f      	b.n	8004c8c <UART_SetConfig+0x258>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e052      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c74:	2302      	movs	r3, #2
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e04e      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e04a      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e046      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e042      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <UART_SetConfig+0x2c4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d13a      	bne.n	8004d14 <UART_SetConfig+0x2e0>
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <UART_SetConfig+0x2cc>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cac:	d01a      	beq.n	8004ce4 <UART_SetConfig+0x2b0>
 8004cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb2:	d81b      	bhi.n	8004cec <UART_SetConfig+0x2b8>
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb8:	d00c      	beq.n	8004cd4 <UART_SetConfig+0x2a0>
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbe:	d815      	bhi.n	8004cec <UART_SetConfig+0x2b8>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <UART_SetConfig+0x298>
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0x2a8>
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x2b8>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e022      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e01e      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e01a      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e016      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e012      	b.n	8004d1a <UART_SetConfig+0x2e6>
 8004cf4:	efff69f3 	.word	0xefff69f3
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	40005000 	.word	0x40005000
 8004d14:	2310      	movs	r3, #16
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a9f      	ldr	r2, [pc, #636]	; (8004f9c <UART_SetConfig+0x568>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d17a      	bne.n	8004e1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d824      	bhi.n	8004d76 <UART_SetConfig+0x342>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x300>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d77 	.word	0x08004d77
 8004d44:	08004d67 	.word	0x08004d67
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d77 	.word	0x08004d77
 8004d50:	08004d77 	.word	0x08004d77
 8004d54:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7ff f822 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
        break;
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b8f      	ldr	r3, [pc, #572]	; (8004fa0 <UART_SetConfig+0x56c>)
 8004d62:	61fb      	str	r3, [r7, #28]
        break;
 8004d64:	e00d      	b.n	8004d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe ff83 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61f8      	str	r0, [r7, #28]
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61fb      	str	r3, [r7, #28]
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80fb 	beq.w	8004f80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d305      	bcc.n	8004da6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d903      	bls.n	8004dae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dac:	e0e8      	b.n	8004f80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2200      	movs	r2, #0
 8004db2:	461c      	mov	r4, r3
 8004db4:	4615      	mov	r5, r2
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	022b      	lsls	r3, r5, #8
 8004dc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dc4:	0222      	lsls	r2, r4, #8
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6849      	ldr	r1, [r1, #4]
 8004dca:	0849      	lsrs	r1, r1, #1
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4688      	mov	r8, r1
 8004dd0:	4681      	mov	r9, r0
 8004dd2:	eb12 0a08 	adds.w	sl, r2, r8
 8004dd6:	eb43 0b09 	adc.w	fp, r3, r9
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de8:	4650      	mov	r0, sl
 8004dea:	4659      	mov	r1, fp
 8004dec:	f7fb f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfe:	d308      	bcc.n	8004e12 <UART_SetConfig+0x3de>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e06:	d204      	bcs.n	8004e12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	e0b6      	b.n	8004f80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e18:	e0b2      	b.n	8004f80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e22:	d15e      	bne.n	8004ee2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d828      	bhi.n	8004e7e <UART_SetConfig+0x44a>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <UART_SetConfig+0x400>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e69 	.word	0x08004e69
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e6f 	.word	0x08004e6f
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e7f 	.word	0x08004e7f
 8004e50:	08004e7f 	.word	0x08004e7f
 8004e54:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e58:	f7fe ffa2 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8004e5c:	61f8      	str	r0, [r7, #28]
        break;
 8004e5e:	e014      	b.n	8004e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe ffb4 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8004e64:	61f8      	str	r0, [r7, #28]
        break;
 8004e66:	e010      	b.n	8004e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e68:	4b4d      	ldr	r3, [pc, #308]	; (8004fa0 <UART_SetConfig+0x56c>)
 8004e6a:	61fb      	str	r3, [r7, #28]
        break;
 8004e6c:	e00d      	b.n	8004e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7fe feff 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8004e72:	61f8      	str	r0, [r7, #28]
        break;
 8004e74:	e009      	b.n	8004e8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	61fb      	str	r3, [r7, #28]
        break;
 8004e7c:	e005      	b.n	8004e8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d077      	beq.n	8004f80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005a      	lsls	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	441a      	add	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d916      	bls.n	8004eda <UART_SetConfig+0x4a6>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb2:	d212      	bcs.n	8004eda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f023 030f 	bic.w	r3, r3, #15
 8004ebc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	8afa      	ldrh	r2, [r7, #22]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	e052      	b.n	8004f80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ee0:	e04e      	b.n	8004f80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d827      	bhi.n	8004f3a <UART_SetConfig+0x506>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x4bc>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f3b 	.word	0x08004f3b
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f3b 	.word	0x08004f3b
 8004f08:	08004f3b 	.word	0x08004f3b
 8004f0c:	08004f3b 	.word	0x08004f3b
 8004f10:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe ff44 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8004f18:	61f8      	str	r0, [r7, #28]
        break;
 8004f1a:	e014      	b.n	8004f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7fe ff56 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8004f20:	61f8      	str	r0, [r7, #28]
        break;
 8004f22:	e010      	b.n	8004f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <UART_SetConfig+0x56c>)
 8004f26:	61fb      	str	r3, [r7, #28]
        break;
 8004f28:	e00d      	b.n	8004f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7fe fea1 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	61f8      	str	r0, [r7, #28]
        break;
 8004f30:	e009      	b.n	8004f46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e005      	b.n	8004f46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f44:	bf00      	nop
    }

    if (pclk != 0U)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085a      	lsrs	r2, r3, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	d909      	bls.n	8004f7a <UART_SetConfig+0x546>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d205      	bcs.n	8004f7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	e002      	b.n	8004f80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40008000 	.word	0x40008000
 8004fa0:	00f42400 	.word	0x00f42400

08004fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01a      	beq.n	80050ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a2:	d10a      	bne.n	80050ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b098      	sub	sp, #96	; 0x60
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f8:	f7fc f8aa 	bl	8001250 <HAL_GetTick>
 80050fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d12e      	bne.n	800516a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005114:	2200      	movs	r2, #0
 8005116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f88c 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d021      	beq.n	800516a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	647b      	str	r3, [r7, #68]	; 0x44
 8005146:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800514a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e062      	b.n	8005230 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d149      	bne.n	800520c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f856 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d03c      	beq.n	800520c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	623b      	str	r3, [r7, #32]
   return(result);
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e4:	61fa      	str	r2, [r7, #28]
 80051e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	617b      	str	r3, [r7, #20]
   return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e5      	bne.n	80051c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e011      	b.n	8005230 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3758      	adds	r7, #88	; 0x58
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005248:	e049      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d045      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fb fffd 	bl	8001250 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <UART_WaitOnFlagUntilTimeout+0x30>
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e048      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d031      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b08      	cmp	r3, #8
 8005286:	d110      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2208      	movs	r2, #8
 800528e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f838 	bl	8005306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2208      	movs	r2, #8
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e029      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b8:	d111      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f81e 	bl	8005306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e00f      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d0a6      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005306:	b480      	push	{r7}
 8005308:	b095      	sub	sp, #84	; 0x54
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	2b01      	cmp	r3, #1
 800537a:	d118      	bne.n	80053ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	60bb      	str	r3, [r7, #8]
   return(result);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6979      	ldr	r1, [r7, #20]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	613b      	str	r3, [r7, #16]
   return(result);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3754      	adds	r7, #84	; 0x54
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053ce:	b084      	sub	sp, #16
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	f107 001c 	add.w	r0, r7, #28
 80053dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fa1d 	bl	800682c <USB_CoreReset>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80053f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
 8005408:	e005      	b.n	8005416 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005422:	b004      	add	sp, #16
 8005424:	4770      	bx	lr
	...

08005428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d165      	bne.n	8005508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a3e      	ldr	r2, [pc, #248]	; (8005538 <USB_SetTurnaroundTime+0x110>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d906      	bls.n	8005452 <USB_SetTurnaroundTime+0x2a>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a3d      	ldr	r2, [pc, #244]	; (800553c <USB_SetTurnaroundTime+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d202      	bcs.n	8005452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800544c:	230f      	movs	r3, #15
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e05c      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4a39      	ldr	r2, [pc, #228]	; (800553c <USB_SetTurnaroundTime+0x114>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d306      	bcc.n	8005468 <USB_SetTurnaroundTime+0x40>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4a38      	ldr	r2, [pc, #224]	; (8005540 <USB_SetTurnaroundTime+0x118>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d202      	bcs.n	8005468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005462:	230e      	movs	r3, #14
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e051      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4a35      	ldr	r2, [pc, #212]	; (8005540 <USB_SetTurnaroundTime+0x118>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d306      	bcc.n	800547e <USB_SetTurnaroundTime+0x56>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <USB_SetTurnaroundTime+0x11c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d202      	bcs.n	800547e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005478:	230d      	movs	r3, #13
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e046      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a30      	ldr	r2, [pc, #192]	; (8005544 <USB_SetTurnaroundTime+0x11c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d306      	bcc.n	8005494 <USB_SetTurnaroundTime+0x6c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a2f      	ldr	r2, [pc, #188]	; (8005548 <USB_SetTurnaroundTime+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d802      	bhi.n	8005494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800548e:	230c      	movs	r3, #12
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e03b      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <USB_SetTurnaroundTime+0x120>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d906      	bls.n	80054aa <USB_SetTurnaroundTime+0x82>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a2b      	ldr	r2, [pc, #172]	; (800554c <USB_SetTurnaroundTime+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d802      	bhi.n	80054aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054a4:	230b      	movs	r3, #11
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e030      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <USB_SetTurnaroundTime+0x124>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d906      	bls.n	80054c0 <USB_SetTurnaroundTime+0x98>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a26      	ldr	r2, [pc, #152]	; (8005550 <USB_SetTurnaroundTime+0x128>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ba:	230a      	movs	r3, #10
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e025      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a23      	ldr	r2, [pc, #140]	; (8005550 <USB_SetTurnaroundTime+0x128>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d906      	bls.n	80054d6 <USB_SetTurnaroundTime+0xae>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a22      	ldr	r2, [pc, #136]	; (8005554 <USB_SetTurnaroundTime+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d202      	bcs.n	80054d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054d0:	2309      	movs	r3, #9
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e01a      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <USB_SetTurnaroundTime+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d306      	bcc.n	80054ec <USB_SetTurnaroundTime+0xc4>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <USB_SetTurnaroundTime+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054e6:	2308      	movs	r3, #8
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e00f      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <USB_SetTurnaroundTime+0x130>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <USB_SetTurnaroundTime+0xda>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a19      	ldr	r2, [pc, #100]	; (800555c <USB_SetTurnaroundTime+0x134>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d202      	bcs.n	8005502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054fc:	2307      	movs	r3, #7
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e004      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005502:	2306      	movs	r3, #6
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e001      	b.n	800550c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005508:	2309      	movs	r3, #9
 800550a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	00d8acbf 	.word	0x00d8acbf
 800553c:	00e4e1c0 	.word	0x00e4e1c0
 8005540:	00f42400 	.word	0x00f42400
 8005544:	01067380 	.word	0x01067380
 8005548:	011a499f 	.word	0x011a499f
 800554c:	01312cff 	.word	0x01312cff
 8005550:	014ca43f 	.word	0x014ca43f
 8005554:	016e3600 	.word	0x016e3600
 8005558:	01a6ab1f 	.word	0x01a6ab1f
 800555c:	01e84800 	.word	0x01e84800

08005560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f043 0201 	orr.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d115      	bne.n	80055f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055d2:	2001      	movs	r0, #1
 80055d4:	f7fb fe48 	bl	8001268 <HAL_Delay>
      ms++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 f8ab 	bl	800673a <USB_GetMode>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d01e      	beq.n	8005628 <USB_SetCurrentMode+0x84>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b31      	cmp	r3, #49	; 0x31
 80055ee:	d9f0      	bls.n	80055d2 <USB_SetCurrentMode+0x2e>
 80055f0:	e01a      	b.n	8005628 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005604:	2001      	movs	r0, #1
 8005606:	f7fb fe2f 	bl	8001268 <HAL_Delay>
      ms++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 f892 	bl	800673a <USB_GetMode>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <USB_SetCurrentMode+0x84>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b31      	cmp	r3, #49	; 0x31
 8005620:	d9f0      	bls.n	8005604 <USB_SetCurrentMode+0x60>
 8005622:	e001      	b.n	8005628 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e005      	b.n	8005634 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b32      	cmp	r3, #50	; 0x32
 800562c:	d101      	bne.n	8005632 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800563c:	b084      	sub	sp, #16
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800564a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e009      	b.n	8005670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3340      	adds	r3, #64	; 0x40
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b0e      	cmp	r3, #14
 8005674:	d9f2      	bls.n	800565c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11c      	bne.n	80056b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e005      	b.n	80056c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c8:	461a      	mov	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ce:	2103      	movs	r1, #3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f959 	bl	8005988 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056d6:	2110      	movs	r1, #16
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8f1 	bl	80058c0 <USB_FlushTxFifo>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f91d 	bl	8005928 <USB_FlushRxFifo>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e043      	b.n	80057aa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005738:	d118      	bne.n	800576c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	461a      	mov	r2, r3
 800574e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e013      	b.n	800577e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e008      	b.n	800577e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	461a      	mov	r2, r3
 800579e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3301      	adds	r3, #1
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b7      	bcc.n	8005722 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e043      	b.n	8005840 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ce:	d118      	bne.n	8005802 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	461a      	mov	r2, r3
 80057e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e013      	b.n	8005814 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e008      	b.n	8005814 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	d3b7      	bcc.n	80057b8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005868:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <USB_DevInit+0x280>)
 800587c:	4313      	orrs	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f043 0208 	orr.w	r2, r3, #8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b6:	b004      	add	sp, #16
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	803c3800 	.word	0x803c3800

080058c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <USB_FlushTxFifo+0x64>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e01b      	b.n	8005918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	daf2      	bge.n	80058ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	019b      	lsls	r3, r3, #6
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <USB_FlushTxFifo+0x64>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e006      	b.n	8005918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d0f0      	beq.n	80058f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	00030d40 	.word	0x00030d40

08005928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a11      	ldr	r2, [pc, #68]	; (8005984 <USB_FlushRxFifo+0x5c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e018      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2210      	movs	r2, #16
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <USB_FlushRxFifo+0x5c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d0f0      	beq.n	8005958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	00030d40 	.word	0x00030d40

08005988 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0306 	and.w	r3, r3, #6
 80059d2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d002      	beq.n	80059e0 <USB_GetDevSpeed+0x26>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b06      	cmp	r3, #6
 80059de:	d102      	bne.n	80059e6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059e0:	2302      	movs	r3, #2
 80059e2:	75fb      	strb	r3, [r7, #23]
 80059e4:	e001      	b.n	80059ea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059e6:	230f      	movs	r3, #15
 80059e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d13a      	bne.n	8005a8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d155      	bne.n	8005af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a70:	4313      	orrs	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e036      	b.n	8005af8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11a      	bne.n	8005af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d161      	bne.n	8005be8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3a:	d11f      	bne.n	8005b7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	0159      	lsls	r1, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	440b      	add	r3, r1
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	4619      	mov	r1, r3
 8005be0:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <USB_DeactivateEndpoint+0x1b0>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]
 8005be6:	e060      	b.n	8005caa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfe:	d11f      	bne.n	8005c40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4013      	ands	r3, r2
 8005c62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c84:	4013      	ands	r3, r2
 8005c86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	0159      	lsls	r1, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <USB_DeactivateEndpoint+0x1b4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	ec337800 	.word	0xec337800
 8005cbc:	eff37800 	.word	0xeff37800

08005cc0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f040 8128 	bne.w	8005f2e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d132      	bne.n	8005d4c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d44:	0cdb      	lsrs	r3, r3, #19
 8005d46:	04db      	lsls	r3, r3, #19
 8005d48:	6113      	str	r3, [r2, #16]
 8005d4a:	e092      	b.n	8005e72 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	0cdb      	lsrs	r3, r3, #19
 8005d68:	04db      	lsls	r3, r3, #19
 8005d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d8e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d11a      	bne.n	8005dcc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d903      	bls.n	8005daa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc8:	6113      	str	r3, [r2, #16]
 8005dca:	e01b      	b.n	8005e04 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6919      	ldr	r1, [r3, #16]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	440b      	add	r3, r1
 8005de4:	1e59      	subs	r1, r3, #1
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dee:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005df0:	4b8d      	ldr	r3, [pc, #564]	; (8006028 <USB_EPStartXfer+0x368>)
 8005df2:	400b      	ands	r3, r1
 8005df4:	6939      	ldr	r1, [r7, #16]
 8005df6:	0148      	lsls	r0, r1, #5
 8005df8:	6979      	ldr	r1, [r7, #20]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e00:	4313      	orrs	r3, r2
 8005e02:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1a:	6939      	ldr	r1, [r7, #16]
 8005e1c:	0148      	lsls	r0, r1, #5
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	4401      	add	r1, r0
 8005e22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e26:	4313      	orrs	r3, r2
 8005e28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	791b      	ldrb	r3, [r3, #4]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d11f      	bne.n	8005e72 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e70:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e90:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d015      	beq.n	8005ec6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8139 	beq.w	8006116 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	634b      	str	r3, [r1, #52]	; 0x34
 8005ec4:	e127      	b.n	8006116 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d110      	bne.n	8005ef8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e00f      	b.n	8005f18 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68d9      	ldr	r1, [r3, #12]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781a      	ldrb	r2, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f9a6 	bl	8006278 <USB_WritePacket>
 8005f2c:	e0f3      	b.n	8006116 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	0cdb      	lsrs	r3, r3, #19
 8005f4a:	04db      	lsls	r3, r3, #19
 8005f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f70:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d12f      	bne.n	8005fd8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa6:	6939      	ldr	r1, [r7, #16]
 8005fa8:	0148      	lsls	r0, r1, #5
 8005faa:	6979      	ldr	r1, [r7, #20]
 8005fac:	4401      	add	r1, r0
 8005fae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd4:	6113      	str	r3, [r2, #16]
 8005fd6:	e061      	b.n	800609c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d125      	bne.n	800602c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff6:	6939      	ldr	r1, [r7, #16]
 8005ff8:	0148      	lsls	r0, r1, #5
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	4401      	add	r1, r0
 8005ffe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006002:	4313      	orrs	r3, r2
 8006004:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	e039      	b.n	800609c <USB_EPStartXfer+0x3dc>
 8006028:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4413      	add	r3, r2
 8006036:	1e5a      	subs	r2, r3, #1
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006040:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	89fa      	ldrh	r2, [r7, #14]
 8006048:	fb03 f202 	mul.w	r2, r3, r2
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	89fb      	ldrh	r3, [r7, #14]
 8006060:	04d9      	lsls	r1, r3, #19
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <USB_EPStartXfer+0x460>)
 8006064:	400b      	ands	r3, r1
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	0148      	lsls	r0, r1, #5
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	4401      	add	r1, r0
 800606e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608c:	6939      	ldr	r1, [r7, #16]
 800608e:	0148      	lsls	r0, r1, #5
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	4401      	add	r1, r0
 8006094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d128      	bne.n	80060f6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d110      	bne.n	80060d6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e00f      	b.n	80060f6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006114:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	1ff80000 	.word	0x1ff80000

08006124 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d14a      	bne.n	80061d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615a:	f040 8086 	bne.w	800626a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006180:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d902      	bls.n	80061bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]
          break;
 80061ba:	e056      	b.n	800626a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d4:	d0e7      	beq.n	80061a6 <USB_EPStopXfer+0x82>
 80061d6:	e048      	b.n	800626a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f0:	d13b      	bne.n	800626a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006214:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006238:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f242 7210 	movw	r2, #10000	; 0x2710
 8006246:	4293      	cmp	r3, r2
 8006248:	d902      	bls.n	8006250 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
          break;
 800624e:	e00c      	b.n	800626a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006268:	d0e7      	beq.n	800623a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006278:	b480      	push	{r7}
 800627a:	b089      	sub	sp, #36	; 0x24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4611      	mov	r1, r2
 8006284:	461a      	mov	r2, r3
 8006286:	460b      	mov	r3, r1
 8006288:	71fb      	strb	r3, [r7, #7]
 800628a:	4613      	mov	r3, r2
 800628c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006296:	88bb      	ldrh	r3, [r7, #4]
 8006298:	3303      	adds	r3, #3
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e018      	b.n	80062d6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	031a      	lsls	r2, r3, #12
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	461a      	mov	r2, r3
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	3301      	adds	r3, #1
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d3e2      	bcc.n	80062a4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3724      	adds	r7, #36	; 0x24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b08b      	sub	sp, #44	; 0x2c
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	089b      	lsrs	r3, r3, #2
 8006306:	b29b      	uxth	r3, r3
 8006308:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	e014      	b.n	8006342 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	601a      	str	r2, [r3, #0]
    pDest++;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	3301      	adds	r3, #1
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	3301      	adds	r3, #1
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	3301      	adds	r3, #1
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	429a      	cmp	r2, r3
 8006348:	d3e6      	bcc.n	8006318 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800634a:	8bfb      	ldrh	r3, [r7, #30]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01e      	beq.n	800638e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	461a      	mov	r2, r3
 800635c:	f107 0310 	add.w	r3, r7, #16
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	701a      	strb	r2, [r3, #0]
      i++;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	3301      	adds	r3, #1
 800637a:	623b      	str	r3, [r7, #32]
      pDest++;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	3301      	adds	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006382:	8bfb      	ldrh	r3, [r7, #30]
 8006384:	3b01      	subs	r3, #1
 8006386:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006388:	8bfb      	ldrh	r3, [r7, #30]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1ea      	bne.n	8006364 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006390:	4618      	mov	r0, r3
 8006392:	372c      	adds	r7, #44	; 0x2c
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d12c      	bne.n	8006412 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	db12      	blt.n	80063f0 <USB_EPSetStall+0x54>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00f      	beq.n	80063f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e02b      	b.n	800646a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	db12      	blt.n	800644a <USB_EPSetStall+0xae>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006448:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006468:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d128      	bne.n	80064e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	791b      	ldrb	r3, [r3, #4]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d003      	beq.n	80064c4 <USB_EPClearStall+0x4c>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d138      	bne.n	8006536 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e027      	b.n	8006536 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006504:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d003      	beq.n	8006516 <USB_EPClearStall+0x9e>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	791b      	ldrb	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d10f      	bne.n	8006536 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006534:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006562:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006566:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006578:	68f9      	ldr	r1, [r7, #12]
 800657a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f023 0302 	bic.w	r3, r3, #2
 80065c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ec:	f023 0303 	bic.w	r3, r3, #3
 80065f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800662c:	68fb      	ldr	r3, [r7, #12]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	4013      	ands	r3, r2
 800665c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	0c1b      	lsrs	r3, r3, #16
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	b29b      	uxth	r3, r3
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066d0:	68bb      	ldr	r3, [r7, #8]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	fa22 f303 	lsr.w	r3, r2, r3
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	b2db      	uxtb	r3, r3
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4013      	ands	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800672c:	68bb      	ldr	r3, [r7, #8]
}
 800672e:	4618      	mov	r0, r3
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0301 	and.w	r3, r3, #1
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006770:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	333c      	adds	r3, #60	; 0x3c
 80067ae:	3304      	adds	r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <USB_EP0_OutStart+0x8c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d90a      	bls.n	80067d2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067cc:	d101      	bne.n	80067d2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e024      	b.n	800681c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006800:	f043 0318 	orr.w	r3, r3, #24
 8006804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006814:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006818:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	4f54300a 	.word	0x4f54300a

0800682c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a13      	ldr	r2, [pc, #76]	; (8006890 <USB_CoreReset+0x64>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e01b      	b.n	8006882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	daf2      	bge.n	8006838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f043 0201 	orr.w	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <USB_CoreReset+0x64>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e006      	b.n	8006882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d0f0      	beq.n	8006862 <USB_CoreReset+0x36>

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	00030d40 	.word	0x00030d40

08006894 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80068a0:	201c      	movs	r0, #28
 80068a2:	f002 fc67 	bl	8009174 <USBD_static_malloc>
 80068a6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	32b0      	adds	r2, #176	; 0xb0
 80068b8:	2100      	movs	r1, #0
 80068ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068be:	2302      	movs	r3, #2
 80068c0:	e08a      	b.n	80069d8 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	32b0      	adds	r2, #176	; 0xb0
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	32b0      	adds	r2, #176	; 0xb0
 80068dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7c1b      	ldrb	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11b      	bne.n	8006926 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068ee:	4b3c      	ldr	r3, [pc, #240]	; (80069e0 <USBD_CUSTOM_HID_Init+0x14c>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	3326      	adds	r3, #38	; 0x26
 8006904:	2205      	movs	r2, #5
 8006906:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006908:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <USBD_CUSTOM_HID_Init+0x150>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 020f 	and.w	r2, r3, #15
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006920:	2205      	movs	r2, #5
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e01a      	b.n	800695c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006926:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <USBD_CUSTOM_HID_Init+0x14c>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	3326      	adds	r3, #38	; 0x26
 800693c:	2205      	movs	r2, #5
 800693e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006940:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <USBD_CUSTOM_HID_Init+0x150>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006958:	2205      	movs	r2, #5
 800695a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <USBD_CUSTOM_HID_Init+0x14c>)
 800695e:	7819      	ldrb	r1, [r3, #0]
 8006960:	2302      	movs	r3, #2
 8006962:	2203      	movs	r2, #3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f002 fa05 	bl	8008d74 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800696a:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <USBD_CUSTOM_HID_Init+0x14c>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 020f 	and.w	r2, r3, #15
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	2201      	movs	r2, #1
 8006982:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006984:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <USBD_CUSTOM_HID_Init+0x150>)
 8006986:	7819      	ldrb	r1, [r3, #0]
 8006988:	2302      	movs	r3, #2
 800698a:	2203      	movs	r2, #3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f002 f9f1 	bl	8008d74 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <USBD_CUSTOM_HID_Init+0x150>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f003 020f 	and.w	r2, r3, #15
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069aa:	2201      	movs	r2, #1
 80069ac:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	33b0      	adds	r3, #176	; 0xb0
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <USBD_CUSTOM_HID_Init+0x150>)
 80069ca:	7819      	ldrb	r1, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	2306      	movs	r3, #6
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f002 fb49 	bl	8009068 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000086 	.word	0x20000086
 80069e4:	20000087 	.word	0x20000087

080069e8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80069f4:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f002 f9f8 	bl	8008df0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006a00:	4b34      	ldr	r3, [pc, #208]	; (8006ad4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	3324      	adds	r3, #36	; 0x24
 8006a16:	2200      	movs	r2, #0
 8006a18:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 020f 	and.w	r2, r3, #15
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	3326      	adds	r3, #38	; 0x26
 8006a30:	2200      	movs	r2, #0
 8006a32:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006a34:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f002 f9d8 	bl	8008df0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006a40:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a58:	2200      	movs	r2, #0
 8006a5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a74:	2200      	movs	r2, #0
 8006a76:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32b0      	adds	r2, #176	; 0xb0
 8006a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01f      	beq.n	8006aca <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	33b0      	adds	r3, #176	; 0xb0
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	32b0      	adds	r2, #176	; 0xb0
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 fb6f 	bl	8009190 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	32b0      	adds	r2, #176	; 0xb0
 8006abc:	2100      	movs	r1, #0
 8006abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000086 	.word	0x20000086
 8006ad8:	20000087 	.word	0x20000087

08006adc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	32b0      	adds	r2, #176	; 0xb0
 8006af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e0f8      	b.n	8006d02 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d056      	beq.n	8006bca <USBD_CUSTOM_HID_Setup+0xee>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	f040 80e8 	bne.w	8006cf2 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	3b02      	subs	r3, #2
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	d846      	bhi.n	8006bba <USBD_CUSTOM_HID_Setup+0xde>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <USBD_CUSTOM_HID_Setup+0x58>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006b6b 	.word	0x08006b6b
 8006b3c:	08006bbb 	.word	0x08006bbb
 8006b40:	08006bbb 	.word	0x08006bbb
 8006b44:	08006bbb 	.word	0x08006bbb
 8006b48:	08006bbb 	.word	0x08006bbb
 8006b4c:	08006bbb 	.word	0x08006bbb
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b7b 	.word	0x08006b7b
 8006b58:	08006b5d 	.word	0x08006b5d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	609a      	str	r2, [r3, #8]
          break;
 8006b68:	e02e      	b.n	8006bc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fcd0 	bl	8008518 <USBD_CtlSendData>
          break;
 8006b78:	e026      	b.n	8006bc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	885b      	ldrh	r3, [r3, #2]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	60da      	str	r2, [r3, #12]
          break;
 8006b8a:	e01d      	b.n	8006bc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	2201      	movs	r2, #1
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fcbf 	bl	8008518 <USBD_CtlSendData>
          break;
 8006b9a:	e015      	b.n	8006bc8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006ba2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	bf28      	it	cs
 8006bac:	2306      	movcs	r3, #6
 8006bae:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fcdc 	bl	8008570 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006bb8:	e006      	b.n	8006bc8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fc3a 	bl	8008436 <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bc6:	bf00      	nop
      }
      break;
 8006bc8:	e09a      	b.n	8006d00 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b0b      	cmp	r3, #11
 8006bd0:	f200 8086 	bhi.w	8006ce0 <USBD_CUSTOM_HID_Setup+0x204>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <USBD_CUSTOM_HID_Setup+0x100>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006cef 	.word	0x08006cef
 8006be4:	08006ce1 	.word	0x08006ce1
 8006be8:	08006ce1 	.word	0x08006ce1
 8006bec:	08006ce1 	.word	0x08006ce1
 8006bf0:	08006ce1 	.word	0x08006ce1
 8006bf4:	08006c37 	.word	0x08006c37
 8006bf8:	08006ce1 	.word	0x08006ce1
 8006bfc:	08006ce1 	.word	0x08006ce1
 8006c00:	08006ce1 	.word	0x08006ce1
 8006c04:	08006c8f 	.word	0x08006c8f
 8006c08:	08006cb9 	.word	0x08006cb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d107      	bne.n	8006c28 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c18:	f107 030e 	add.w	r3, r7, #14
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fc79 	bl	8008518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c26:	e063      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fc03 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	75fb      	strb	r3, [r7, #23]
          break;
 8006c34:	e05c      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b22      	cmp	r3, #34	; 0x22
 8006c40:	d110      	bne.n	8006c64 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	2b1d      	cmp	r3, #29
 8006c48:	bf28      	it	cs
 8006c4a:	231d      	movcs	r3, #29
 8006c4c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	33b0      	adds	r3, #176	; 0xb0
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	e00d      	b.n	8006c80 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b21      	cmp	r3, #33	; 0x21
 8006c6e:	d107      	bne.n	8006c80 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006c70:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <USBD_CUSTOM_HID_Setup+0x230>)
 8006c72:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	88db      	ldrh	r3, [r3, #6]
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	bf28      	it	cs
 8006c7c:	2309      	movcs	r3, #9
 8006c7e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c80:	8bfb      	ldrh	r3, [r7, #30]
 8006c82:	461a      	mov	r2, r3
 8006c84:	69b9      	ldr	r1, [r7, #24]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fc46 	bl	8008518 <USBD_CtlSendData>
          break;
 8006c8c:	e030      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d107      	bne.n	8006caa <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	3310      	adds	r3, #16
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fc38 	bl	8008518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca8:	e022      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fbc2 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb6:	e01b      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d106      	bne.n	8006cd2 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	885b      	ldrh	r3, [r3, #2]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd0:	e00e      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fbae 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cde:	e007      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fba7 	bl	8008436 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	75fb      	strb	r3, [r7, #23]
          break;
 8006cec:	e000      	b.n	8006cf0 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006cee:	bf00      	nop
      }
      break;
 8006cf0:	e006      	b.n	8006d00 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fb9e 	bl	8008436 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfe:	bf00      	nop
  }
  return (uint8_t)ret;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000070 	.word	0x20000070

08006d10 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	32b0      	adds	r2, #176	; 0xb0
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e017      	b.n	8006d68 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d110      	bne.n	8006d66 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	7e1b      	ldrb	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006d54:	7819      	ldrb	r1, [r3, #0]
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f002 f94c 	bl	8008ff8 <USBD_LL_Transmit>
 8006d60:	e001      	b.n	8006d66 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000086 	.word	0x20000086

08006d74 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d7c:	2181      	movs	r1, #129	; 0x81
 8006d7e:	4815      	ldr	r0, [pc, #84]	; (8006dd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d80:	f000 fcf7 	bl	8007772 <USBD_GetEpDesc>
 8006d84:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d86:	2101      	movs	r1, #1
 8006d88:	4812      	ldr	r0, [pc, #72]	; (8006dd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d8a:	f000 fcf2 	bl	8007772 <USBD_GetEpDesc>
 8006d8e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f042 0202 	orr.w	r2, r2, #2
 8006d9e:	711a      	strb	r2, [r3, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2205      	movs	r2, #5
 8006da8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0202 	orr.w	r2, r2, #2
 8006db8:	711a      	strb	r2, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2205      	movs	r2, #5
 8006dc2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2229      	movs	r2, #41	; 0x29
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dca:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000044 	.word	0x20000044

08006dd8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006de0:	2181      	movs	r1, #129	; 0x81
 8006de2:	4815      	ldr	r0, [pc, #84]	; (8006e38 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006de4:	f000 fcc5 	bl	8007772 <USBD_GetEpDesc>
 8006de8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006dea:	2101      	movs	r1, #1
 8006dec:	4812      	ldr	r0, [pc, #72]	; (8006e38 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006dee:	f000 fcc0 	bl	8007772 <USBD_GetEpDesc>
 8006df2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f042 0202 	orr.w	r2, r2, #2
 8006e02:	711a      	strb	r2, [r3, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f042 0202 	orr.w	r2, r2, #2
 8006e1c:	711a      	strb	r2, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2205      	movs	r2, #5
 8006e26:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2229      	movs	r2, #41	; 0x29
 8006e2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e2e:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000044 	.word	0x20000044

08006e3c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e44:	2181      	movs	r1, #129	; 0x81
 8006e46:	4815      	ldr	r0, [pc, #84]	; (8006e9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e48:	f000 fc93 	bl	8007772 <USBD_GetEpDesc>
 8006e4c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006e4e:	2101      	movs	r1, #1
 8006e50:	4812      	ldr	r0, [pc, #72]	; (8006e9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e52:	f000 fc8e 	bl	8007772 <USBD_GetEpDesc>
 8006e56:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f042 0202 	orr.w	r2, r2, #2
 8006e66:	711a      	strb	r2, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2205      	movs	r2, #5
 8006e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f042 0202 	orr.w	r2, r2, #2
 8006e80:	711a      	strb	r2, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2205      	movs	r2, #5
 8006e8a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2229      	movs	r2, #41	; 0x29
 8006e90:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e92:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000044 	.word	0x20000044

08006ea0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32b0      	adds	r2, #176	; 0xb0
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32b0      	adds	r2, #176	; 0xb0
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e017      	b.n	8006f1e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	32b0      	adds	r2, #176	; 0xb0
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	33b0      	adds	r3, #176	; 0xb0
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	7810      	ldrb	r0, [r2, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	7852      	ldrb	r2, [r2, #1]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32b0      	adds	r2, #176	; 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e016      	b.n	8006f76 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d111      	bne.n	8006f74 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	33b0      	adds	r3, #176	; 0xb0
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	7810      	ldrb	r0, [r2, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	7852      	ldrb	r2, [r2, #1]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006f8e:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	2000007c 	.word	0x2000007c

08006fa0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e009      	b.n	8006fc8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	33b0      	adds	r3, #176	; 0xb0
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e01f      	b.n	800702c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	79fa      	ldrb	r2, [r7, #7]
 800701e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 fe29 	bl	8008c78 <USBD_LL_Init>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]

  return ret;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	e025      	b.n	8007098 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32ae      	adds	r2, #174	; 0xae
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32ae      	adds	r2, #174	; 0xae
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	f107 020e 	add.w	r2, r7, #14
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fe31 	bl	8008d10 <USBD_LL_Start>
 80070ae:	4603      	mov	r3, r0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	4611      	mov	r1, r2
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	4611      	mov	r1, r2
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f001 f938 	bl	80083c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2b02      	cmp	r3, #2
 8007174:	d01a      	beq.n	80071ac <USBD_LL_SetupStage+0x72>
 8007176:	2b02      	cmp	r3, #2
 8007178:	d822      	bhi.n	80071c0 <USBD_LL_SetupStage+0x86>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <USBD_LL_SetupStage+0x4a>
 800717e:	2b01      	cmp	r3, #1
 8007180:	d00a      	beq.n	8007198 <USBD_LL_SetupStage+0x5e>
 8007182:	e01d      	b.n	80071c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb65 	bl	800785c <USBD_StdDevReq>
 8007192:	4603      	mov	r3, r0
 8007194:	73fb      	strb	r3, [r7, #15]
      break;
 8007196:	e020      	b.n	80071da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fbcd 	bl	8007940 <USBD_StdItfReq>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e016      	b.n	80071da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc2f 	bl	8007a18 <USBD_StdEPReq>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e00c      	b.n	80071da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fe44 	bl	8008e5c <USBD_LL_StallEP>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	bf00      	nop
  }

  return ret;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	460b      	mov	r3, r1
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d16e      	bne.n	80072da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007202:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800720a:	2b03      	cmp	r3, #3
 800720c:	f040 8098 	bne.w	8007340 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d913      	bls.n	8007244 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	1ad2      	subs	r2, r2, r3
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	4293      	cmp	r3, r2
 8007234:	bf28      	it	cs
 8007236:	4613      	movcs	r3, r2
 8007238:	461a      	mov	r2, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f001 f9b4 	bl	80085aa <USBD_CtlContinueRx>
 8007242:	e07d      	b.n	8007340 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2b02      	cmp	r3, #2
 8007250:	d014      	beq.n	800727c <USBD_LL_DataOutStage+0x98>
 8007252:	2b02      	cmp	r3, #2
 8007254:	d81d      	bhi.n	8007292 <USBD_LL_DataOutStage+0xae>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <USBD_LL_DataOutStage+0x7c>
 800725a:	2b01      	cmp	r3, #1
 800725c:	d003      	beq.n	8007266 <USBD_LL_DataOutStage+0x82>
 800725e:	e018      	b.n	8007292 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	75bb      	strb	r3, [r7, #22]
            break;
 8007264:	e018      	b.n	8007298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fa64 	bl	800773e <USBD_CoreFindIF>
 8007276:	4603      	mov	r3, r0
 8007278:	75bb      	strb	r3, [r7, #22]
            break;
 800727a:	e00d      	b.n	8007298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4619      	mov	r1, r3
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 fa66 	bl	8007758 <USBD_CoreFindEP>
 800728c:	4603      	mov	r3, r0
 800728e:	75bb      	strb	r3, [r7, #22]
            break;
 8007290:	e002      	b.n	8007298 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	75bb      	strb	r3, [r7, #22]
            break;
 8007296:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007298:	7dbb      	ldrb	r3, [r7, #22]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d119      	bne.n	80072d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d113      	bne.n	80072d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072aa:	7dba      	ldrb	r2, [r7, #22]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	32ae      	adds	r2, #174	; 0xae
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072ba:	7dba      	ldrb	r2, [r7, #22]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072c2:	7dba      	ldrb	r2, [r7, #22]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	32ae      	adds	r2, #174	; 0xae
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f001 f97a 	bl	80085cc <USBD_CtlSendStatus>
 80072d8:	e032      	b.n	8007340 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072da:	7afb      	ldrb	r3, [r7, #11]
 80072dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	4619      	mov	r1, r3
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa37 	bl	8007758 <USBD_CoreFindEP>
 80072ea:	4603      	mov	r3, r0
 80072ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ee:	7dbb      	ldrb	r3, [r7, #22]
 80072f0:	2bff      	cmp	r3, #255	; 0xff
 80072f2:	d025      	beq.n	8007340 <USBD_LL_DataOutStage+0x15c>
 80072f4:	7dbb      	ldrb	r3, [r7, #22]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d122      	bne.n	8007340 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d117      	bne.n	8007336 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007306:	7dba      	ldrb	r2, [r7, #22]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	32ae      	adds	r2, #174	; 0xae
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00f      	beq.n	8007336 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007316:	7dba      	ldrb	r2, [r7, #22]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800731e:	7dba      	ldrb	r2, [r7, #22]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	32ae      	adds	r2, #174	; 0xae
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	7afa      	ldrb	r2, [r7, #11]
 800732c:	4611      	mov	r1, r2
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	e000      	b.n	8007342 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	460b      	mov	r3, r1
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d16f      	bne.n	800743e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3314      	adds	r3, #20
 8007362:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800736a:	2b02      	cmp	r3, #2
 800736c:	d15a      	bne.n	8007424 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	429a      	cmp	r2, r3
 8007378:	d914      	bls.n	80073a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	461a      	mov	r2, r3
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f001 f8dc 	bl	800854e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007396:	2300      	movs	r3, #0
 8007398:	2200      	movs	r2, #0
 800739a:	2100      	movs	r1, #0
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f001 fe63 	bl	8009068 <USBD_LL_PrepareReceive>
 80073a2:	e03f      	b.n	8007424 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d11c      	bne.n	80073ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d316      	bcc.n	80073ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d20f      	bcs.n	80073ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f001 f8bd 	bl	800854e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 fe40 	bl	8009068 <USBD_LL_PrepareReceive>
 80073e8:	e01c      	b.n	8007424 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d10f      	bne.n	8007416 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007416:	2180      	movs	r1, #128	; 0x80
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 fd1f 	bl	8008e5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f001 f8e7 	bl	80085f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03a      	beq.n	80074a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fe42 	bl	80070b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800743c:	e032      	b.n	80074a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f985 	bl	8007758 <USBD_CoreFindEP>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	2bff      	cmp	r3, #255	; 0xff
 8007456:	d025      	beq.n	80074a4 <USBD_LL_DataInStage+0x15a>
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d122      	bne.n	80074a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d11c      	bne.n	80074a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800746a:	7dfa      	ldrb	r2, [r7, #23]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	32ae      	adds	r2, #174	; 0xae
 8007470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d014      	beq.n	80074a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800747a:	7dfa      	ldrb	r2, [r7, #23]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007482:	7dfa      	ldrb	r2, [r7, #23]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	32ae      	adds	r2, #174	; 0xae
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	7afa      	ldrb	r2, [r7, #11]
 8007490:	4611      	mov	r1, r2
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	4798      	blx	r3
 8007496:	4603      	mov	r3, r0
 8007498:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800749a:	7dbb      	ldrb	r3, [r7, #22]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074a0:	7dbb      	ldrb	r3, [r7, #22]
 80074a2:	e000      	b.n	80074a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d014      	beq.n	8007514 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6852      	ldr	r2, [r2, #4]
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	4611      	mov	r1, r2
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007514:	2340      	movs	r3, #64	; 0x40
 8007516:	2200      	movs	r2, #0
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 fc2a 	bl	8008d74 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2240      	movs	r2, #64	; 0x40
 800752c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	2200      	movs	r2, #0
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc1c 	bl	8008d74 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2240      	movs	r2, #64	; 0x40
 8007546:	621a      	str	r2, [r3, #32]

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b04      	cmp	r3, #4
 8007584:	d006      	beq.n	8007594 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758c:	b2da      	uxtb	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2204      	movs	r2, #4
 8007598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d106      	bne.n	80075cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d110      	bne.n	8007610 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e01c      	b.n	8007676 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b03      	cmp	r3, #3
 8007646:	d115      	bne.n	8007674 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32ae      	adds	r2, #174	; 0xae
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32ae      	adds	r2, #174	; 0xae
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	32ae      	adds	r2, #174	; 0xae
 8007694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e01c      	b.n	80076da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d115      	bne.n	80076d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32ae      	adds	r2, #174	; 0xae
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32ae      	adds	r2, #174	; 0xae
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4611      	mov	r1, r2
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00e      	beq.n	8007734 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6852      	ldr	r2, [r2, #4]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	4611      	mov	r1, r2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800774a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b086      	sub	sp, #24
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	429a      	cmp	r2, r3
 8007798:	d920      	bls.n	80077dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077a2:	e013      	b.n	80077cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077a4:	f107 030a 	add.w	r3, r7, #10
 80077a8:	4619      	mov	r1, r3
 80077aa:	6978      	ldr	r0, [r7, #20]
 80077ac:	f000 f81b 	bl	80077e6 <USBD_GetNextDesc>
 80077b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d108      	bne.n	80077cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	789b      	ldrb	r3, [r3, #2]
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d008      	beq.n	80077da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	885b      	ldrh	r3, [r3, #2]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	897b      	ldrh	r3, [r7, #10]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d8e5      	bhi.n	80077a4 <USBD_GetEpDesc+0x32>
 80077d8:	e000      	b.n	80077dc <USBD_GetEpDesc+0x6a>
          break;
 80077da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077dc:	693b      	ldr	r3, [r7, #16]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4413      	add	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3301      	adds	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800783e:	8a3b      	ldrh	r3, [r7, #16]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	b21a      	sxth	r2, r3
 8007844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007848:	4313      	orrs	r3, r2
 800784a:	b21b      	sxth	r3, r3
 800784c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800784e:	89fb      	ldrh	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d005      	beq.n	8007882 <USBD_StdDevReq+0x26>
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d857      	bhi.n	800792a <USBD_StdDevReq+0xce>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00f      	beq.n	800789e <USBD_StdDevReq+0x42>
 800787e:	2b20      	cmp	r3, #32
 8007880:	d153      	bne.n	800792a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	32ae      	adds	r2, #174	; 0xae
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
      break;
 800789c:	e04a      	b.n	8007934 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	785b      	ldrb	r3, [r3, #1]
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d83b      	bhi.n	800791e <USBD_StdDevReq+0xc2>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <USBD_StdDevReq+0x50>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	08007901 	.word	0x08007901
 80078b0:	08007915 	.word	0x08007915
 80078b4:	0800791f 	.word	0x0800791f
 80078b8:	0800790b 	.word	0x0800790b
 80078bc:	0800791f 	.word	0x0800791f
 80078c0:	080078df 	.word	0x080078df
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	0800791f 	.word	0x0800791f
 80078cc:	080078f7 	.word	0x080078f7
 80078d0:	080078e9 	.word	0x080078e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa3c 	bl	8007d54 <USBD_GetDescriptor>
          break;
 80078dc:	e024      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fbcb 	bl	800807c <USBD_SetAddress>
          break;
 80078e6:	e01f      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc0a 	bl	8008104 <USBD_SetConfig>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
          break;
 80078f4:	e018      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fcad 	bl	8008258 <USBD_GetConfig>
          break;
 80078fe:	e013      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fcde 	bl	80082c4 <USBD_GetStatus>
          break;
 8007908:	e00e      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fd0d 	bl	800832c <USBD_SetFeature>
          break;
 8007912:	e009      	b.n	8007928 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fd31 	bl	800837e <USBD_ClrFeature>
          break;
 800791c:	e004      	b.n	8007928 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fd88 	bl	8008436 <USBD_CtlError>
          break;
 8007926:	bf00      	nop
      }
      break;
 8007928:	e004      	b.n	8007934 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fd82 	bl	8008436 <USBD_CtlError>
      break;
 8007932:	bf00      	nop
  }

  return ret;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop

08007940 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d005      	beq.n	8007966 <USBD_StdItfReq+0x26>
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d852      	bhi.n	8007a04 <USBD_StdItfReq+0xc4>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <USBD_StdItfReq+0x26>
 8007962:	2b20      	cmp	r3, #32
 8007964:	d14e      	bne.n	8007a04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	b2db      	uxtb	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	2b02      	cmp	r3, #2
 8007972:	d840      	bhi.n	80079f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	889b      	ldrh	r3, [r3, #4]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d836      	bhi.n	80079ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	889b      	ldrh	r3, [r3, #4]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fed9 	bl	800773e <USBD_CoreFindIF>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2bff      	cmp	r3, #255	; 0xff
 8007994:	d01d      	beq.n	80079d2 <USBD_StdItfReq+0x92>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11a      	bne.n	80079d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800799c:	7bba      	ldrb	r2, [r7, #14]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32ae      	adds	r2, #174	; 0xae
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00f      	beq.n	80079cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079ac:	7bba      	ldrb	r2, [r7, #14]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079b4:	7bba      	ldrb	r2, [r7, #14]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	; 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ca:	e004      	b.n	80079d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079d0:	e001      	b.n	80079d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079d2:	2303      	movs	r3, #3
 80079d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88db      	ldrh	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d110      	bne.n	8007a00 <USBD_StdItfReq+0xc0>
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10d      	bne.n	8007a00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fdf1 	bl	80085cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ea:	e009      	b.n	8007a00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fd21 	bl	8008436 <USBD_CtlError>
          break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fd1c 	bl	8008436 <USBD_CtlError>
          break;
 80079fe:	e000      	b.n	8007a02 <USBD_StdItfReq+0xc2>
          break;
 8007a00:	bf00      	nop
      }
      break;
 8007a02:	e004      	b.n	8007a0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fd15 	bl	8008436 <USBD_CtlError>
      break;
 8007a0c:	bf00      	nop
  }

  return ret;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	889b      	ldrh	r3, [r3, #4]
 8007a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d007      	beq.n	8007a48 <USBD_StdEPReq+0x30>
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	f200 817f 	bhi.w	8007d3c <USBD_StdEPReq+0x324>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02a      	beq.n	8007a98 <USBD_StdEPReq+0x80>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	f040 817a 	bne.w	8007d3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fe83 	bl	8007758 <USBD_CoreFindEP>
 8007a52:	4603      	mov	r3, r0
 8007a54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a56:	7b7b      	ldrb	r3, [r7, #13]
 8007a58:	2bff      	cmp	r3, #255	; 0xff
 8007a5a:	f000 8174 	beq.w	8007d46 <USBD_StdEPReq+0x32e>
 8007a5e:	7b7b      	ldrb	r3, [r7, #13]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 8170 	bne.w	8007d46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a66:	7b7a      	ldrb	r2, [r7, #13]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a6e:	7b7a      	ldrb	r2, [r7, #13]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	32ae      	adds	r2, #174	; 0xae
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8163 	beq.w	8007d46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a80:	7b7a      	ldrb	r2, [r7, #13]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32ae      	adds	r2, #174	; 0xae
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a96:	e156      	b.n	8007d46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d008      	beq.n	8007ab2 <USBD_StdEPReq+0x9a>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	f300 8145 	bgt.w	8007d30 <USBD_StdEPReq+0x318>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 809b 	beq.w	8007be2 <USBD_StdEPReq+0x1ca>
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d03c      	beq.n	8007b2a <USBD_StdEPReq+0x112>
 8007ab0:	e13e      	b.n	8007d30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d002      	beq.n	8007ac4 <USBD_StdEPReq+0xac>
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d016      	beq.n	8007af0 <USBD_StdEPReq+0xd8>
 8007ac2:	e02c      	b.n	8007b1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00d      	beq.n	8007ae6 <USBD_StdEPReq+0xce>
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b80      	cmp	r3, #128	; 0x80
 8007ace:	d00a      	beq.n	8007ae6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f9c1 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ada:	2180      	movs	r1, #128	; 0x80
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f9bd 	bl	8008e5c <USBD_LL_StallEP>
 8007ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae4:	e020      	b.n	8007b28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fca4 	bl	8008436 <USBD_CtlError>
              break;
 8007aee:	e01b      	b.n	8007b28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	885b      	ldrh	r3, [r3, #2]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10e      	bne.n	8007b16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <USBD_StdEPReq+0xfe>
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d008      	beq.n	8007b16 <USBD_StdEPReq+0xfe>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	88db      	ldrh	r3, [r3, #6]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d104      	bne.n	8007b16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f9a3 	bl	8008e5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd58 	bl	80085cc <USBD_CtlSendStatus>

              break;
 8007b1c:	e004      	b.n	8007b28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc88 	bl	8008436 <USBD_CtlError>
              break;
 8007b26:	bf00      	nop
          }
          break;
 8007b28:	e107      	b.n	8007d3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <USBD_StdEPReq+0x124>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d016      	beq.n	8007b68 <USBD_StdEPReq+0x150>
 8007b3a:	e04b      	b.n	8007bd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00d      	beq.n	8007b5e <USBD_StdEPReq+0x146>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d00a      	beq.n	8007b5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f985 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b52:	2180      	movs	r1, #128	; 0x80
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f981 	bl	8008e5c <USBD_LL_StallEP>
 8007b5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b5c:	e040      	b.n	8007be0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc68 	bl	8008436 <USBD_CtlError>
              break;
 8007b66:	e03b      	b.n	8007be0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d136      	bne.n	8007bde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f9a2 	bl	8008ec8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fd21 	bl	80085cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fde2 	bl	8007758 <USBD_CoreFindEP>
 8007b94:	4603      	mov	r3, r0
 8007b96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b98:	7b7b      	ldrb	r3, [r7, #13]
 8007b9a:	2bff      	cmp	r3, #255	; 0xff
 8007b9c:	d01f      	beq.n	8007bde <USBD_StdEPReq+0x1c6>
 8007b9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d11c      	bne.n	8007bde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ba4:	7b7a      	ldrb	r2, [r7, #13]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bac:	7b7a      	ldrb	r2, [r7, #13]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	; 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d010      	beq.n	8007bde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bbc:	7b7a      	ldrb	r2, [r7, #13]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32ae      	adds	r2, #174	; 0xae
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bd2:	e004      	b.n	8007bde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fc2d 	bl	8008436 <USBD_CtlError>
              break;
 8007bdc:	e000      	b.n	8007be0 <USBD_StdEPReq+0x1c8>
              break;
 8007bde:	bf00      	nop
          }
          break;
 8007be0:	e0ab      	b.n	8007d3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d002      	beq.n	8007bf4 <USBD_StdEPReq+0x1dc>
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d032      	beq.n	8007c58 <USBD_StdEPReq+0x240>
 8007bf2:	e097      	b.n	8007d24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <USBD_StdEPReq+0x1f2>
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	2b80      	cmp	r3, #128	; 0x80
 8007bfe:	d004      	beq.n	8007c0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fc17 	bl	8008436 <USBD_CtlError>
                break;
 8007c08:	e091      	b.n	8007d2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da0b      	bge.n	8007c2a <USBD_StdEPReq+0x212>
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	3310      	adds	r3, #16
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4413      	add	r3, r2
 8007c26:	3304      	adds	r3, #4
 8007c28:	e00b      	b.n	8007c42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fc61 	bl	8008518 <USBD_CtlSendData>
              break;
 8007c56:	e06a      	b.n	8007d2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da11      	bge.n	8007c84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f003 020f 	and.w	r2, r3, #15
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	3324      	adds	r3, #36	; 0x24
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d117      	bne.n	8007caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fbda 	bl	8008436 <USBD_CtlError>
                  break;
 8007c82:	e054      	b.n	8007d2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fbc7 	bl	8008436 <USBD_CtlError>
                  break;
 8007ca8:	e041      	b.n	8007d2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	da0b      	bge.n	8007cca <USBD_StdEPReq+0x2b2>
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	3310      	adds	r3, #16
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	e00b      	b.n	8007ce2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4413      	add	r3, r2
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <USBD_StdEPReq+0x2d8>
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b80      	cmp	r3, #128	; 0x80
 8007cee:	d103      	bne.n	8007cf8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e00e      	b.n	8007d16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f919 	bl	8008f34 <USBD_LL_IsStallEP>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e002      	b.n	8007d16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fbfb 	bl	8008518 <USBD_CtlSendData>
              break;
 8007d22:	e004      	b.n	8007d2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fb85 	bl	8008436 <USBD_CtlError>
              break;
 8007d2c:	bf00      	nop
          }
          break;
 8007d2e:	e004      	b.n	8007d3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb7f 	bl	8008436 <USBD_CtlError>
          break;
 8007d38:	bf00      	nop
      }
      break;
 8007d3a:	e005      	b.n	8007d48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb79 	bl	8008436 <USBD_CtlError>
      break;
 8007d44:	e000      	b.n	8007d48 <USBD_StdEPReq+0x330>
      break;
 8007d46:	bf00      	nop
  }

  return ret;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	2b0e      	cmp	r3, #14
 8007d76:	f200 8152 	bhi.w	800801e <USBD_GetDescriptor+0x2ca>
 8007d7a:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <USBD_GetDescriptor+0x2c>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007df1 	.word	0x08007df1
 8007d84:	08007e09 	.word	0x08007e09
 8007d88:	08007e49 	.word	0x08007e49
 8007d8c:	0800801f 	.word	0x0800801f
 8007d90:	0800801f 	.word	0x0800801f
 8007d94:	08007fbf 	.word	0x08007fbf
 8007d98:	08007feb 	.word	0x08007feb
 8007d9c:	0800801f 	.word	0x0800801f
 8007da0:	0800801f 	.word	0x0800801f
 8007da4:	0800801f 	.word	0x0800801f
 8007da8:	0800801f 	.word	0x0800801f
 8007dac:	0800801f 	.word	0x0800801f
 8007db0:	0800801f 	.word	0x0800801f
 8007db4:	0800801f 	.word	0x0800801f
 8007db8:	08007dbd 	.word	0x08007dbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dde:	e126      	b.n	800802e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fb27 	bl	8008436 <USBD_CtlError>
        err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
      break;
 8007dee:	e11e      	b.n	800802e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
      break;
 8007e06:	e112      	b.n	800802e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1b      	ldrb	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10d      	bne.n	8007e2c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	f107 0208 	add.w	r2, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	2202      	movs	r2, #2
 8007e28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e2a:	e100      	b.n	800802e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e0f2      	b.n	800802e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	f200 80ac 	bhi.w	8007fac <USBD_GetDescriptor+0x258>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBD_GetDescriptor+0x108>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e75 	.word	0x08007e75
 8007e60:	08007ea9 	.word	0x08007ea9
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f45 	.word	0x08007f45
 8007e70:	08007f79 	.word	0x08007f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e091      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 facb 	bl	8008436 <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e089      	b.n	8007fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e077      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fab1 	bl	8008436 <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e06f      	b.n	8007fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efe:	e05d      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa97 	bl	8008436 <USBD_CtlError>
            err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0e:	e055      	b.n	8007fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7c12      	ldrb	r2, [r2, #16]
 8007f28:	f107 0108 	add.w	r1, r7, #8
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f32:	e043      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa7d 	bl	8008436 <USBD_CtlError>
            err++;
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	72fb      	strb	r3, [r7, #11]
          break;
 8007f42:	e03b      	b.n	8007fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f66:	e029      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa63 	bl	8008436 <USBD_CtlError>
            err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
          break;
 8007f76:	e021      	b.n	8007fbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9a:	e00f      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa49 	bl	8008436 <USBD_CtlError>
            err++;
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007faa:	e007      	b.n	8007fbc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa41 	bl	8008436 <USBD_CtlError>
          err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fba:	bf00      	nop
      }
      break;
 8007fbc:	e037      	b.n	800802e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7c1b      	ldrb	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fce:	f107 0208 	add.w	r2, r7, #8
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4798      	blx	r3
 8007fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fd8:	e029      	b.n	800802e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa2a 	bl	8008436 <USBD_CtlError>
        err++;
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe8:	e021      	b.n	800802e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7c1b      	ldrb	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	f107 0208 	add.w	r2, r7, #8
 8007ffe:	4610      	mov	r0, r2
 8008000:	4798      	blx	r3
 8008002:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	2207      	movs	r2, #7
 800800a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800800c:	e00f      	b.n	800802e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa10 	bl	8008436 <USBD_CtlError>
        err++;
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	3301      	adds	r3, #1
 800801a:	72fb      	strb	r3, [r7, #11]
      break;
 800801c:	e007      	b.n	800802e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fa08 	bl	8008436 <USBD_CtlError>
      err++;
 8008026:	7afb      	ldrb	r3, [r7, #11]
 8008028:	3301      	adds	r3, #1
 800802a:	72fb      	strb	r3, [r7, #11]
      break;
 800802c:	bf00      	nop
  }

  if (err != 0U)
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d11e      	bne.n	8008072 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	88db      	ldrh	r3, [r3, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00e      	beq.n	8008060 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	88da      	ldrh	r2, [r3, #6]
 8008046:	893b      	ldrh	r3, [r7, #8]
 8008048:	4293      	cmp	r3, r2
 800804a:	bf28      	it	cs
 800804c:	4613      	movcs	r3, r2
 800804e:	b29b      	uxth	r3, r3
 8008050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008052:	893b      	ldrh	r3, [r7, #8]
 8008054:	461a      	mov	r2, r3
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa5d 	bl	8008518 <USBD_CtlSendData>
 800805e:	e009      	b.n	8008074 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9e7 	bl	8008436 <USBD_CtlError>
 8008068:	e004      	b.n	8008074 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 faae 	bl	80085cc <USBD_CtlSendStatus>
 8008070:	e000      	b.n	8008074 <USBD_GetDescriptor+0x320>
    return;
 8008072:	bf00      	nop
  }
}
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop

0800807c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	889b      	ldrh	r3, [r3, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d131      	bne.n	80080f2 <USBD_SetAddress+0x76>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d12d      	bne.n	80080f2 <USBD_SetAddress+0x76>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	2b7f      	cmp	r3, #127	; 0x7f
 800809c:	d829      	bhi.n	80080f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d104      	bne.n	80080c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9bc 	bl	8008436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	e01d      	b.n	80080fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7bfa      	ldrb	r2, [r7, #15]
 80080c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 ff5d 	bl	8008f8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa7a 	bl	80085cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	e009      	b.n	80080fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f0:	e004      	b.n	80080fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f99e 	bl	8008436 <USBD_CtlError>
  }
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	885b      	ldrh	r3, [r3, #2]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4b4e      	ldr	r3, [pc, #312]	; (8008254 <USBD_SetConfig+0x150>)
 800811a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800811c:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <USBD_SetConfig+0x150>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d905      	bls.n	8008130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f985 	bl	8008436 <USBD_CtlError>
    return USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e08c      	b.n	800824a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d002      	beq.n	8008142 <USBD_SetConfig+0x3e>
 800813c:	2b03      	cmp	r3, #3
 800813e:	d029      	beq.n	8008194 <USBD_SetConfig+0x90>
 8008140:	e075      	b.n	800822e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008142:	4b44      	ldr	r3, [pc, #272]	; (8008254 <USBD_SetConfig+0x150>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800814a:	4b42      	ldr	r3, [pc, #264]	; (8008254 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008154:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <USBD_SetConfig+0x150>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fe ffb7 	bl	80070ce <USBD_SetClassConfig>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f962 	bl	8008436 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800817a:	e065      	b.n	8008248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa25 	bl	80085cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2203      	movs	r2, #3
 8008186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800818a:	e05d      	b.n	8008248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa1d 	bl	80085cc <USBD_CtlSendStatus>
      break;
 8008192:	e059      	b.n	8008248 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008194:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <USBD_SetConfig+0x150>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d112      	bne.n	80081c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <USBD_SetConfig+0x150>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ae:	4b29      	ldr	r3, [pc, #164]	; (8008254 <USBD_SetConfig+0x150>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fe ffa6 	bl	8007106 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa06 	bl	80085cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081c0:	e042      	b.n	8008248 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081c2:	4b24      	ldr	r3, [pc, #144]	; (8008254 <USBD_SetConfig+0x150>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d02a      	beq.n	8008226 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe ff94 	bl	8007106 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081de:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <USBD_SetConfig+0x150>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <USBD_SetConfig+0x150>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fe ff6d 	bl	80070ce <USBD_SetClassConfig>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f918 	bl	8008436 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fe ff79 	bl	8007106 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800821c:	e014      	b.n	8008248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9d4 	bl	80085cc <USBD_CtlSendStatus>
      break;
 8008224:	e010      	b.n	8008248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f9d0 	bl	80085cc <USBD_CtlSendStatus>
      break;
 800822c:	e00c      	b.n	8008248 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f900 	bl	8008436 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <USBD_SetConfig+0x150>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fe ff62 	bl	8007106 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008242:	2303      	movs	r3, #3
 8008244:	73fb      	strb	r3, [r7, #15]
      break;
 8008246:	bf00      	nop
  }

  return ret;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200003a4 	.word	0x200003a4

08008258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d004      	beq.n	8008274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f8e2 	bl	8008436 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008272:	e023      	b.n	80082bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	dc02      	bgt.n	8008286 <USBD_GetConfig+0x2e>
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc03      	bgt.n	800828c <USBD_GetConfig+0x34>
 8008284:	e015      	b.n	80082b2 <USBD_GetConfig+0x5a>
 8008286:	2b03      	cmp	r3, #3
 8008288:	d00b      	beq.n	80082a2 <USBD_GetConfig+0x4a>
 800828a:	e012      	b.n	80082b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3308      	adds	r3, #8
 8008296:	2201      	movs	r2, #1
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f93c 	bl	8008518 <USBD_CtlSendData>
        break;
 80082a0:	e00c      	b.n	80082bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2201      	movs	r2, #1
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f934 	bl	8008518 <USBD_CtlSendData>
        break;
 80082b0:	e004      	b.n	80082bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8be 	bl	8008436 <USBD_CtlError>
        break;
 80082ba:	bf00      	nop
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d81e      	bhi.n	800831a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	88db      	ldrh	r3, [r3, #6]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d004      	beq.n	80082ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f8a5 	bl	8008436 <USBD_CtlError>
        break;
 80082ec:	e01a      	b.n	8008324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 0202 	orr.w	r2, r3, #2
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	330c      	adds	r3, #12
 800830e:	2202      	movs	r2, #2
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f900 	bl	8008518 <USBD_CtlSendData>
      break;
 8008318:	e004      	b.n	8008324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f88a 	bl	8008436 <USBD_CtlError>
      break;
 8008322:	bf00      	nop
  }
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d107      	bne.n	800834e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f940 	bl	80085cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800834c:	e013      	b.n	8008376 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d10b      	bne.n	800836e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b29b      	uxth	r3, r3
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f930 	bl	80085cc <USBD_CtlSendStatus>
}
 800836c:	e003      	b.n	8008376 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f860 	bl	8008436 <USBD_CtlError>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	2b02      	cmp	r3, #2
 8008394:	d80b      	bhi.n	80083ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	885b      	ldrh	r3, [r3, #2]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d10c      	bne.n	80083b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f910 	bl	80085cc <USBD_CtlSendStatus>
      }
      break;
 80083ac:	e004      	b.n	80083b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f840 	bl	8008436 <USBD_CtlError>
      break;
 80083b6:	e000      	b.n	80083ba <USBD_ClrFeature+0x3c>
      break;
 80083b8:	bf00      	nop
  }
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	781a      	ldrb	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fa17 	bl	8007820 <SWAPBYTE>
 80083f2:	4603      	mov	r3, r0
 80083f4:	461a      	mov	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fa0a 	bl	8007820 <SWAPBYTE>
 800840c:	4603      	mov	r3, r0
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff f9fd 	bl	8007820 <SWAPBYTE>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	80da      	strh	r2, [r3, #6]
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008440:	2180      	movs	r1, #128	; 0x80
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fd0a 	bl	8008e5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fd06 	bl	8008e5c <USBD_LL_StallEP>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d036      	beq.n	80084dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f000 f836 	bl	80084e4 <USBD_GetLen>
 8008478:	4603      	mov	r3, r0
 800847a:	3301      	adds	r3, #1
 800847c:	b29b      	uxth	r3, r3
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	4413      	add	r3, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	701a      	strb	r2, [r3, #0]
  idx++;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	3301      	adds	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2203      	movs	r2, #3
 80084a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084a8:	e013      	b.n	80084d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3301      	adds	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
    idx++;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	3301      	adds	r3, #1
 80084c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	4413      	add	r3, r2
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	3301      	adds	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e7      	bne.n	80084aa <USBD_GetString+0x52>
 80084da:	e000      	b.n	80084de <USBD_GetString+0x86>
    return;
 80084dc:	bf00      	nop
  }
}
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084f4:	e005      	b.n	8008502 <USBD_GetLen+0x1e>
  {
    len++;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	3301      	adds	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3301      	adds	r3, #1
 8008500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f5      	bne.n	80084f6 <USBD_GetLen+0x12>
  }

  return len;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2202      	movs	r2, #2
 8008528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fd5a 	bl	8008ff8 <USBD_LL_Transmit>

  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fd49 	bl	8008ff8 <USBD_LL_Transmit>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2203      	movs	r2, #3
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fd64 	bl	8009068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	2100      	movs	r1, #0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fd53 	bl	8009068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2204      	movs	r2, #4
 80085d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fd08 	bl	8008ff8 <USBD_LL_Transmit>

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2205      	movs	r2, #5
 80085fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fd2d 	bl	8009068 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800861c:	2200      	movs	r2, #0
 800861e:	4912      	ldr	r1, [pc, #72]	; (8008668 <MX_USB_DEVICE_Init+0x50>)
 8008620:	4812      	ldr	r0, [pc, #72]	; (800866c <MX_USB_DEVICE_Init+0x54>)
 8008622:	f7fe fcd7 	bl	8006fd4 <USBD_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800862c:	f7f8 faf6 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008630:	490f      	ldr	r1, [pc, #60]	; (8008670 <MX_USB_DEVICE_Init+0x58>)
 8008632:	480e      	ldr	r0, [pc, #56]	; (800866c <MX_USB_DEVICE_Init+0x54>)
 8008634:	f7fe fcfe 	bl	8007034 <USBD_RegisterClass>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800863e:	f7f8 faed 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008642:	490c      	ldr	r1, [pc, #48]	; (8008674 <MX_USB_DEVICE_Init+0x5c>)
 8008644:	4809      	ldr	r0, [pc, #36]	; (800866c <MX_USB_DEVICE_Init+0x54>)
 8008646:	f7fe fcab 	bl	8006fa0 <USBD_CUSTOM_HID_RegisterInterface>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008650:	f7f8 fae4 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008654:	4805      	ldr	r0, [pc, #20]	; (800866c <MX_USB_DEVICE_Init+0x54>)
 8008656:	f7fe fd23 	bl	80070a0 <USBD_Start>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008660:	f7f8 fadc 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008664:	bf00      	nop
 8008666:	bd80      	pop	{r7, pc}
 8008668:	200000b8 	.word	0x200000b8
 800866c:	200003a8 	.word	0x200003a8
 8008670:	2000000c 	.word	0x2000000c
 8008674:	200000a8 	.word	0x200000a8

08008678 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800867c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800868c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800868e:	4618      	mov	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	460a      	mov	r2, r1
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  miflag = 1;
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <CUSTOM_HID_OutEvent_FS+0x24>)
 80086aa:	2201      	movs	r2, #1
 80086ac:	701a      	strb	r2, [r3, #0]

  /* Start next USB packet transfer once data processing is completed */
  //USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 80086ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	20000684 	.word	0x20000684

080086c0 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4804      	ldr	r0, [pc, #16]	; (80086e4 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80086d4:	f7fe fb1c 	bl	8006d10 <USBD_CUSTOM_HID_SendReport>
 80086d8:	4603      	mov	r3, r0
 80086da:	b25b      	sxtb	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	200003a8 	.word	0x200003a8

080086e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2212      	movs	r2, #18
 80086f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200000d8 	.word	0x200000d8

0800870c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2204      	movs	r2, #4
 800871c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	200000f8 	.word	0x200000f8

08008730 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4907      	ldr	r1, [pc, #28]	; (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
 8008746:	4808      	ldr	r0, [pc, #32]	; (8008768 <USBD_FS_ProductStrDescriptor+0x38>)
 8008748:	f7ff fe86 	bl	8008458 <USBD_GetString>
 800874c:	e004      	b.n	8008758 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4904      	ldr	r1, [pc, #16]	; (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
 8008752:	4805      	ldr	r0, [pc, #20]	; (8008768 <USBD_FS_ProductStrDescriptor+0x38>)
 8008754:	f7ff fe80 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000688 	.word	0x20000688
 8008768:	08009220 	.word	0x08009220

0800876c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	4904      	ldr	r1, [pc, #16]	; (800878c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800877c:	4804      	ldr	r0, [pc, #16]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800877e:	f7ff fe6b 	bl	8008458 <USBD_GetString>
  return USBD_StrDesc;
 8008782:	4b02      	ldr	r3, [pc, #8]	; (800878c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000688 	.word	0x20000688
 8008790:	08009240 	.word	0x08009240

08008794 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	221a      	movs	r2, #26
 80087a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087a6:	f000 f855 	bl	8008854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087aa:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200000fc 	.word	0x200000fc

080087b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d105      	bne.n	80087d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4907      	ldr	r1, [pc, #28]	; (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ce:	4808      	ldr	r0, [pc, #32]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d0:	f7ff fe42 	bl	8008458 <USBD_GetString>
 80087d4:	e004      	b.n	80087e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4904      	ldr	r1, [pc, #16]	; (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087dc:	f7ff fe3c 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000688 	.word	0x20000688
 80087f0:	08009258 	.word	0x08009258

080087f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4907      	ldr	r1, [pc, #28]	; (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880a:	4808      	ldr	r0, [pc, #32]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800880c:	f7ff fe24 	bl	8008458 <USBD_GetString>
 8008810:	e004      	b.n	800881c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4904      	ldr	r1, [pc, #16]	; (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008818:	f7ff fe1e 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000688 	.word	0x20000688
 800882c:	0800926c 	.word	0x0800926c

08008830 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	220c      	movs	r2, #12
 8008840:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008842:	4b03      	ldr	r3, [pc, #12]	; (8008850 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	200000ec 	.word	0x200000ec

08008854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <Get_SerialNum+0x44>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <Get_SerialNum+0x48>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <Get_SerialNum+0x4c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800887a:	2208      	movs	r2, #8
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <Get_SerialNum+0x50>)
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f814 	bl	80088ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008884:	2204      	movs	r2, #4
 8008886:	4908      	ldr	r1, [pc, #32]	; (80088a8 <Get_SerialNum+0x54>)
 8008888:	68b8      	ldr	r0, [r7, #8]
 800888a:	f000 f80f 	bl	80088ac <IntToUnicode>
  }
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	1fff7590 	.word	0x1fff7590
 800889c:	1fff7594 	.word	0x1fff7594
 80088a0:	1fff7598 	.word	0x1fff7598
 80088a4:	200000fe 	.word	0x200000fe
 80088a8:	2000010e 	.word	0x2000010e

080088ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	e027      	b.n	8008914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d80b      	bhi.n	80088e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0f1b      	lsrs	r3, r3, #28
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	440b      	add	r3, r1
 80088dc:	3230      	adds	r2, #48	; 0x30
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	e00a      	b.n	80088fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3237      	adds	r2, #55	; 0x37
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	3301      	adds	r3, #1
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4413      	add	r3, r2
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	3301      	adds	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
 8008914:	7dfa      	ldrb	r2, [r7, #23]
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3d3      	bcc.n	80088c4 <IntToUnicode+0x18>
  }
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b0ac      	sub	sp, #176	; 0xb0
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	605a      	str	r2, [r3, #4]
 800893e:	609a      	str	r2, [r3, #8]
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	2288      	movs	r2, #136	; 0x88
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fc2f 	bl	80091b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895a:	f040 8085 	bne.w	8008a68 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800895e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008962:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008964:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800896c:	2301      	movs	r3, #1
 800896e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008970:	2301      	movs	r3, #1
 8008972:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008974:	2318      	movs	r3, #24
 8008976:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008978:	2307      	movs	r3, #7
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800897c:	2302      	movs	r3, #2
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008980:	2302      	movs	r3, #2
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008984:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008988:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	4618      	mov	r0, r3
 8008990:	f7fb fa92 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800899a:	f7f8 f93f 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800899e:	4b34      	ldr	r3, [pc, #208]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 80089a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a2:	4a33      	ldr	r2, [pc, #204]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089aa:	4b31      	ldr	r3, [pc, #196]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 80089ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80089b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089be:	2300      	movs	r3, #0
 80089c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80089ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089ce:	4619      	mov	r1, r3
 80089d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089d4:	f7f8 fe8a 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80089d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e0:	2302      	movs	r3, #2
 80089e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089ec:	2303      	movs	r3, #3
 80089ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089f2:	230a      	movs	r3, #10
 80089f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089fc:	4619      	mov	r1, r3
 80089fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a02:	f7f8 fe73 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0a:	4a19      	ldr	r2, [pc, #100]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d114      	bne.n	8008a54 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2e:	4a10      	ldr	r2, [pc, #64]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a34:	6593      	str	r3, [r2, #88]	; 0x58
 8008a36:	4b0e      	ldr	r3, [pc, #56]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	60bb      	str	r3, [r7, #8]
 8008a40:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008a42:	f7fa fb6d 	bl	8003120 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a46:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <HAL_PCD_MspInit+0x144>)
 8008a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a50:	6593      	str	r3, [r2, #88]	; 0x58
 8008a52:	e001      	b.n	8008a58 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008a54:	f7fa fb64 	bl	8003120 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	2043      	movs	r0, #67	; 0x43
 8008a5e:	f7f8 fd02 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a62:	2043      	movs	r0, #67	; 0x43
 8008a64:	f7f8 fd1b 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a68:	bf00      	nop
 8008a6a:	37b0      	adds	r7, #176	; 0xb0
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40021000 	.word	0x40021000

08008a74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f7fe fb55 	bl	800713a <USBD_LL_SetupStage>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7fe fb8f 	bl	80071e4 <USBD_LL_DataOutStage>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3348      	adds	r3, #72	; 0x48
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7fe fc28 	bl	800734a <USBD_LL_DataInStage>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fd62 	bl	80075da <USBD_LL_SOF>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b26:	2301      	movs	r3, #1
 8008b28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d001      	beq.n	8008b36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b32:	f7f8 f873 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b3c:	7bfa      	ldrb	r2, [r7, #15]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fd06 	bl	8007552 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fcae 	bl	80074ae <USBD_LL_Reset>
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fcf5 	bl	8007572 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b90:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <HAL_PCD_SuspendCallback+0x48>)
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	4a03      	ldr	r2, [pc, #12]	; (8008ba4 <HAL_PCD_SuspendCallback+0x48>)
 8008b96:	f043 0306 	orr.w	r3, r3, #6
 8008b9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	e000ed00 	.word	0xe000ed00

08008ba8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bd0:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <HAL_PCD_ResumeCallback+0x4c>)
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	4a07      	ldr	r2, [pc, #28]	; (8008bf4 <HAL_PCD_ResumeCallback+0x4c>)
 8008bd6:	f023 0306 	bic.w	r3, r3, #6
 8008bda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008bdc:	f000 fae2 	bl	80091a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fcdf 	bl	80075aa <USBD_LL_Resume>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	e000ed00 	.word	0xe000ed00

08008bf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fd35 	bl	800767e <USBD_LL_IsoOUTIncomplete>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fcf1 	bl	800761a <USBD_LL_IsoINIncomplete>
}
 8008c38:	bf00      	nop
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fd47 	bl	80076e2 <USBD_LL_DevConnected>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fd44 	bl	80076f8 <USBD_LL_DevDisconnected>
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d13c      	bne.n	8008d02 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c88:	4a20      	ldr	r2, [pc, #128]	; (8008d0c <USBD_LL_Init+0x94>)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <USBD_LL_Init+0x94>)
 8008c94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c98:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <USBD_LL_Init+0x94>)
 8008c9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <USBD_LL_Init+0x94>)
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <USBD_LL_Init+0x94>)
 8008ca8:	2202      	movs	r2, #2
 8008caa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cae:	2202      	movs	r2, #2
 8008cb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008cc4:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cca:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <USBD_LL_Init+0x94>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cd0:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cd6:	480d      	ldr	r0, [pc, #52]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cd8:	f7f9 f81f 	bl	8001d1a <HAL_PCD_Init>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ce2:	f7f7 ff9b 	bl	8000c1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ce6:	2180      	movs	r1, #128	; 0x80
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cea:	f7fa f970 	bl	8002fce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cee:	2240      	movs	r2, #64	; 0x40
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4806      	ldr	r0, [pc, #24]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cf4:	f7fa f924 	bl	8002f40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cf8:	2280      	movs	r2, #128	; 0x80
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <USBD_LL_Init+0x94>)
 8008cfe:	f7fa f91f 	bl	8002f40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000888 	.word	0x20000888

08008d10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f9 f91b 	bl	8001f62 <HAL_PCD_Start>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d816      	bhi.n	8008d64 <USBD_LL_Start+0x54>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <USBD_LL_Start+0x2c>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d4d 	.word	0x08008d4d
 8008d40:	08008d53 	.word	0x08008d53
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d5f 	.word	0x08008d5f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d50:	e00b      	b.n	8008d6a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	73fb      	strb	r3, [r7, #15]
    break;
 8008d56:	e008      	b.n	8008d6a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	e005      	b.n	8008d6a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
    break;
 8008d62:	e002      	b.n	8008d6a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	bf00      	nop
  }
  return usb_status;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	4611      	mov	r1, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	70fb      	strb	r3, [r7, #3]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70bb      	strb	r3, [r7, #2]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d9c:	78bb      	ldrb	r3, [r7, #2]
 8008d9e:	883a      	ldrh	r2, [r7, #0]
 8008da0:	78f9      	ldrb	r1, [r7, #3]
 8008da2:	f7f9 fdc5 	bl	8002930 <HAL_PCD_EP_Open>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d817      	bhi.n	8008de0 <USBD_LL_OpenEP+0x6c>
 8008db0:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBD_LL_OpenEP+0x44>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008dc9 	.word	0x08008dc9
 8008dbc:	08008dcf 	.word	0x08008dcf
 8008dc0:	08008dd5 	.word	0x08008dd5
 8008dc4:	08008ddb 	.word	0x08008ddb
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	e00b      	b.n	8008de6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd2:	e008      	b.n	8008de6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd8:	e005      	b.n	8008de6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dde:	e002      	b.n	8008de6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	bf00      	nop
  }
  return usb_status;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f9 fdf6 	bl	8002a00 <HAL_PCD_EP_Close>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d816      	bhi.n	8008e4c <USBD_LL_CloseEP+0x5c>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_LL_CloseEP+0x34>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e3b 	.word	0x08008e3b
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e47 	.word	0x08008e47
    case HAL_OK :
      usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	e00b      	b.n	8008e52 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3e:	e008      	b.n	8008e52 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
    break;
 8008e44:	e005      	b.n	8008e52 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4a:	e002      	b.n	8008e52 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	bf00      	nop
  }
  return usb_status;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f9 fe6d 	bl	8002b5a <HAL_PCD_EP_SetStall>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d816      	bhi.n	8008eb8 <USBD_LL_StallEP+0x5c>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <USBD_LL_StallEP+0x34>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008ea7 	.word	0x08008ea7
 8008e98:	08008ead 	.word	0x08008ead
 8008e9c:	08008eb3 	.word	0x08008eb3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea4:	e00b      	b.n	8008ebe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eaa:	e008      	b.n	8008ebe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb0:	e005      	b.n	8008ebe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb6:	e002      	b.n	8008ebe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebc:	bf00      	nop
  }
  return usb_status;
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f9 fe99 	bl	8002c1e <HAL_PCD_EP_ClrStall>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d816      	bhi.n	8008f24 <USBD_LL_ClearStallEP+0x5c>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <USBD_LL_ClearStallEP+0x34>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f13 	.word	0x08008f13
 8008f04:	08008f19 	.word	0x08008f19
 8008f08:	08008f1f 	.word	0x08008f1f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	e00b      	b.n	8008f2a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	73fb      	strb	r3, [r7, #15]
    break;
 8008f16:	e008      	b.n	8008f2a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1c:	e005      	b.n	8008f2a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	73fb      	strb	r3, [r7, #15]
    break;
 8008f22:	e002      	b.n	8008f2a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	73fb      	strb	r3, [r7, #15]
    break;
 8008f28:	bf00      	nop
  }
  return usb_status;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	da0b      	bge.n	8008f68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	333e      	adds	r3, #62	; 0x3e
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	e00b      	b.n	8008f80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f6e:	68f9      	ldr	r1, [r7, #12]
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	440b      	add	r3, r1
 8008f7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008f7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f9 fc9b 	bl	80028e6 <HAL_PCD_SetAddress>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d816      	bhi.n	8008fe8 <USBD_LL_SetUSBAddress+0x5c>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <USBD_LL_SetUSBAddress+0x34>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fd1 	.word	0x08008fd1
 8008fc4:	08008fd7 	.word	0x08008fd7
 8008fc8:	08008fdd 	.word	0x08008fdd
 8008fcc:	08008fe3 	.word	0x08008fe3
    case HAL_OK :
      usb_status = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	e00b      	b.n	8008fee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fda:	e008      	b.n	8008fee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	e005      	b.n	8008fee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe6:	e002      	b.n	8008fee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	73fb      	strb	r3, [r7, #15]
    break;
 8008fec:	bf00      	nop
  }
  return usb_status;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	607a      	str	r2, [r7, #4]
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	460b      	mov	r3, r1
 8009006:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009016:	7af9      	ldrb	r1, [r7, #11]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	f7f9 fd6c 	bl	8002af8 <HAL_PCD_EP_Transmit>
 8009020:	4603      	mov	r3, r0
 8009022:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009024:	7dbb      	ldrb	r3, [r7, #22]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d816      	bhi.n	8009058 <USBD_LL_Transmit+0x60>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <USBD_LL_Transmit+0x38>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009041 	.word	0x08009041
 8009034:	08009047 	.word	0x08009047
 8009038:	0800904d 	.word	0x0800904d
 800903c:	08009053 	.word	0x08009053
    case HAL_OK :
      usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	75fb      	strb	r3, [r7, #23]
    break;
 8009044:	e00b      	b.n	800905e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	75fb      	strb	r3, [r7, #23]
    break;
 800904a:	e008      	b.n	800905e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
    break;
 8009050:	e005      	b.n	800905e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009052:	2303      	movs	r3, #3
 8009054:	75fb      	strb	r3, [r7, #23]
    break;
 8009056:	e002      	b.n	800905e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	75fb      	strb	r3, [r7, #23]
    break;
 800905c:	bf00      	nop
  }
  return usb_status;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	460b      	mov	r3, r1
 8009076:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009086:	7af9      	ldrb	r1, [r7, #11]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	f7f9 fd02 	bl	8002a94 <HAL_PCD_EP_Receive>
 8009090:	4603      	mov	r3, r0
 8009092:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009094:	7dbb      	ldrb	r3, [r7, #22]
 8009096:	2b03      	cmp	r3, #3
 8009098:	d816      	bhi.n	80090c8 <USBD_LL_PrepareReceive+0x60>
 800909a:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <USBD_LL_PrepareReceive+0x38>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090b1 	.word	0x080090b1
 80090a4:	080090b7 	.word	0x080090b7
 80090a8:	080090bd 	.word	0x080090bd
 80090ac:	080090c3 	.word	0x080090c3
    case HAL_OK :
      usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	75fb      	strb	r3, [r7, #23]
    break;
 80090b4:	e00b      	b.n	80090ce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
    break;
 80090ba:	e008      	b.n	80090ce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
    break;
 80090c0:	e005      	b.n	80090ce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090c2:	2303      	movs	r3, #3
 80090c4:	75fb      	strb	r3, [r7, #23]
    break;
 80090c6:	e002      	b.n	80090ce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	75fb      	strb	r3, [r7, #23]
    break;
 80090cc:	bf00      	nop
  }
  return usb_status;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <HAL_PCDEx_LPM_Callback+0x18>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d01f      	beq.n	800912e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80090ee:	e03b      	b.n	8009168 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80090f8:	f000 f854 	bl	80091a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090fc:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <HAL_PCDEx_LPM_Callback+0x98>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <HAL_PCDEx_LPM_Callback+0x98>)
 8009102:	f023 0306 	bic.w	r3, r3, #6
 8009106:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6812      	ldr	r2, [r2, #0]
 8009116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fa3f 	bl	80075aa <USBD_LL_Resume>
    break;
 800912c:	e01c      	b.n	8009168 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe fa10 	bl	8007572 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <HAL_PCDEx_LPM_Callback+0x98>)
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	4a04      	ldr	r2, [pc, #16]	; (8009170 <HAL_PCDEx_LPM_Callback+0x98>)
 8009160:	f043 0306 	orr.w	r3, r3, #6
 8009164:	6113      	str	r3, [r2, #16]
    break;
 8009166:	bf00      	nop
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	e000ed00 	.word	0xe000ed00

08009174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <USBD_static_malloc+0x18>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000d94 	.word	0x20000d94

08009190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80091a8:	f7f7 f9ea 	bl	8000580 <SystemClock_Config>
}
 80091ac:	bf00      	nop
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <memset>:
 80091b0:	4402      	add	r2, r0
 80091b2:	4603      	mov	r3, r0
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d100      	bne.n	80091ba <memset+0xa>
 80091b8:	4770      	bx	lr
 80091ba:	f803 1b01 	strb.w	r1, [r3], #1
 80091be:	e7f9      	b.n	80091b4 <memset+0x4>

080091c0 <__libc_init_array>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4d0d      	ldr	r5, [pc, #52]	; (80091f8 <__libc_init_array+0x38>)
 80091c4:	4c0d      	ldr	r4, [pc, #52]	; (80091fc <__libc_init_array+0x3c>)
 80091c6:	1b64      	subs	r4, r4, r5
 80091c8:	10a4      	asrs	r4, r4, #2
 80091ca:	2600      	movs	r6, #0
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	d109      	bne.n	80091e4 <__libc_init_array+0x24>
 80091d0:	4d0b      	ldr	r5, [pc, #44]	; (8009200 <__libc_init_array+0x40>)
 80091d2:	4c0c      	ldr	r4, [pc, #48]	; (8009204 <__libc_init_array+0x44>)
 80091d4:	f000 f818 	bl	8009208 <_init>
 80091d8:	1b64      	subs	r4, r4, r5
 80091da:	10a4      	asrs	r4, r4, #2
 80091dc:	2600      	movs	r6, #0
 80091de:	42a6      	cmp	r6, r4
 80091e0:	d105      	bne.n	80091ee <__libc_init_array+0x2e>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e8:	4798      	blx	r3
 80091ea:	3601      	adds	r6, #1
 80091ec:	e7ee      	b.n	80091cc <__libc_init_array+0xc>
 80091ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f2:	4798      	blx	r3
 80091f4:	3601      	adds	r6, #1
 80091f6:	e7f2      	b.n	80091de <__libc_init_array+0x1e>
 80091f8:	080092d4 	.word	0x080092d4
 80091fc:	080092d4 	.word	0x080092d4
 8009200:	080092d4 	.word	0x080092d4
 8009204:	080092d8 	.word	0x080092d8

08009208 <_init>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr

08009214 <_fini>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr
